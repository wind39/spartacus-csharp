<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spartacus</name>
    </assembly>
    <members>
        <member name="T:Spartacus.Utils.Exception">
             <summary>
             Classe Spartacus.Utils.Exception.
             Herda da classe <see cref="T:System.Exception" />.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Exception.v_message">
             <summary>
             Mensagem de Exceção.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.Exception.#ctor">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.Exception.#ctor(System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Utils.Exception.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Utils.Exception.#ctor(System.String,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Utils.Exception.#ctor(System.String,System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Utils.Exception.#ctor(System.String,System.Exception,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="T:Spartacus.Utils.FileType">
             <summary>
             A classe <see cref="T:Spartacus.Utils.File" /> pode representar tanto um arquivo quanto um diretório.
             A única coisa que diferencia é o tipo do arquivo.
             </summary>
            </member>
        <member name="T:Spartacus.Utils.PathSeparator">
             <summary>
             Separador de diretórios do nome do arquivo.
             Em sistemas Unix é SLASH (/), e em sistemas Windows é BACKSLASH (\).
             </summary>
            </member>
        <member name="T:Spartacus.Utils.File">
             <summary>
             Classe File.
             Representa um arquivo ou um diretório.
             Pode ser usado em listas de arquivos para processamento em massa, ou para construção de árvores de arquivos.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_id">
             <summary>
             Identificador único do arquivo (se aplicável).
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_parentid">
             <summary>
             Identificador do diretório pai do arquivo (se aplicável).
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_filetype">
             <summary>
             Indica se é um arquivo ou um diretório.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_pathseparator">
             <summary>
             Separador de diretórios.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_path">
             <summary>
             Caminho completo do diretório pai do arquivo ou diretório atual.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_name">
             <summary>
             Nome base do arquivo ou diretório.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_extension">
             <summary>
             Extensão do arquivo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_lastwritedate">
             <summary>
             Data da última modificação do arquivo ou diretório.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_size">
             <summary>
             Tamanho do arquivo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_encoding">
             <summary>
             Codificação de caracteres do arquivo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_pagenumber">
             <summary>
             Número da página de grid em que o arquivo se encontra.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_protected">
             <summary>
             Informa se o arquivo ou diretório deve protegido contra escrita (fictício e não permissões reais do arquivo).
             </summary>
            </member>
        <member name="F:Spartacus.Utils.File.v_hidden">
             <summary>
             Informa se o arquivo é oculto ou não.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.DateTime)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.DateTime)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.DateTime,System.Int64)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.DateTime,System.Int64)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.DateTime,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.DateTime,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.DateTime,System.Int64,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.DateTime,System.Int64,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,System.DateTime)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.DateTime)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,System.DateTime,System.Int64)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.DateTime,System.Int64)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,System.DateTime,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.DateTime,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,System.DateTime,System.Int64,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.DateTime,System.Int64,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.DateTime)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.DateTime)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.DateTime,System.Int64)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.DateTime,System.Int64)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.DateTime,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.DateTime,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.DateTime,System.Int64,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,Spartacus.Utils.PathSeparator,System.DateTime,System.Int64,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,System.DateTime)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.DateTime)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,System.DateTime,System.Int64)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.DateTime,System.Int64)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,System.DateTime,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.DateTime,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,System.DateTime,System.Int64,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.#ctor(System.Int32,System.Int32,Spartacus.Utils.FileType,System.String,System.Boolean,Spartacus.Utils.PathSeparator,System.DateTime,System.Int64,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.File" />.
             </summary>
             <param name="p_id">
             Identificador único do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_parentid">
             Identificador do diretório pai do arquivo ou diretório (se aplicável).
             </param>
             <param name="p_type">
             Indica se é um arquivo ou um diretório.
             </param>
             <param name="p_completename">
             Nome completo, absoluto ou relativo, do arquivo ou diretório atual.
             </param>
             <param name="p_encryptedname">
             Se o nome do arquivo está criptografado ou não.
             </param>
             <param name="p_separator">
             Separador de diretórios do caminho completo do arquivo.
             </param>
             <param name="p_lastwritedate">
             Data da última modificação do arquivo ou diretório.
             </param>
             <param name="p_size">
             Tamanho do arquivo.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.GetBaseName(System.String)">
             <summary>
             Pega o nome base do arquivo ou diretório.
             </summary>
             <returns>
             Nome base do arquivo ou diretório.
             </returns>
             <param name="p_completename">
             Nome completo do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.GetExtension(System.String)">
             <summary>
             Pega a extensão do arquivo.
             </summary>
             <returns>
             Extensão do arquivo ou NULL se for um diretório.
             </returns>
             <param name="p_completename">
             Nome completo do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.GetPath(System.String)">
             <summary>
             Pega o caminho completo do diretório pai do arquivo ou diretório atual.
             </summary>
             <returns>
             Caminho completo do diretório pai do arquivo ou diretório atual.
             </returns>
             <param name="p_completename">
             Nome completo do arquivo ou diretório.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.GetBaseNameNoExt">
             <summary>
             Faz o mesmo que a função GetBaseName, porém não considera a extensão do arquivo.
             Se for um diretório, retorna o mesmo valor que a função GetBaseName.
             </summary>
             <returns>Nome base do arquivo ou diretório, sem considerar extensão.</returns>
            </member>
        <member name="M:Spartacus.Utils.File.CompleteFileName">
             <summary>
             Retorna o nome completo do arquivo ou diretório atual.
             </summary>
             <returns>
             Nome completo do arquivo ou diretório atual.
             </returns>
            </member>
        <member name="M:Spartacus.Utils.File.CompleteFileName(System.Boolean)">
             <summary>
             Retorna o nome completo criptografado do arquivo ou diretório atual.
             Isso é necessário para armazenar strings sem acento no banco de dados.
             </summary>
             <returns>
             Nome completo do arquivo ou diretório atual.
             </returns>
             <param name="p_encryptname">
             Se deve criptografar ou não o nome do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Utils.File.GetSize">
             <summary>
             Converte o tamanho em bytes para uma string representando o tamanho do arquivo legível por humanos.
             </summary>
             <returns>
             Tamanho do arquivo legível por humanos.
             </returns>
            </member>
        <member name="M:Spartacus.Utils.File.GetHidden">
             <summary>
             Verifica se o arquivo é oculto baseando-se no seu nome.
             </summary>
             <returns><c>true</c>, se o arquivo for oculto, <c>false</c> caso contrário.</returns>
            </member>
        <member name="T:Spartacus.Utils.FileAttributes">
             <summary>
             Enumera os atributos de arquivos apresentados no grid de arquivos.
             </summary>
            </member>
        <member name="T:Spartacus.Utils.ShowPatternType">
             <summary>
             Enumera as possibilidades de exibição de arquivos baseado no padrão.
             </summary>
            </member>
        <member name="T:Spartacus.Utils.FileExplorer">
             <summary>
             Classe FileExplorer.
             Representa um explorador de arquivos genérico, que pode ser usado em qualquer interface (prompt de comando, desktop ou web).
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_root">
             <summary>
             Pasta raiz do explorador de arquivos.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_current">
             <summary>
             Nome da pasta atual.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_currentlevel">
             <summary>
             Nível atual dentro da estrutura de diretórios.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_files">
             <summary>
             Lista de arquivos e diretórios da pasta atual.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_filesorig">
             <summary>
             Lista original de arquivos e diretórios da pasta atual.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_pathseparator">
             <summary>
             Separador de diretórios.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_numfilesperpage">
             <summary>
             Número de arquivos por página.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_numpages">
             <summary>
             Número de páginas.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_protectpattern">
             <summary>
             Padrão de nome de arquivo ou diretório que deve ser protegido contra escrita (fictício e não permissões reais do arquivo).
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_showpatterntype">
             <summary>
             Informa o tipo de exibição de arquivos baseado no padrão de proteção.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_protectedminlevel">
             <summary>
             Nível mínimo de proteção de escrita dentro da estrutura de diretórios.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_showhiddenfiles">
             <summary>
             Informa se arquivos e diretórios ocultos devem ou não ser mostrados.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_returnhistory">
             <summary>
             Armazena um vetor com o histórico de pastas pai.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_returnhistory_font">
             <summary>
             Fonte usada para renderizar o histórico de pastas pai no aplicativo cliente.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_returnhistory_root">
             <summary>
             Texto a ser exibido como pasta raiz ao renderizar o histórico de pastas pai.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_returnhistory_sep">
             <summary>
             String usada para separar pastas no histórico de pastas pai.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_returnhistory_first">
             <summary>
             String usada como agregação, para quando o texto renderizado do histórico de pastas pai estourou o limite de tamanho.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_returnhistory_maxwidth">
             <summary>
             Largura máxima para mostrar o texto renderizado do histórico de pastas pai.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.FileExplorer.v_compress_progress">
             <summary>
             Evento de progresso para compressão.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.#ctor">
             <summary>
             Initializa uma nova instância da classe <see cref="T:Spartacus.Utils.FileExplorer" />.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.#ctor(System.String)">
             <summary>
             Initializa uma nova instância da classe <see cref="T:Spartacus.Utils.FileExplorer" />.
             </summary>
             <param name="p_root">
             Pasta raiz do explorador de arquivos.
             </param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.#ctor(System.String,Spartacus.Utils.PathSeparator)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.FileExplorer" />.
             </summary>
             <param name="p_root">
             Pasta raiz do explorador de arquivos.
             </param>
             <param name="p_pathseparator">
             Separador de diretórios.
             </param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.SetRoot(System.String)">
             <summary>
             Seta a pasta raiz do explorador de arquivos.
             </summary>
             <param name="p_root">
             Pasta raiz do explorador de arquivos.
             </param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.List">
             <summary>
             Constrói lista de arquivos e diretorios contidos no diretório atual.
             </summary>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir listar o conteúdo do diretório atual.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.FilterList(System.String,System.IO.SearchOption)">
             <summary>
             Lista todos os arquivos cujo nome corresponde ao filtro.
             O filtro é uma string que pode conter vários filtros separados por '|'.
             </summary>
             <returns>Lista com o nome completo de todos os arquivos que correspondem ao filtro.</returns>
             <param name="p_filter">String que pode conter vários filtros separados por '|'.</param>
             <param name="p_searchoption">Opção de busca.</param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Enter(System.Int32)">
             <summary>
             Entra no diretório especificado.
             </summary>
             <param name="p_id">
             Código do diretório dentro da lista de arquivos e diretórios.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando o item referenciado não é um diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Enter(System.String,System.Boolean)">
             <summary>
             Entra no diretório especificado.
             </summary>
             <param name="p_completename">
             Caminho completo do diretório.
             </param>
             <param name="p_protected">
             Se o diretório é protegido ou não.
             </param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Enter(System.String,System.Boolean,Spartacus.Utils.PathSeparator)">
             <summary>
             Entra no diretório especificado.
             </summary>
             <param name="p_completename">
             Caminho completo do diretório.
             </param>
             <param name="p_protected">
             Se o diretório é protegido ou não.
             </param>
             <param name="p_pathseparator">
             Separador de diretórios.
             </param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Return">
             <summary>
             Retorna para o diretório anterior, ou seja, o diretório pai do diretório atual.
             </summary>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando o diretório atual também é a raiz do explorador de arquivos.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Return(System.Int32)">
             <summary>
             Retorna para um diretório anterior qualquer no histórico.
             </summary>
             <param name="p_history">Índice do histórico.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando o diretório atual também é a raiz do explorador de arquivos.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.SetupReturnHistory(System.String,System.Single,System.Boolean,System.String,System.String,System.String,System.Int32)">
             <summary>
             Configura as variáveis necessárias para tratar a renderização do texto do histórico de pastas pai no aplicativo cliente.
             </summary>
             <param name="p_font">Nome da fonte.</param>
             <param name="p_size">Tamanho da fonte.</param>
             <param name="p_italic">Se a fonte deve ser renderizada com estilo itálico ou não.</param>
             <param name="p_fakeroot">Nome falso da raiz.</param>
             <param name="p_sep">Texto separador entre pastas.</param>
             <param name="p_first">Texto do primeiro nível, caso o texto total do histórico de pastas pai estoure o limite.</param>
             <param name="p_maxwidth">Largura máxima do texto a ser renderizado.</param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.GetReturnHistory(System.Boolean@,System.Int32@)">
             <summary>
             Trata o histórico de retorno para pastas pai, conforme fonte e tamanho máximo do texto a ser renderizado.
             </summary>
             <returns>Vetor de histórico de retorno.</returns>
             <param name="p_overflow">.</param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Get(System.Int32)">
             <summary>
             Retorna o arquivo ou diretório solicitado de acordo com seu código dentro da lista de arquivos e diretórios.
             </summary>
             <returns>
             Arquivo ou diretório especificado.
             </returns>
             <param name="p_id">
             Código do arquivo ou diretório dentro da lista de arquivos e diretórios.
             </param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Put(System.String)">
             <summary>
             Cria um arquivo.
             </summary>
             <returns>
             Nome completo do novo arquivo a ser criado.
             </returns>
             <param name="p_file">
             Nome do novo arquivo a ser criado.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível criar o arquivo.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Mkdir(System.String)">
             <summary>
             Cria um diretório.
             </summary>
             <returns>
             Nome completo do novo diretório a ser criado.
             </returns>
             <param name="p_directory">
             Nome do novo diretório a ser criado.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível criar o diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Delete(System.Int32)">
             <summary>
             Deleta o arquivo ou diretório.
             </summary>
             <param name="p_id">
             Código do arquivo dentro da lista de arquivos e diretórios.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível remover o arquivo ou diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Rename(System.Int32,System.String)">
             <summary>
             Renomeia o arquivo ou diretório.
             </summary>
             <param name="p_id">
             Código do arquivo dentro da lista de arquivos e diretórios.
             </param>
             <param name="p_newbasename">
             Novo nome base para arquivo ou diretório.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível renomear o arquivo ou diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Move(System.Int32,System.String)">
             <summary>
             Move o arquivo ou diretório para outro diretório.
             </summary>
             <param name="p_id">
             Código do arquivo dentro da lista de arquivos e diretórios.
             </param>
             <param name="p_directory">
             Diretório para onde o arquivo ou diretório será movido.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível mover o arquivo ou diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Move(System.Collections.Generic.List{System.Int32},System.String)">
             <summary>
             Move os arquivos ou diretórios para outro diretório.
             </summary>
             <param name="p_idlist">
             Lista de códigos de arquivos dentro da lista de arquivos e diretórios.
             </param>
             <param name="p_directory">
             Diretório para onde os arquivos ou diretórios serão movidos.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível mover os arquivos ou diretórios.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Move(System.String,System.String)">
             <summary>
             Move o arquivo ou diretório para outro diretório.
             </summary>
             <param name="p_source">
             Nome completo do arquivo ou diretório.
             </param>
             <param name="p_directory">
             Diretório para onde o arquivo ou diretório será movido.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível mover o arquivo ou diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Move(System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Move o arquivo ou diretório para outro diretório.
             </summary>
             <param name="p_sourcelist">
             Lista de nomes completos de arquivos ou diretórios.
             </param>
             <param name="p_directory">
             Diretório para onde os arquivos ou diretórios serão movidos.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível mover o arquivo ou diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Copy(System.Int32,System.String)">
             <summary>
             Copia o arquivo ou diretório para outro diretório.
             </summary>
             <param name="p_id">
             Código do arquivo dentro da lista de arquivos e diretórios.
             </param>
             <param name="p_directory">
             Diretório para onde o arquivo ou diretório será copiado.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível copiar o arquivo ou diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Copy(System.Collections.Generic.List{System.Int32},System.String)">
             <summary>
             Copia os arquivos ou diretórios para outro diretório.
             </summary>
             <param name="p_idlist">
             Lista de códigos de arquivos dentro da lista de arquivos e diretórios.
             </param>
             <param name="p_directory">
             Diretório para onde os arquivos ou diretórios serão copiados.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível copiar os arquivos ou diretórios.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Copy(System.String,System.String)">
             <summary>
             Copia o arquivo ou diretório para outro diretório.
             </summary>
             <param name="p_source">
             Nome completo do arquivo ou diretório.
             </param>
             <param name="p_directory">
             Diretório para onde o arquivo ou diretório será copiado.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível mover o arquivo ou diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Copy(System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Copia o arquivo ou diretório para outro diretório.
             </summary>
             <param name="p_sourcelist">
             Lista de nomes completos de arquivos ou diretórios.
             </param>
             <param name="p_directory">
             Diretório para onde os arquivo ou diretórios serão copiados.
             </param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não é possível mover o arquivo ou diretório.</exception>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.DirectoryCopy(System.String,System.String,System.Boolean)">
             <summary>
             Copia um diretório para outro, podendo ser recursivo.
             </summary>
             <remarks>Implementação de exemplo da Microsoft, disponível em https://msdn.microsoft.com/en-us/library/bb762914(v=vs.110).aspx</remarks>
             <param name="sourceDirName">Nome do diretório de origem.</param>
             <param name="destDirName">Nome do diretório de destino.</param>
             <param name="copySubDirs">Se deve copiar recursivamente ou não.</param>
            </member>
        <!--FIXME: Invalid documentation markup was found for member M:Spartacus.Utils.FileExplorer.FilterAllAttributes(System.String)-->
        <member name="M:Spartacus.Utils.FileExplorer.FilterAttribute(Spartacus.Utils.FileAttributes,System.String)">
             <summary>
             Filtra a lista de arquivos por um único atributo.
             </summary>
             <param name="p_attribute">Atributo pelo qual a lista de arquivos vai ser filtrada.</param>
             <param name="p_filter">Valor do filtro.</param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.CreateRegex(System.String)">
             <summary>
             Constrói um objeto "expressão regular" baseado em um filtro com '%'.
             </summary>
             <returns>Objeto "expressão regular".</returns>
             <param name="p_filter">Filtro com '%'.</param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.SortAttribute(System.Int32,System.Int32)">
             <summary>
             Ordena a lista de arquivos pela coluna passada como argumento, em ordem ascendente ou descendente.
             </summary>
             <param name="p_attribute">Coluna a ser ordenada (1, 2, 3, 4, 5 ou 6).</param>
             <param name="p_sorttype">Ordem (1: Ascendente ou 2: Descendente).</param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.SplitIntoPages(System.Int32)">
             <summary>
             Atribui um número de página a cada arquivo da lista de arquivos e conta o número de páginas.
             </summary>
             <param name="p_numfilesperpage">Número de arquivos por página.</param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.CompressDirectory(System.String,Spartacus.Utils.File)">
             <summary>
             Cria um arquivo ZIP a partir de um diretório, no diretório pai do mesmo diretório.
             </summary>
             <returns>Arquivo ZIP.</returns>
             <param name="p_zipfilename">Nome do arquivo ZIP a ser criado.</param>
             <param name="p_directory">Diretório a ser compactado.</param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.CompressDirectory(System.String,Spartacus.Utils.File,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Cria um arquivo ZIP a partir de um diretório, no diretório pai do mesmo diretório.
             </summary>
             <returns>Arquivo ZIP.</returns>
             <param name="p_zipfilename">Nome do arquivo ZIP a ser criado.</param>
             <param name="p_directory">Diretório a ser compactado.</param>
             <param name="p_progress">Evento de progresso de compactação.</param>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.CompressSaveProgress(System.Object,Ionic.Zip.SaveProgressEventArgs)">
             <summary>
             Evento intermediário de progresso de compressão.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.FileExplorer.Clone">
             <summary>
             Clona o FileExplorer atual.
             </summary>
            </member>
        <member name="T:Spartacus.Utils.ProgressEventArgs">
             <summary>
             Classe ProgressEventArgs.
             Representa os argumentos do evento de Progresso.
             Herda da classe <see cref="T:System.EventArgs" />.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ProgressEventArgs.v_process">
             <summary>
             Nome do processo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ProgressEventArgs.v_subprocess">
             <summary>
             Nome do subprocesso, método ou rotina.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ProgressEventArgs.v_percentage">
             <summary>
             Percentual de execução do processo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ProgressEventArgs.v_message">
             <summary>
             Mensagem atual do processo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ProgressEventArgs.v_counter">
             <summary>
             Contador de número de elementos processados até o momento.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ProgressEventArgs.v_total">
             <summary>
             Número total de elementos a serem processados.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ProgressEventArgs.v_verbose">
             <summary>
             Informa se o processo deve mostrar suas mensagens ao usuário ou não.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ProgressEventArgs.v_index">
             <summary>
             Índice da instância.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventArgs.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ProgressEventArgs" />.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventArgs.#ctor(System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ProgressEventArgs" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventArgs.#ctor(System.Boolean,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ProgressEventArgs" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
             <param name="p_index">Índice da instância.</param>
            </member>
        <member name="T:Spartacus.Utils.ProgressEventClass">
             <summary>
             Classe ProgressEventClass.
             Representa um evento de Progresso.
             </summary>
            </member>
        <member name="T:Spartacus.Utils.ProgressEventClass.ProgressEventHandler">
             <summary>
             Delegate para gerenciar o evento de Progresso.
             </summary>
            </member>
        <member name="E:Spartacus.Utils.ProgressEventClass.ProgressEvent">
             <summary>
             Evento de Progresso propriamente dito.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ProgressEventClass.ProgressEventArgs">
             <summary>
             Argumentos do evento de Progresso.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventClass.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ProgressEventClass" />.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventClass.#ctor(System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ProgressEventClass" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventClass.#ctor(System.Boolean,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ProgressEventClass" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
             <param name="p_index">Índice da instância.</param>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventClass.FireEvent(System.Double,System.String)">
             <summary>
             Dispara o evento de Progresso.
             </summary>
             <param name="p_percentage">Percentual de execução do processo.</param>
             <param name="p_message">Mensagem atual do processo.</param>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventClass.FireEvent(System.String,System.String,System.Double,System.String)">
             <summary>
             Dispara o evento de Progresso.
             </summary>
             <param name="p_process">Nome do processo.</param>
             <param name="p_subprocess">Nome do subprocesso, método ou rotina.</param>
             <param name="p_percentage">Percentual de execução do processo.</param>
             <param name="p_message">Mensagem atual do processo.</param>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventClass.FireEvent(System.UInt32)">
             <summary>
             Dispara o evento de Progresso.
             </summary>
             <param name="p_counter">Número de elementos processados até o momento.</param>
            </member>
        <member name="M:Spartacus.Utils.ProgressEventClass.FireEvent(System.UInt32,System.UInt32)">
             <summary>
             Dispara o evento de Progresso.
             </summary>
             <param name="p_counter">Número de elementos processados até o momento.</param>
             <param name="p_total">Número total de elementos a serem processados.</param>
            </member>
        <member name="T:Spartacus.Utils.WarningEventArgs">
             <summary>
             Classe WarningEventArgs.
             Representa os argumentos do evento de Aviso.
             Herda da classe <see cref="T:System.EventArgs" />.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.WarningEventArgs.v_process">
             <summary>
             Nome do processo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.WarningEventArgs.v_subprocess">
             <summary>
             Nome do subprocesso, método ou rotina.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.WarningEventArgs.v_message">
             <summary>
             Mensagem atual do processo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.WarningEventArgs.v_stacktrace">
             <summary>
             Stacktrace atual do processo (se aplicável).
             </summary>
            </member>
        <member name="F:Spartacus.Utils.WarningEventArgs.v_verbose">
             <summary>
             Informa se o processo deve mostrar suas mensagens ao usuário ou não.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.WarningEventArgs.v_index">
             <summary>
             Índice da instância.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.WarningEventArgs.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.WarningEventArgs" />.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.WarningEventArgs.#ctor(System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.WarningEventArgs" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
            </member>
        <member name="M:Spartacus.Utils.WarningEventArgs.#ctor(System.Boolean,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.WarningEventArgs" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
             <param name="p_index">Índice da instância.</param>
            </member>
        <member name="T:Spartacus.Utils.WarningEventClass">
             <summary>
             Classe WarningEventClass.
             Representa um evento de Aviso.
             </summary>
            </member>
        <member name="T:Spartacus.Utils.WarningEventClass.WarningEventHandler">
             <summary>
             Delegate para gerenciar o evento de Aviso.
             </summary>
            </member>
        <member name="E:Spartacus.Utils.WarningEventClass.WarningEvent">
             <summary>
             Evento de Aviso propriamente dito.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.WarningEventClass.WarningEventArgs">
             <summary>
             Argumentos do evento de Aviso.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.WarningEventClass.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.WarningEventClass" />.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.WarningEventClass.#ctor(System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.WarningEventClass" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
            </member>
        <member name="M:Spartacus.Utils.WarningEventClass.#ctor(System.Boolean,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.WarningEventClass" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
             <param name="p_index">Índice da instância.</param>
            </member>
        <member name="M:Spartacus.Utils.WarningEventClass.FireEvent(System.String)">
             <summary>
             Dispara o evento de Aviso.
             </summary>
             <param name="p_message">Mensagem atual do processo.</param>
            </member>
        <member name="M:Spartacus.Utils.WarningEventClass.FireEvent(System.String,System.String)">
             <summary>
             Dispara o evento de Aviso.
             </summary>
             <param name="p_message">Mensagem atual do processo.</param>
             <param name="p_stacktrace">Stacktrace atual do processo.</param>
            </member>
        <member name="M:Spartacus.Utils.WarningEventClass.FireEvent(System.String,System.String,System.String)">
             <summary>
             Dispara o evento de Aviso.
             </summary>
             <param name="p_process">Nome do processo.</param>
             <param name="p_subprocess">Nome do subprocesso, método ou rotina.</param>
             <param name="p_message">Mensagem atual do processo.</param>
            </member>
        <member name="M:Spartacus.Utils.WarningEventClass.FireEvent(System.String,System.String,System.String,System.String)">
             <summary>
             Dispara o evento de Aviso.
             </summary>
             <param name="p_process">Nome do processo.</param>
             <param name="p_subprocess">Nome do subprocesso, método ou rotina.</param>
             <param name="p_message">Mensagem atual do processo.</param>
             <param name="p_stacktrace">Stacktrace atual do processo.</param>
            </member>
        <member name="T:Spartacus.Database.Command">
             <summary>
             Classe Command.
             Representa um comando SQL que pode possuir parâmetros entre #.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Command.v_text">
             <summary>
             Código SQL a ser executado no banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Command.v_parameters">
             <summary>
             Lista de Parâmetros.
             Cada parâmetro da lista deve ter um nome diferente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Command.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Command" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Command.UpdateText">
             <summary>
             Atualiza o código SQL.
             Substitui os nomes de parâmetro com tag de início e fim #, com o valor de cada parâmetro já formatado.
             Essa função deve ser chamada antes de executar o Comando no banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Command.GetUpdatedText">
             <summary>
             Atualiza o código SQL, mas sem alterar o SQL original.
             Substitui os nomes de parâmetro com tag de início e fim #, com o valor de cada parâmetro já formatado.
             </summary>
             <returns>Código SQL tratado, pronto para execução no banco de dados.</returns>
            </member>
        <member name="M:Spartacus.Database.Command.Clear">
             <summary>
             Apaga o texto e a lista de parâmetros da classe <see cref="T:Spartacus.Database.Command" />.
             Dessa forma, a instância pode ser reaproveitada com um código SQL diferente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Command.AddParameter(System.String,Spartacus.Database.Type)">
             <summary>
             Adiciona um Parâmetro à lista de Parâmetros.
             </summary>
             <param name="p_name">
             Nome do Parâmetro dentro do Comando SQL.
             </param>
             <param name="p_type">
             Tipo de dados do Parâmetro.
             </param>
            </member>
        <member name="M:Spartacus.Database.Command.AddParameter(System.String,Spartacus.Database.Type,System.String)">
             <summary>
             Adiciona um Parâmetro à lista de Parâmetros.
             </summary>
             <param name="p_name">
             Nome do Parâmetro dentro do Comando SQL.
             </param>
             <param name="p_type">
             Tipo de dados do Parâmetro.
             </param>
             <param name="p_datemask">
             Máscara de Data, usado se caso o parâmetro for do tipo DATE.
             </param>
            </member>
        <member name="M:Spartacus.Database.Command.RemoveUnwantedChars(System.String)">
             <summary>
             Remove de uma string todos os caracteres com acentuação ou proibidos para a inserção SQL.
             </summary>
             <returns>
             String livre de caracteres com acentuação ou proibidos para a inserção SQL.
             </returns>
             <param name="p_string">
             String a ser tratada.
             </param>
            </member>
        <member name="M:Spartacus.Database.Command.RemoveUnwantedCharsQuoted(System.String)">
             <summary>
             Remove de uma string todos os caracteres com acentuação ou proibidos para a inserção SQL.
             Utilizada pela função Execute, que executa inserts, updates e procedures.
             Apenas o caractere ' (39) é permitido.
             </summary>
             <returns>
             String livre de caracteres com acentuação ou proibidos para a inserção SQL (com exceção do caractere ' (39)).
             </returns>
             <param name="p_string">
             String a ser tratada.
             </param>
            </member>
        <member name="M:Spartacus.Database.Command.RemoveUnwantedCharsExecute(System.String)">
             <summary>
             Remove de uma string todos os caracteres com acentuação ou proibidos para a inserção SQL.
             Utilizada pela função Execute, que executa inserts, updates e procedures.
             Apenas o caractere ' (39) é permitido.
             </summary>
             <returns>
             String livre de caracteres com acentuação ou proibidos para a inserção SQL (com exceção do caractere ' (39)).
             </returns>
             <param name="p_string">
             String a ser tratada.
             </param>
            </member>
        <member name="M:Spartacus.Database.Command.RemoveUnwantedCharsInjection(System.String)">
             <summary>
             Remove de uma string todos os caracteres com acentuação ou proibidos para a inserção SQL.
             Proteje strings contra SQL Injection, ideal para ser usado em validações de login.
             </summary>
             <returns>
             String livre de caracteres com acentuação ou proibidos para a inserção SQL.
             </returns>
             <param name="p_string">
             String a ser tratada.
             </param>
            </member>
        <member name="M:Spartacus.Database.Command.SetValue(System.String,System.String)">
             <summary>
             Atribui o valor do Parâmetro de nome <paramref name="p_name" />.
             </summary>
             <param name="p_name">
             Nome do Parâmetro que vai ter o valor atribuído.
             </param>
             <param name="p_value">
             Valor a ser atribuído ao Parâmetro.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetValue(System.String,System.String,System.Boolean)">
             <summary>
             Atribui o valor do Parâmetro de nome <paramref name="p_name" />.
             </summary>
             <param name="p_name">
             Nome do Parâmetro que vai ter o valor atribuído.
             </param>
             <param name="p_value">
             Valor a ser atribuído ao Parâmetro.
             </param>
             <param name="p_execute_security">
             Se deve tratar caracteres estranhos no Execute ou não.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetValue(System.String,System.Boolean)">
             <summary>
             Atribui o valor do Parâmetro de nome <paramref name="p_name" />.
             </summary>
             <param name="p_name">
             Nome do Parâmetro que vai ter o valor atribuído.
             </param>
             <param name="p_null">
             Indica se o valor do Parâmetro deve ser NULL ou não.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetValue(System.Int32,System.String)">
             <summary>
             Atribui o valor do Parâmetro de índice <paramref name="p_index" />.
             </summary>
             <param name="p_index">
             Índice do Parâmetro que vai ter o valor atribuído.
             </param>
             <param name="p_value">
             Valor a ser atribuído ao Parâmetro.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetValue(System.Int32,System.String,System.Boolean)">
             <summary>
             Atribui o valor do Parâmetro de índice <paramref name="p_index" />.
             </summary>
             <param name="p_index">
             Índice do Parâmetro que vai ter o valor atribuído.
             </param>
             <param name="p_value">
             Valor a ser atribuído ao Parâmetro.
             </param>
             <param name="p_execute_security">
             Se deve tratar caracteres estranhos no Execute ou não.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetValue(System.Int32,System.Boolean)">
             <summary>
             Atribui o valor do Parâmetro de índice <paramref name="p_index" />.
             </summary>
             <param name="p_index">
             Índice do Parâmetro que vai ter o valor atribuído.
             </param>
             <param name="p_null">
             Indica se o valor do Parâmetro deve ser NULL ou não.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetDateMask(System.String,System.String)">
             <summary>
             Atribui uma máscara de data ao Parâmetro de nome <paramref name="p_name" />.
             </summary>
             <param name="p_name">
             Nome do Parâmetro.
             </param>
             <param name="p_datemask">
             Máscara específica de data.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetDateFormat(System.String,System.String)">
             <summary>
             Atribui um formato específico de data à máscara do Parâmetro de nome <paramref name="p_name" />.
             </summary>
             <param name="p_name">
             Nome do Parâmetro.
             </param>
             <param name="p_dateformat">
             Formato específico de data.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetLocale(System.String,Spartacus.Database.Locale)">
             <summary>
             Atribui uma localização, ou seja, uma representação de número real, ao Parâmetro de nome <paramref name="p_name" />.
             </summary>
             <param name="p_name">
             Nome do Parâmetro.
             </param>
             <param name="p_locale">
             Localização, representação de número real, AMERICAN ou EUROPEAN.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetDescription(System.String,System.String)">
             <summary>
             Atribui uma descrição ao parâmetro de nome <paramref name="p_name" />.
             </summary>
             <param name="p_name">
             Nome do Parâmetro.
             </param>
             <param name="p_description">
             Descrição do Parâmetro.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.GetValue(System.String)">
             <summary>
             Retorna o valor do Parâmetro de nome <paramref name="p_name" />.
             </summary>
             <returns>
             Valor do Parâmetro.
             </returns>
             <param name="p_name">
             Nome do Parâmetro.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.SetLookup(System.String,System.String)">
             <summary>
             Atribui uma string SQL ao parâmetro de nome <paramref name="p_name" />.
             </summary>
             <param name="p_name">
             Nome do Parâmetro.
             </param>
             <param name="p_lookup">
             Lookup do Parâmetro.
             </param>
             <exception cref="T:Spartacus.Database.Exception">Exceção acontece quando o parâmetro não existir.</exception>
            </member>
        <member name="M:Spartacus.Database.Command.Exists(System.String)">
             <summary>
             Verifica se um determinado Parâmetro existe na lista de Parâmetros.
             </summary>
             <param name="p_name">Nome do Parâmetro.</param>
            </member>
        <member name="T:Spartacus.Database.Exception">
             <summary>
             Classe Spartacus.Database.Exception.
             Herda da classe <see cref="T:System.Exception" />.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Exception.v_message">
             <summary>
             Mensagem de Exceção.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Exception.#ctor">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Exception.#ctor(System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Database.Exception.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Database.Exception.#ctor(System.String,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Database.Exception.#ctor(System.String,System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Database.Exception.#ctor(System.String,System.Exception,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="T:Spartacus.Database.Generic">
             <summary>
             Classe abstrata Spartacus.Database.Generic.
             Armazena informações de conexão que são genéricas a qualquer SGBD.
             Provê polimorfismo, por ser uma classe abstrata.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_host">
             <summary>
             Hostname ou IP onde o banco de dados está localizado.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_port">
             <summary>
             Porta TCP para conectar-se ao SGBG.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_service">
             <summary>
             Nome do serviço que representa o banco ao qual desejamos nos conectar.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_user">
             <summary>
             Usuário ou schema para se conectar ao banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_password">
             <summary>
             A senha do usuário ou schema.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_connectionstring">
             <summary>
             String de conexão para acessar o banco.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_timeout">
             <summary>
             Timeout de execução de comandos, em segundos.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_execute_security">
             <summary>
             Se deve tratar caracteres inseguros no Execute ou não.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_default_string">
             <summary>
             Tipo de dados padrão para string.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Generic.v_blocksize">
             <summary>
             Tamanho do bloco para transferências de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Generic.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Generic" />.
             Armazena informações de conexão que são genéricas a qualquer SGBD.
             </summary>
             <param name="p_host">
             Hostname ou IP onde o banco de dados está localizado.
             </param>
             <param name="p_port">
             Porta TCP para conectar-se ao SGBG.
             </param>
             <param name="p_service">
             Nome do serviço que representa o banco ao qual desejamos nos conectar.
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.#ctor(System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Generic" />.
             Armazena informações de conexão que são genéricas a qualquer SGBD.
             </summary>
             <param name="p_dsn">
             DSN (Data Source Name).
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Generic" />.
             Armazena informações de conexão que são genéricas a qualquer SGBD.
             </summary>
             <param name="p_file">
             Arquivo do banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Generic" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Generic.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Generic.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Generic.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">
             Evento de progresso da execução da consulta.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Generic.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Generic.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.Execute(System.String)">
             <summary>
             Executa uma instrução SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Generic.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Generic.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Generic.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_query">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_query">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_query">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.SetTimeout(System.Int32)">
             <summary>
             Configura CommandTimeout de todas as conexões feitas com a instância atual.
             </summary>
             <param name="p_timeout">Timeout em segundos.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.SetExecuteSecurity(System.Boolean)">
             <summary>
             Configura Execute Security de todas as conexões feitas com a instância atual.
             </summary>
             <param name="p_execute_security">Se deve tratar caracteres inseguros no Execute ou não.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.SetDefaultString(System.String)">
             <summary>
             Configura o tipo de dados padrão para string.
             </summary>
             <param name="p_default_string">Tipo de dados padrão para string.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromFile(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino precisa existir.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_columns">Lista de colunas.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromFile(System.String,System.String,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino será criada.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromFile(System.String,System.String,System.String,System.Boolean,System.Text.Encoding,System.String,System.String,Spartacus.Database.Command,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino precisa existir.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_columns">Lista de colunas.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromFile(System.String,System.String,System.String,System.Boolean,System.Text.Encoding,System.String,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino será criada.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromCSV(System.String,System.String,System.String,System.Boolean,System.Text.Encoding,System.String,System.String,Spartacus.Database.Command,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino precisa existir.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_columns">Lista de colunas.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromCSV(System.String,System.String,System.String,System.Boolean,System.Text.Encoding,System.String,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino será criada.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromXLSX(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino precisa existir.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_columns">Lista de colunas.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromXLSX(System.String,System.String,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino será criada.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromDBF(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino precisa existir.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_columns">Lista de colunas.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferFromDBF(System.String,System.String,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados de um arquivo para o banco de dados atual.
             Conexão com o banco de dados atual precisa estar aberta. Tabela de destino será criada.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_filename">Nome do arquivo.</param>
             <param name="p_table">Tabela de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferToFile(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferToFile(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Generic.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Database.Odbc">
             <summary>
             Classe Spartacus.Database.Odbc.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza a implementação ODBC (Open Database Connectivity) para acessar qualquer SGBD.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Odbc.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Odbc.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Odbc.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Odbc.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Odbc.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Odbc" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Odbc.#ctor(System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Odbc" />.
             </summary>
             <param name="p_dsn">
             DSN (Data Source Name).
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
            </member>
        <member name="M:Spartacus.Database.Odbc.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Odbc.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Odbc.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Odbc.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Odbc.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Odbc.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Odbc.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Odbc.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Odbc.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Odbc.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Odbc.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Odbc.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Odbc.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Odbc.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Odbc.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Odbc.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Database.Type">
             <summary>
             Tipos de Dados.
             </summary>
            </member>
        <member name="T:Spartacus.Database.Locale">
             <summary>
             Representações de números reais:
             AMERICAN: separador decimal: . separador de milhar: ,
             EUROPEAN: separador decimal: , separador de milhar: .
             </summary>
            </member>
        <member name="T:Spartacus.Database.Parameter">
             <summary>
             Classe Parameter.
             Representa um parâmetro da classe <see cref="T:Spartacus.Database.Command" />.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Parameter.v_name">
             <summary>
             Nome do Parâmetro dentro do Comando SQL.
             Deve ser único dentro de uma mesma classe <see cref="T:Spartacus.Database.Command" />.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Parameter.v_type">
             <summary>
             Tipo de Dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Parameter.v_value">
             <summary>
             Valor atual do Parâmetro.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Parameter.v_datemask">
             <summary>
             Máscara de Data, usado se caso o Parâmetro for do tipo DATE.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Parameter.v_locale">
             <summary>
             Localização, representação de números reais.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Parameter.v_null">
             <summary>
             Indica se o Parâmetro possui valor NULL ou não.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Parameter.v_description">
             <summary>
             Descrição do parâmetro, a ser mostrado para o usuário.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Parameter.v_lookup">
             <summary>
             String SQL para buscar as opções do parâmetro.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Parameter.#ctor(System.String,Spartacus.Database.Type)">
             <summary>
             Inicializa uma instância da classe <see cref="T:Spartacus.Database.Parameter" /> .
             </summary>
             <param name="p_name">
             Nome do parâmetro dentro do Comando SQL.
             </param>
             <param name="p_type">
             Tipo de dados do parâmetro.
             </param>
            </member>
        <member name="M:Spartacus.Database.Parameter.#ctor(System.String,Spartacus.Database.Type,System.String)">
             <summary>
             Inicializa uma instância da classe <see cref="T:Spartacus.Database.Parameter" /> .
             </summary>
             <param name="p_name">
             Nome do parâmetro dentro do Comando SQL.
             </param>
             <param name="p_type">
             Tipo de dados do parâmetro.
             </param>
             <param name="p_datemask">
             Máscara de Data, usado se caso o parâmetro for do tipo DATE.
             </param>
            </member>
        <member name="M:Spartacus.Database.Parameter.Text">
             <summary>
             Escreve o valor do Parâmetro em formato de string, para ser usado dentro do Comando SQL.
             Monta a string de acordo com os atributos do Parâmetro.
             </summary>
            </member>
        <member name="T:Spartacus.Database.Firebird">
             <summary>
             Classe Spartacus.Database.Firebird.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o Firebird .NET Provider para acessar um SGBD Firebird.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Firebird.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Firebird.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Firebird.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Firebird.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Firebird.#ctor">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Firebird" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Firebird.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Firebird" />.
             </summary>
             <param name="p_source">
             IP do servidor Firebird.
             </param>
             <param name="p_port">
             Porta de conexão.
             </param>
             <param name="p_file">
             Caminho completo para o arquivo FDB ou GDB.
             </param>
             <param name="p_user">
             Usuário do Firebird.
             </param>
             <param name="p_password">
             Senha do Firebird.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.#ctor(System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Firebird" />.
             </summary>
             <param name="p_source">
             IP do servidor Firebird.
             </param>
             <param name="p_file">
             Caminho completo para o arquivo FDB ou GDB.
             </param>
             <param name="p_user">
             Usuário do Firebird.
             </param>
             <param name="p_password">
             Senha do Firebird.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Firebird.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Firebird.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Firebird.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Firebird.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Firebird.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Firebird.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Firebird.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Firebird.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Firebird.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Database.Mysql">
             <summary>
             Classe Spartacus.Database.Mysql.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o MySQL .NET Provider para acessar um SGBD MySQL.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Mysql.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Mysql.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Mysql.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Mysql.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mysql.#ctor">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Mysql" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mysql.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Mysql" />.
             </summary>
             <param name="p_server">
             IP do servidor MySQL.
             </param>
             <param name="p_port">
             Porta de conexão.
             </param>
             <param name="p_database">
             Nome da base de dados ou schema.
             </param>
             <param name="p_user">
             Usuário do MySQL.
             </param>
             <param name="p_password">
             Senha do MySQL.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.#ctor(System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Mysql" />.
             </summary>
             <param name="p_server">
             IP do servidor MySQL.
             </param>
             <param name="p_database">
             Nome da base de dados ou schema.
             </param>
             <param name="p_user">
             Usuário do MySQL.
             </param>
             <param name="p_password">
             Senha do MySQL.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mysql.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mysql.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Mysql.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Mysql.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Mysql.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Mysql.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mysql.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mysql.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Mysql.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Database.Oledb">
             <summary>
             Classe Spartacus.Database.Oledb.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza a implementação OLE DB para acessar qualquer SGBD.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Oledb.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Oledb.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Oledb.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Oledb.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oledb.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Oledb" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oledb.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Oledb" />.
             </summary>
             <param name="p_provider">
             SGBD que fornece o banco de dados.
             </param>
             <param name="p_host">
             Hostname ou IP onde o banco de dados está localizado.
             </param>
             <param name="p_port">
             Porta TCP para conectar-se ao SGBG.
             </param>
             <param name="p_service">
             Nome do serviço que representa o banco ao qual desejamos nos conectar.
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oledb.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oledb.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oledb.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Oledb.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Oledb.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oledb.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oledb.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Oledb.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Oledb.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oledb.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oledb.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oledb.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oledb.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oledb.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oledb.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Oledb.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Reporting.Exception">
             <summary>
             Classe Spartacus.Reporting.Exception.
             Herda da classe <see cref="T:System.Exception" />.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Exception.v_message">
             <summary>
             Mensagem de Exceção.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Exception.#ctor">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Exception.#ctor(System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Reporting.Exception.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Reporting.Exception.#ctor(System.String,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Reporting.Exception.#ctor(System.String,System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Reporting.Exception.#ctor(System.String,System.Exception,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="T:Spartacus.Reporting.FieldAlignment">
             <summary>
             Alinhamento do Campo.
             </summary>
            </member>
        <member name="T:Spartacus.Reporting.Field">
             <summary>
             Classe Field.
             Representa um campo de dados do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_title">
             <summary>
             Título do campo (aparece no cabeçalho de dados).
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_column">
             <summary>
             Coluna da tabela do relatório associada ao campo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_align">
             <summary>
             Alinhamento do campo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_fill">
             <summary>
             Percentual indicando quanto da largura da página o campo ocupa.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_type">
             <summary>
             Tipo de dados do campo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_groupedvalue">
             <summary>
             Se o campo é um valor totalizado dentro de um grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_row">
             <summary>
             Em qual linha dentro do detalhe o campo aparece.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_format">
             <summary>
             Formato de impressão do campo numérico.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_border">
             <summary>
             Borda do campo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_blank">
             <summary>
             Valor padrão caso o valor do campo seja vazio.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Field.v_font">
             <summary>
             Fonte específica para renderização do campo.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Field.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Field" />.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Field.#ctor(System.String,System.String,Spartacus.Reporting.FieldAlignment,System.Double,Spartacus.Database.Type)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Field" />.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Field.SetType(System.String)">
             <summary>
             Configura o tipo de dados do campo.
             </summary>
             <param name="p_text">Texto representando o tipo de dados.</param>
            </member>
        <member name="M:Spartacus.Reporting.Field.Format(System.String)">
             <summary>
             Formata o valor do campo.
             </summary>
             <param name="p_text">Texto representando o valor do campo.</param>
            </member>
        <member name="T:Spartacus.Reporting.Report">
             <summary>
             Classe Report.
             Representa um relatório em PDF.
             </summary>
             <summary>
             Classe Report.
             Representa um relatório em PDF.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_reportid">
             <summary>
             Código do Relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_database">
             <summary>
             Objeto para comunicação com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_cmd">
             <summary>
             Comando SQL que pode possuir parâmetros entre #.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_tabletemp">
             <summary>
             Tabela com os dados temporários do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_table">
             <summary>
             Tabela com os dados do relatório, após tratar tipos de colunas.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_rendertable">
             <summary>
             Tabela com os dados do relatório, ordenada de acordo com grupo de nível 0.
             Usada para renderização dos detalhes.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_settings">
             <summary>
             Configurações globais e de dados do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_header">
             <summary>
             Cabeçalho do relatório, mostrado em todas as páginas.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_footer">
             <summary>
             Rodapé do relatório, mostrado em todas as páginas.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_fields">
             <summary>
             Lista de campos do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_groups">
             <summary>
             Lista de grupos do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_calculate_groups">
             <summary>
             Se o gerador de relatórios deve calcular os valores agrupados.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_progress">
             <summary>
             Objeto que gerencia eventos de progresso do processamento.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_perc">
             <summary>
             Percentual de progresso do processamento.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_percstep">
             <summary>
             Faixa de percentual de progresso do processamento usada pelo relatório atual.
             Se não for pacote de relatórios, é igual a 100.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_lastperc">
             <summary>
             Valor do percentual a ser atualizado após renderizar a última página.
             Se não for pacote de relatórios, é igual a 100.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_inc">
             <summary>
             Incremento de percentual;
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_renderedrows">
             <summary>
             Número de linhas renderizadas até o momento.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_numrowsdetail">
             <summary>
             Número de linhas do detalhe.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_detailoddtemplate">
             <summary>
             Modelo de renderização do detalhe ímpar do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_detaileventemplate">
             <summary>
             Modelo de renderização do detalhe par do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_datafile">
             <summary>
             Arquivo de texto contendo a matriz de renderização.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Report.v_numrowsdataheader">
             <summary>
             Número de linhas no cabeçalho de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_filename">Nome do arquivo XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.String,Spartacus.Database.Generic)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_database">Objeto para conexão com o banco de dados.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.String,System.Data.DataTable)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_table">Tabela com os dados.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.String,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.String,Spartacus.Database.Generic,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_database">Objeto para conexão com o banco de dados.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.String,System.Data.DataTable,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_table">Tabela com os dados.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Int32,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_reportid">Código do Relatório.</param>
             <param name="p_filename">Nome do arquivo XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Int32,System.String,Spartacus.Database.Generic)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_reportid">Código do Relatório.</param>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_database">Objeto para conexão com o banco de dados.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Int32,System.String,System.Data.DataTable)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_reportid">Código do Relatório.</param>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_table">Tabela com os dados.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Int32,System.String,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_reportid">Código do Relatório.</param>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Int32,System.String,Spartacus.Database.Generic,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_reportid">Código do Relatório.</param>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_database">Objeto para conexão com o banco de dados.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Int32,System.String,System.Data.DataTable,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_reportid">Código do Relatório.</param>
             <param name="p_filename">Nome do arquivo XML.</param>
             <param name="p_table">Tabela com os dados.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.String,System.Boolean,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_content">Nome do arquivo XML ou conteúdo XML.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.String,Spartacus.Database.Generic,System.Boolean,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_content">Nome do arquivo XML ou conteúdo XML.</param>
             <param name="p_database">Objeto para conexão com o banco de dados.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.String,System.Data.DataTable,System.Boolean,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_content">Nome do arquivo XML ou conteúdo XML.</param>
             <param name="p_table">Tabela com os dados.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
             <param name="p_isfilename">Indica se <paramref name="p_content" /> representa nome de arquivo ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Int32,System.String,System.Boolean,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_reportid">Código do Relatório.</param>
             <param name="p_content">Nome do arquivo XML ou conteúdo XML.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
             <param name="p_isfilename">Indica se <paramref name="p_content" /> representa nome de arquivo ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Int32,System.String,Spartacus.Database.Generic,System.Boolean,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_reportid">Código do Relatório.</param>
             <param name="p_filename">Nome do arquivo XML ou conteúdo XML.</param>
             <param name="p_database">Objeto para conexão com o banco de dados.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
             <param name="p_isfilename">Indica se <paramref name="p_content" /> representa nome de arquivo ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Int32,System.String,System.Data.DataTable,System.Boolean,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_reportid">Código do Relatório.</param>
             <param name="p_content">Nome do arquivo XML ou conteúdo XML.</param>
             <param name="p_table">Tabela com os dados.</param>
             <param name="p_calculate_groups">Se o gerador de relatórios deve calcular os valores agrupados ou não.</param>
             <param name="p_isfilename">Indica se <paramref name="p_content" /> representa nome de arquivo ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Data.DataTable)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_table">Tabela com os dados.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.#ctor(System.Data.DataTable,System.String,System.Collections.Generic.List{Spartacus.Reporting.Field})">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Report" />.
             </summary>
             <param name="p_table">Tabela com os dados.</param>
             <param name="p_titlecolumn">Coluna de título.</param>
             <param name="p_fields">Campos a serem exibidos no relatório.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.Execute">
             <summary>
             Executa o relatório.
             Se o relatório não possui tabela pré-definida, utiliza o comando SQL do relatório para buscar os dados no banco.
             Em seguida gera tabelas auxiliares para todos os grupos.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Report.Save(System.String)">
             <summary>
             Salva como PDF.
             </summary>
             <param name="p_filename">Nome do arquivo PDF.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.SavePartial(PDFjet.NET.PDF)">
             <summary>
             Salva como PDF parcialmente.
             Usado para renderização de pacotes de arquivos PDF.
             </summary>
             <param name="p_pdf">Objeto PDF aberto.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.RenderDataHeader(System.Single,System.Single,PDFjet.NET.Font)">
             <summary>
             Renderiza cabeçalho de dados.
             </summary>
             <returns>Matriz representando o cabeçalho de dados.</returns>
             <param name="p_pageheight">Altura da página.</param>
             <param name="p_pagewidth">Largura da página.</param>
             <param name="p_dataheaderfont">Fonte do cabeçalho de dados.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.BuildTemplates(System.Single,System.Single,PDFjet.NET.Font,PDFjet.NET.Font,PDFjet.NET.Font)">
             <summary>
             Contrói modelos de renderização em memória.
             </summary>
             <param name="p_pageheight">Altura da página.</param>
             <param name="p_pagewidth">Largura da página.</param>
             <param name="p_datafieldfont">Fonte do campo de dados.</param>
             <param name="p_groupheaderfont">Fonte do cabeçalho de grupo.</param>
             <param name="p_groupfooterfont">Fonte do rodapé de grupo.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.RenderData(System.Single,System.Single,PDFjet.NET.Font,PDFjet.NET.Font,PDFjet.NET.Font)">
             <summary>
             Renderiza matriz de dados.
             </summary>
             <returns>Matriz de dados.</returns>
             <param name="p_pageheight">Altura da página.</param>
             <param name="p_pagewidth">Largura da página.</param>
             <param name="p_datafieldfont">Fonte do campo de dados.</param>
             <param name="p_groupheaderfont">Fonte do cabeçalho de grupo.</param>
             <param name="p_groupfooterfont">Fonte do rodapé de grupo.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.RenderGroup(System.Int32,System.String,System.String,System.Collections.Generic.List{System.Collections.Generic.List{PDFjet.NET.Cell}},System.Single,System.Single,PDFjet.NET.Font,PDFjet.NET.Font,PDFjet.NET.Font,System.IO.StreamWriter)">
             <summary>
             Renderiza um grupo.
             </summary>
             <param name="p_level">Nível do grupo atual.</param>
             <param name="p_parentgroupcolumn">Coluna do grupo pai.</param>
             <param name="p_parentgroupvalue">Valor do grupo pai.</param>
             <param name="p_data">Matriz de dados.</param>
             <param name="p_pageheight">Altura da página.</param>
             <param name="p_pagewidth">Largura da página.</param>
             <param name="p_datafieldfont">Fonte do campo de dados.</param>
             <param name="p_groupheaderfont">Fonte do cabeçalho de grupo.</param>
             <param name="p_groupfooterfont">Fonte do rodapé de grupo.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadXml(System.String)">
             <summary>
             Lê o arquivo XML que define o relatório.
             </summary>
             <param name="p_filename">Nome do arquivo XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadXml(System.String,System.Boolean)">
             <summary>
             Lê o arquivo XML que define o relatório.
             </summary>
             <param name="p_content">Nome do arquivo XML ou conteúdo XML.</param>
             <param name="p_isfilename">Indica se <paramref name="p_content" /> representa nome de arquivo ou não.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadConnection(System.Xml.XmlReader)">
             <summary>
             Lê informações sobre a conexão.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadSettings(System.Xml.XmlReader)">
             <summary>
             Lê informações sobre as configurações do relatório.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadFont(Spartacus.Reporting.Font,System.Xml.XmlReader)">
             <summary>
             Lê fonte.
             </summary>
             <param name="p_font">Objeto fonte, onde vai guardar as informações.</param>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadCommand(System.Xml.XmlReader)">
             <summary>
             Lê comando.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadParameter(System.Xml.XmlReader)">
             <summary>
             Lê parâmetro.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadHeader(System.Xml.XmlReader)">
             <summary>
             Lê cabeçalho do relatório.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadHeaderObject(System.Xml.XmlReader)">
             <summary>
             Lê objeto do cabeçalho do relatório.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadFooter(System.Xml.XmlReader)">
             <summary>
             Lê rodapé do relatório.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadFooterObject(System.Xml.XmlReader)">
             <summary>
             Lê objeto do rodapé do relatório.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadFields(System.Xml.XmlReader)">
             <summary>
             Lê campos do relatório.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadField(System.Xml.XmlReader)">
             <summary>
             Lê um único campo do relatório.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadGroups(System.Xml.XmlReader)">
             <summary>
             Lê grupos do relatório.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadGroup(System.Xml.XmlReader)">
             <summary>
             Lê um único grupo do relatório.
             </summary>
             <param name="p_reader">Objeto XML.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadGroupHeaderFields(System.Xml.XmlReader,Spartacus.Reporting.Group)">
             <summary>
             Lê campos de um cabeçalho de grupo.
             </summary>
             <param name="p_reader">Objeto XML.</param>
             <param name="p_group">Grupo do relatório.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadGroupHeaderField(System.Xml.XmlReader,Spartacus.Reporting.Group)">
             <summary>
             Lê um único campo de um cabeçalho de grupo.
             </summary>
             <param name="p_reader">Objeto XML.</param>
             <param name="p_group">Grupo do relatório.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadGroupFooterFields(System.Xml.XmlReader,Spartacus.Reporting.Group)">
             <summary>
             Lê campos de um rodapé de grupo.
             </summary>
             <param name="p_reader">Objeto XML.</param>
             <param name="p_group">Grupo do relatório.</param>
            </member>
        <member name="M:Spartacus.Reporting.Report.ReadGroupFooterField(System.Xml.XmlReader,Spartacus.Reporting.Group)">
             <summary>
             Lê um único campo de rodapé de grupo.
             </summary>
             <param name="p_reader">Objeto XML.</param>
             <param name="p_group">Grupo do relatório.</param>
            </member>
        <member name="T:Spartacus.Reporting.Group">
             <summary>
             Classe Group.
             Representa um agrupamento de dados do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_level">
             <summary>
             Nível do grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_column">
             <summary>
             Coluna associada ao grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_sort">
             <summary>
             Ordenação do grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_showheader">
             <summary>
             Indica se o cabeçalho do grupo deve ser mostrado ou não.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_showfooter">
             <summary>
             Indica se o rodapé do grupo deve ser mostrado ou não.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_headerfields">
             <summary>
             Lista de campos do cabeçalho.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_footerfields">
             <summary>
             Lista de campos do rodapé.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_table">
             <summary>
             Tabela com os dados do grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_numrowsheader">
             <summary>
             Número de linhas dentro do cabeçalho do grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_numrowsfooter">
             <summary>
             Número de linhas dentro do rodapé do grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_headertemplate">
             <summary>
             Modelo de renderização do cabeçalho do grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_footertemplate">
             <summary>
             Modelo de renderização do rodapé do grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_renderedrows">
             <summary>
             Número de linhas da tabela de dados do grupo que já foram renderizadas.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_showheadertitles">
             <summary>
             Indica se os títulos dos campos de cabeçalho do grupo devem ser mostrados no cabeçalho de dados ou não.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Group.v_showfootertitles">
             <summary>
             Indica se os títulos dos campos de rodapé do grupo devem ser mostrados no cabeçalho de dados ou não.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Group.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Group" />.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Group.Build(System.Data.DataTable,System.String)">
             <summary>
             Constrói dados do grupo.
             Percorre tabela de dados do relatório, filtrando e distinguindo os dados pela coluna do grupo.
             </summary>
             <param name="p_table">Tabela de dados do relatório.</param>
             <param name="p_parentgroupcolumn">Coluna do grupo pai.</param>
            </member>
        <member name="M:Spartacus.Reporting.Group.BuildCalculate(System.Data.DataTable,System.String)">
             <summary>
             Constrói dados do grupo.
             Percorre tabela de dados do relatório, filtrando e distinguindo os dados pela coluna do grupo.
             Também calcula os valores de cada grupo, totalizando-os.
             </summary>
             <param name="p_table">Tabela de dados do relatório.</param>
             <param name="p_parentgroupcolumn">Coluna do grupo pai.</param>
            </member>
        <member name="T:Spartacus.Reporting.Border">
             <summary>
             Classe Border.
             Armazena informações sobre quais bordas devem ser ativadas.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Border.v_top">
             <summary>
             Borda superior.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Border.v_bottom">
             <summary>
             Borda inferior.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Border.v_left">
             <summary>
             Borda esquerda.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Border.v_right">
             <summary>
             Borda direita.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Border.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Border" />.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Border.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Border" />.
             </summary>
             <param name="p_text">Texto representando quais bordas devem ser ativadas.</param>
            </member>
        <member name="T:Spartacus.Reporting.PageLayout">
             <summary>
             Layout da Página.
             </summary>
            </member>
        <member name="T:Spartacus.Reporting.PageMargin">
             <summary>
             Tipo de margem.
             </summary>
            </member>
        <member name="T:Spartacus.Reporting.Settings">
             <summary>
             Classe Settings.
             Armazena informações gerais sobre o relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_layout">
             <summary>
             Layout da Página.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_topmargin">
             <summary>
             Margem superior.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_bottommargin">
             <summary>
             Margem inferior.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_leftmargin">
             <summary>
             Margem esquerda.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_rightmargin">
             <summary>
             Margem direita.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_dataheaderborder">
             <summary>
             Borda do cabeçalho de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_datafieldborder">
             <summary>
             Borda do campo de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_groupheaderborder">
             <summary>
             Borda do cabeçalho de grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_groupfooterborder">
             <summary>
             Borda do rodapé de grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_reportheaderborder">
             <summary>
             Borda do cabeçalho do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_reportfooterborder">
             <summary>
             Borda do rodapé do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_reportheaderfont">
             <summary>
             Fonte do cabeçalho do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_reportfooterfont">
             <summary>
             Fonte do rodapé do relatório.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_dataheaderfont">
             <summary>
             Fonte do cabeçalho de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_datafieldfont">
             <summary>
             Fonte do campo de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_groupheaderfont">
             <summary>
             Fonte do cabeçalho de grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_groupfooterfont">
             <summary>
             Fonte do rodapé de grupo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_dataheadercolor">
             <summary>
             Cor de fundo do cabeçalho de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_datafieldevencolor">
             <summary>
             Cor de fundo do campo de dados em linhas pares.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_datafieldoddcolor">
             <summary>
             Cor de fundo do campo de dados em linhas ímpares.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_groupheaderevencolor">
             <summary>
             Cor de fundo do cabeçalho de grupo em linhas pares.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_groupheaderoddcolor">
             <summary>
             Cor de fundo do cabeçalho de grupo em linhas ímpares.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_groupfooterevencolor">
             <summary>
             Cor de fundo do rodapé de grupo em linhas pares.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_groupfooteroddcolor">
             <summary>
             Cor de fundo do rodapé de grupo em linhas ímpares.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Settings.v_showdataheader">
             <summary>
             Se o cabeçalho de dados deve ser mostrado ou não.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Settings.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Settings" />.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Settings.SetMargin(Spartacus.Reporting.PageMargin,System.String)">
             <summary>
             Configura margem.
             </summary>
             <param name="p_margin">Tipo de margem.</param>
             <param name="p_text">Valor da margem.</param>
            </member>
        <member name="M:Spartacus.Reporting.Settings.GetColor(System.String)">
             <summary>
             Converte a string representando a cor para a opção correta da PDFjet.
             </summary>
             <returns>Cor conforme a PDFjet.</returns>
             <param name="p_text">Texto representando a cor.</param>
            </member>
        <member name="T:Spartacus.Reporting.FontFamily">
             <summary>
             Família de fonte.
             </summary>
            </member>
        <member name="T:Spartacus.Reporting.Font">
             <summary>
             Classe Fonte.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Font.v_family">
             <summary>
             Família.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Font.v_bold">
             <summary>
             Negrito.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Font.v_italic">
             <summary>
             Itálico.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Font.v_size">
             <summary>
             Tamanho.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Font.#ctor">
             <summary>
             Fonte nativa.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Font.SetFamily(System.String)">
             <summary>
             Configura família da fonte.
             </summary>
             <param name="p_text">Texto representando a família.</param>
            </member>
        <member name="M:Spartacus.Reporting.Font.SetSize(System.String)">
             <summary>
             Configura o tamanho da fonte.
             </summary>
             <param name="p_text">Texto representando o tamanho da fonte.</param>
            </member>
        <member name="M:Spartacus.Reporting.Font.GetFont(PDFjet.NET.PDF)">
             <summary>
             Converte a fonte em uma opção específica da PDFjet.
             </summary>
             <returns>Fonte conforme PDFjet.</returns>
             <param name="p_pdf">Objeto PDF.</param>
            </member>
        <member name="T:Spartacus.Reporting.Block">
             <summary>
             Classe Block.
             Representa um bloco que pode conter qualquer informação.
             O cabeçalho do relatório e o rodapé do relatório são blocos.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Block.v_height">
             <summary>
             Altura do Bloco.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Block.v_objects">
             <summary>
             Lista de objetos contidos no bloco.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Block.v_border">
             <summary>
             Bordas do Bloco.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Block.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Block" />.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Block.SetHeight(System.String)">
             <summary>
             Configura a altura do bloco.
             </summary>
             <param name="p_text">Texto representando a altura.</param>
            </member>
        <member name="M:Spartacus.Reporting.Block.SetValues(System.Data.DataTable)">
             <summary>
             Configura os valores dos objetos do bloco.
             Esses valores vem de um DataTable.
             </summary>
             <param name="p_table">Tabela do relatório.</param>
            </member>
        <member name="M:Spartacus.Reporting.Block.SetPageNumber(System.Int32,System.Int32)">
             <summary>
             Configura número da página.
             </summary>
             <param name="p_current">Página atual.</param>
             <param name="p_total">Número total de páginas.</param>
            </member>
        <member name="M:Spartacus.Reporting.Block.Render(Spartacus.Reporting.Font,System.Double,System.Double,System.Double,PDFjet.NET.PDF,PDFjet.NET.Page)">
             <summary>
             Renderiza o Bloco em uma Página.
             </summary>
             <param name="p_font">Fonte.</param>
             <param name="p_posx">Posição X.</param>
             <param name="p_posy">Posição Y.</param>
             <param name="p_rightmargin">Margem direita.</param>
             <param name="p_pdf">Objeto PDF.</param>
             <param name="p_page">Página onde o Bloco será renderizado.</param>
            </member>
        <member name="M:Spartacus.Reporting.Block.RenderImage(Spartacus.Reporting.Object,System.Double,System.Double,System.Double,PDFjet.NET.PDF,PDFjet.NET.Page)">
             <summary>
             Renderiza uma imagem no Bloco.
             Essa imagem precisa vir de um arquivo em disco.
             </summary>
             <param name="p_object">Objeto a ser renderizado.</param>
             <param name="p_posx">Posição X.</param>
             <param name="p_posy">Posição Y.</param>
             <param name="p_rightmargin">Margem direita.</param>
             <param name="p_pdf">Objeto PDF.</param>
             <param name="p_page">Página onde o objeto será renderizado.</param>
            </member>
        <member name="M:Spartacus.Reporting.Block.RenderText(Spartacus.Reporting.Object,System.Double,System.Double,System.Double,Spartacus.Reporting.Font,PDFjet.NET.PDF,PDFjet.NET.Page)">
             <summary>
             Renderiza um rótulo de texto no Bloco.
             </summary>
             <param name="p_object">Objeto a ser renderizado.</param>
             <param name="p_posx">Posição X.</param>
             <param name="p_posy">Posição Y.</param>
             <param name="p_rightmargin">Margem direita.</param>
             <param name="p_font">Fonte.</param>
             <param name="p_pdf">Objeto PDF.</param>
             <param name="p_page">Página onde será renderizado.</param>
            </member>
        <member name="M:Spartacus.Reporting.Block.RenderPageNumber(Spartacus.Reporting.Object,System.Double,System.Double,System.Double,Spartacus.Reporting.Font,PDFjet.NET.PDF,PDFjet.NET.Page)">
             <summary>
             Renderiza um rótulo de número de página no Bloco.
             </summary>
             <param name="p_object">Objeto a ser renderizado.</param>
             <param name="p_posx">Posição X.</param>
             <param name="p_posy">Posição Y.</param>
             <param name="p_rightmargin">Margem direita.</param>
             <param name="p_font">Fonte.</param>
             <param name="p_pdf">Objeto PDF.</param>
             <param name="p_page">Página onde será renderizado.</param>
            </member>
        <member name="T:Spartacus.Reporting.ObjectType">
             <summary>
             Tipo do Objeto.
             </summary>
            </member>
        <member name="T:Spartacus.Reporting.Object">
             <summary>
             Classe Object.
             Representa um objeto que pode ser renderizado dentro de um <see cref="T:Spartacus.Reporting.Block" />.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Object.v_type">
             <summary>
             Tipo do objeto.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Object.v_column">
             <summary>
             Coluna associada ao Objeto.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Object.v_value">
             <summary>
             Valor do Objeto.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Object.v_posx">
             <summary>
             Posição X onde o Objeto será renderizado.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Object.v_posy">
             <summary>
             Posição Y onde o Objeto será renderizado.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Object.v_align">
             <summary>
             Alinhamento do Objeto dentro do Bloco.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Object.v_pdfobject">
             <summary>
             Objeto PDF nativo já configurado dentro do Bloco.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Object.v_font">
             <summary>
             Fonte específica para renderização do objeto.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Object.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Object" />.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Object.SetPosX(System.String)">
             <summary>
             Configura a posição X do Objeto.
             </summary>
             <param name="p_text">Texto representando a posição.</param>
            </member>
        <member name="M:Spartacus.Reporting.Object.SetPosY(System.String)">
             <summary>
             Configura a posição Y do Objeto.
             </summary>
             <param name="p_text">Texto representando a posição.</param>
            </member>
        <member name="T:Spartacus.Database.Sqlite">
             <summary>
             Classe Spartacus.Database.Sqlite.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o Mono.Data.Sqlite para acessar um SGBD Sqlite.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Sqlite.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Sqlite.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Sqlite.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Sqlite.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlite.#ctor">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Sqlite" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlite.#ctor(System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Sqlite" />.
             </summary>
             <param name="p_file">
             Caminho para o arquivo DB.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Sqlite.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Sqlite.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Sqlite.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlite.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlite.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlite.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Database.Postgresql">
             <summary>
             Classe Spartacus.Database.Postgresql.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o Npgsql .NET Provider para acessar um SGBD PostgreSQL.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Postgresql.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Postgresql.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Postgresql.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Postgresql.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Postgresql.#ctor">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Postgresql" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Postgresql.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Postgresql" />.
             </summary>
             <param name="p_server">
             IP do servidor PostgreSQL.
             </param>
             <param name="p_port">
             Porta de conexão.
             </param>
             <param name="p_database">
             Nome da base de dados ou schema.
             </param>
             <param name="p_user">
             Usuário do PostgreSQL.
             </param>
             <param name="p_password">
             Senha do PostgreSQL.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.#ctor(System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Postgresql" />.
             </summary>
             <param name="p_server">
             IP do servidor PostgreSQL.
             </param>
             <param name="p_database">
             Nome da base de dados ou schema.
             </param>
             <param name="p_user">
             Usuário do PostgreSQL.
             </param>
             <param name="p_password">
             Senha do PostgreSQL.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Postgresql.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Postgresql.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Postgresql.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Postgresql.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Postgresql.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Postgresql.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="F:Spartacus.Utils.FileArray.v_files">
             <summary>
             Lista de arquivos e/ou diretórios contidos no FileArray.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.FileArray.#ctor(System.Collections.Generic.List{System.String},Spartacus.Utils.FileType)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.FileArray" />.
             </summary>
             <param name="p_filenames">Lista de nomes de arquivos ou diretórios.</param>
             <param name="p_filetype">Tipo dos nomes, se são arquivos ou diretórios.</param>
            </member>
        <member name="M:Spartacus.Utils.FileArray.#ctor(System.String,Spartacus.Utils.FileType)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.FileArray" />.
             </summary>
             <param name="p_filenames">String contendo nomes de arquivos ou diretórios, separados por ponto-e-vírgula.</param>
             <param name="p_filetype">Tipo dos nomes, se são arquivos ou diretórios.</param>
            </member>
        <member name="M:Spartacus.Utils.FileArray.#ctor(System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.FileArray" />.
             </summary>
             <param name="p_directorynames">Lista de nomes de diretórios.</param>
             <param name="p_filter">Filtro de extensão de arquivos.</param>
            </member>
        <member name="M:Spartacus.Utils.FileArray.#ctor(System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.FileArray" />.
             </summary>
             <param name="p_directorynames">String contendo nomes de diretórios separados por ponto-e-vírgula.</param>
             <param name="p_filter">Filtro de extensão de arquivos.</param>
            </member>
        <member name="M:Spartacus.Utils.FileArray.#ctor(System.Collections.Generic.List{System.String},System.String,System.IO.SearchOption)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.FileArray" />.
             </summary>
             <param name="p_directorynames">Lista de nomes de diretórios.</param>
             <param name="p_filter">Filtro de extensão de arquivos.</param>
             <param name="p_searchoption">Opção de busca no diretório.</param>
            </member>
        <member name="M:Spartacus.Utils.FileArray.#ctor(System.String,System.String,System.IO.SearchOption)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.FileArray" />.
             </summary>
             <param name="p_directorynames">String contendo nomes de diretórios separados por ponto-e-vírgula.</param>
             <param name="p_filter">Filtro de extensão de arquivos.</param>
             <param name="p_searchoption">Opção de busca no diretório.</param>
            </member>
        <member name="M:Spartacus.Utils.FileArray.FilterList(System.String,System.String,System.IO.SearchOption)">
             <summary>
             Lista, dentro de um diretório, todos os arquivos cujo nome corresponde ao filtro.
             O filtro é uma string que pode conter vários filtros separados por '|'.
             </summary>
             <returns>Lista com o nome completo de todos os arquivos que correspondem ao filtro.</returns>
             <param name="p_directoryname">Nome do diretório.</param>
             <param name="p_filter">String que pode conter vários filtros separados por '|'.</param>
             <param name="p_searchoption">Opção de busca.</param>
            </member>
        <member name="T:Spartacus.Utils.ErrorEventArgs">
             <summary>
             Classe ErrorEventArgs.
             Representa os argumentos do evento de Erro.
             Herda da classe <see cref="T:System.EventArgs" />.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ErrorEventArgs.v_process">
             <summary>
             Nome do processo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ErrorEventArgs.v_subprocess">
             <summary>
             Nome do subprocesso, método ou rotina.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ErrorEventArgs.v_message">
             <summary>
             Mensagem atual do processo.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ErrorEventArgs.v_stacktrace">
             <summary>
             Stacktrace atual do processo (se aplicável).
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ErrorEventArgs.v_verbose">
             <summary>
             Informa se o processo deve mostrar suas mensagens ao usuário ou não.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ErrorEventArgs.v_index">
             <summary>
             Índice da instância.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventArgs.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ErrorEventArgs" />.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventArgs.#ctor(System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ErrorEventArgs" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventArgs.#ctor(System.Boolean,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ErrorEventArgs" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
             <param name="p_index">Índice da instância.</param>
            </member>
        <member name="T:Spartacus.Utils.ErrorEventClass">
             <summary>
             Classe ErrorEventClass.
             Representa um evento de Erro.
             </summary>
            </member>
        <member name="T:Spartacus.Utils.ErrorEventClass.ErrorEventHandler">
             <summary>
             Delegate para gerenciar o evento de Erro.
             </summary>
            </member>
        <member name="E:Spartacus.Utils.ErrorEventClass.ErrorEvent">
             <summary>
             Evento de Erro propriamente dito.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.ErrorEventClass.ErrorEventArgs">
             <summary>
             Argumentos do evento de Erro.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventClass.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ErrorEventClass" />.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventClass.#ctor(System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ErrorEventClass" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventClass.#ctor(System.Boolean,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.ErrorEventClass" />.
             </summary>
             <param name="p_verbose">Se o processo deve mostrar suas mensagens ao usuário ou não.</param>
             <param name="p_index">Índice da instância.</param>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventClass.FireEvent(System.String)">
             <summary>
             Dispara o evento de Erro.
             </summary>
             <param name="p_message">Mensagem atual do processo.</param>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventClass.FireEvent(System.String,System.String)">
             <summary>
             Dispara o evento de Erro.
             </summary>
             <param name="p_message">Mensagem atual do processo.</param>
             <param name="p_stacktrace">Stacktrace atual do processo.</param>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventClass.FireEvent(System.String,System.String,System.String)">
             <summary>
             Dispara o evento de Erro.
             </summary>
             <param name="p_process">Nome do processo.</param>
             <param name="p_subprocess">Nome do subprocesso, método ou rotina.</param>
             <param name="p_message">Mensagem atual do processo.</param>
            </member>
        <member name="M:Spartacus.Utils.ErrorEventClass.FireEvent(System.String,System.String,System.String,System.String)">
             <summary>
             Dispara o evento de Erro.
             </summary>
             <param name="p_process">Nome do processo.</param>
             <param name="p_subprocess">Nome do subprocesso, método ou rotina.</param>
             <param name="p_message">Mensagem atual do processo.</param>
             <param name="p_stacktrace">Stacktrace atual do processo.</param>
            </member>
        <member name="T:Spartacus.Utils.Excel">
             <summary>
             Classe Excel.
             Manipulação de arquivos CSV e XLSX.
             </summary>
            </member>
        <member name="T:Spartacus.Utils.Excel.Column">
             <summary>
             Estrutura usada para armazenar as informações da coluna.
             </summary>
            </member>
        <member name="T:Spartacus.Utils.Excel.Sheet">
             <summary>
             Estrutura usada para armazenar as informações da planilha.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.Sheet.v_name">
             <summary>
             Noma da planilha atual, utilizando SejExcel.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.Sheet.v_data">
             <summary>
             Utilizado para criar planilhas Excel utilizando SejExcel.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.Sheet.v_currentrow">
             <summary>
             Linha atual da planilha atual, utilizando SejExcel.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.Sheet.v_fixedrows">
             <summary>
             Número de linhas fixas no template.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.Sheet.v_mapping">
             <summary>
             Dicionário usado para fazer mapeamentos de colunas de uma DataTable para o modelo em XLSX.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.Excel.Sheet.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Excel.Sheet" />.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.v_set">
             <summary>
             Conjunto de tabelas do arquivo Excel.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.v_sheets">
             <summary>
             Lista de informações sobre planilhas usadas pela SejExcel para salvar arquivos XLSX.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.v_progress">
             <summary>
             Objeto que gerencia eventos de progresso do processamento.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.v_perc">
             <summary>
             Percentual global de progresso do processamento.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.v_inc">
             <summary>
             Incremento global de percentual do processamento.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.v_currentrow">
             <summary>
             Linha atual no processamento.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Excel.v_numtotalrows">
             <summary>
             Número total de linhas do processamento.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.Excel.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Excel" />.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.Excel.Clear">
             <summary>
             Limpa os dados de todas as tabelas e deleta todas as tabelas.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.Excel.Import(System.String)">
             <summary>
             Importa todas as planilhas de um arquivo Excel para várias <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" />.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX, CSV ou DBF a ser importado.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir ler o arquivo de origem, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.Import(System.String,System.Char,System.Boolean,System.Text.Encoding)">
             <summary>
             Importa todas as planilhas de um arquivo Excel para várias <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" />.
             </summary>
             <param name="p_filename">Nome do arquivo CSV a ser importado.</param>
             <param name="p_separator">Separador de campos do arquivo CSV.</param>
             <param name="p_header">Se deve considerar a primeira linha como cabeçalho ou não.</param>
             <param name="p_encoding">Codificação para leitura do arquivo CSV.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir ler o arquivo de origem, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.Import(System.String,System.Char,System.Char,System.Boolean,System.Text.Encoding)">
             <summary>
             Importa todas as planilhas de um arquivo Excel para várias <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" />.
             </summary>
             <param name="p_filename">Nome do arquivo CSV a ser importado.</param>
             <param name="p_separator">Separador de campos do arquivo CSV.</param>
             <param name="p_delimitator">Delimitador de campos do arquivo CSV.</param>
             <param name="p_header">Se deve considerar a primeira linha como cabeçalho ou não.</param>
             <param name="p_encoding">Codificação para leitura do arquivo CSV.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir ler o arquivo de origem, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.Import(System.Collections.Generic.List{System.String})">
             <summary>
             Importa uma lista de arquivos Excel.
             A lista pode conter arquivos XLSX, CSV ou DBF, e pode ser misturado.
             </summary>
             <param name="p_filelist">Lista de nomes de arquivos.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ImportCSV(System.String,System.Char,System.Boolean,System.Text.Encoding)">
             <summary>
             Importa um arquivo CSV para um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_filename">Nome do arquivo CSV.</param>
             <param name="p_separator">Separador de campos do arquivo CSV.</param>
             <param name="p_header">Se deve considerar a primeira linha como cabeçalho ou não.</param>
             <param name="p_encoding">Codificação para leitura do arquivo CSV.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ImportCSV(System.String,System.Char,System.Char,System.Boolean,System.Text.Encoding)">
             <summary>
             Importa um arquivo CSV para um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_filename">Nome do arquivo CSV.</param>
             <param name="p_separator">Separador de campos do arquivo CSV.</param>
             <param name="p_delimitator">Delimitador de campos do arquivo CSV.</param>
             <param name="p_header">Se deve considerar a primeira linha como cabeçalho ou não.</param>
             <param name="p_encoding">Codificação para leitura do arquivo CSV.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ImportDBF(System.String)">
             <summary>
             Importa um arquivo DBF para um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_filename">Nome do arquivo DBF.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ImportXLSX(System.String)">
             <summary>
             Importa todas as planilhas de um arquivo XLSX para várias <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" />.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.SheetToDataTable(Spartacus.ThirdParty.SejExcel.OoXml,Spartacus.ThirdParty.SejExcel.gSheet)">
             <summary>
             Converte uma planilha para uma <see cref="T:System.Data.DataTable" />.
             </summary>
             <returns><see cref="T:System.Data.DataTable" /> com os dados contidos na planilha.</returns>
             <param name="p_package">Objeto de manipulação de arquivos Excel (XLSX).</param>
             <param name="p_sheet">Objeto de manipulação de planilhas Excel (XLSX).</param>
             <remarks>
             A primeira linha é considerada como nomes de colunas, e todas as células dessa linha devem estar preenchidas.
             Não pode haver linhas em branco acima, ou colunas em branco à esquerda dos dados a serem convertidos.
             </remarks>
            </member>
        <member name="M:Spartacus.Utils.Excel.AddColumn(System.Collections.Generic.List{Spartacus.Utils.Excel.Column},System.Data.DataTable,System.Int32,System.String,System.String)">
             <summary>
             Adiciona uma coluna à lista de colunas, e à <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_columnlist">Lista de colunas.</param>
             <param name="p_table"><see cref="T:System.Data.DataTable" />.</param>
             <param name="p_columnindex">Índice da coluna.</param>
             <param name="p_columncontrol">Controle da coluna, que é o endereço da célula no Excel.</param>
             <param name="p_columnname">Nome da coluna.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ColumnIndex(System.Collections.Generic.List{Spartacus.Utils.Excel.Column},System.String)">
             <summary>
             Pega o índice da coluna baseado no seu controle.
             </summary>
             <returns>Índice da coluna.</returns>
             <param name="p_columnlist">Lista de colunas.</param>
             <param name="p_columncontrol">Controle da coluna, que é o endereço da célula no Excel..</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.Export(System.String)">
             <summary>
             Exporta todas as <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" /> para um arquivo Excel.
             Após a alimentação dos dados, calcula todas as possíveis fórmulas dentro do arquivo.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX ou CSV a ser exportado.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir escrever no arquivo de destino, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.Export(System.String,System.Boolean)">
             <summary>
             Exporta todas as <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" /> para um arquivo Excel.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX ou CSV a ser exportado.</param>
             <param name="p_calculateformulas">Se deve ou não calcular fórmulas dentro do arquivo.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir escrever no arquivo de destino, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.Export(System.String,System.Boolean,System.Boolean)">
             <summary>
             Exporta todas as <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" /> para um arquivo Excel.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX ou CSV a ser exportado.</param>
             <param name="p_freezeheader">Se deve congelar ou não a primeira linha da planilha.</param>
             <param name="p_showfilter">Se deve mostrar ou não o filtro na primeira linha da planilha.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir escrever no arquivo de destino, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.Export(System.String,System.String)">
             <summary>
             Exporta todas as <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" /> para um arquivo Excel.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX ou CSV a ser exportado.</param>
             <param name="p_templatename">Nome do arquivo XLSX a ser usado como template.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir escrever no arquivo de destino, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.Export(System.String,System.String,System.Boolean)">
             <summary>
             Exporta todas as <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" /> para um arquivo Excel.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX ou CSV a ser exportado.</param>
             <param name="p_templatename">Nome do arquivo XLSX a ser usado como template.</param>
             <param name="p_replacemarkup">Se deve substituir o markup do cabeçalho ou não.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir escrever no arquivo de destino, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.Export(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Exporta todas as <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" /> para um arquivo Excel.
             O markup do cabeçalho sempre é substituído.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX ou CSV a ser exportado.</param>
             <param name="p_templatenames">Nome do arquivo XLSX a ser usado como template.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir escrever no arquivo de destino, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.Export(System.String,System.Char,System.Text.Encoding)">
             <summary>
             Exporta todas as <see cref="T:System.Data.DataTable" /> dentro de um <see cref="T:System.Data.DataSet" /> para um arquivo Excel.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX ou CSV a ser exportado.</param>
             <param name="p_separator">Separador de campos do arquivo CSV.</param>
             <param name="p_encoding">Codificação de escrita do arquivo CSV.</param>
             <exception cref="T:Spartacus.Utils.Exception">Exceção acontece quando não conseguir escrever no arquivo de destino, ou quando ocorrer qualquer problema na SejExcel.</exception>
            </member>
        <member name="M:Spartacus.Utils.Excel.ExportCSV(System.String,System.Char,System.Text.Encoding)">
             <summary>
             Exporta a primeira <see cref="T:System.Data.DataTable" /> de um <see cref="T:System.Data.DataSet" /> para um arquivo CSV.
             </summary>
             <param name="p_filename">Nome do arquivo CSV.</param>
             <param name="p_separator">Separador de campos do arquivo CSV.</param>
             <param name="p_encoding">Codificação de escrita do arquivo CSV.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ExportXLSX(System.String,System.String)">
             <summary>
             Exporta todas as <see cref="T:System.Data.DataTable" /> de um <see cref="T:System.Data.DataSet" /> para um arquivo XLSX.
             Utiliza como modelo um arquivo XLSX passado como parâmetro.
             Calcula possíveis fórmulas no arquivo.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX a ser salvo.</param>
             <param name="p_templatename">Nome do arquivo XLSX a ser usado como template.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ExportXLSX(System.String,System.String,System.Boolean)">
             <summary>
             Exporta todas as <see cref="T:System.Data.DataTable" /> de um <see cref="T:System.Data.DataSet" /> para um arquivo XLSX.
             Utiliza como modelo um arquivo XLSX passado como parâmetro.
             </summary>
             <param name="p_filename">Nome do arquivo XLSX a ser salvo.</param>
             <param name="p_templatename">Nome do arquivo XLSX a ser usado como template.</param>
             <param name="p_calculateformulas">Se deve ou não calcular fórmulas no arquivo.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ExportDBF(System.String)">
             <summary>
             Exporta a primeira <see cref="T:System.Data.DataTable" /> de um <see cref="T:System.Data.DataSet" /> para um arquivo DBF.
             </summary>
             <param name="p_filename">Nome do arquivo DBF.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.FillSheetWithDataTable(Spartacus.ThirdParty.SejExcel.gSheet,System.Data.DataTable)">
             <summary>
             Preenche a planilha do template com os dados de uma <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sheet">Planilha do template.</param>
             <param name="p_table">Dados a serem preenchidos.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.OnDataRow(Spartacus.ThirdParty.SejExcel.gSheet)">
             <summary>
             Evento disparado quando uma nova linha é incluída.
             </summary>
             <param name="p_sheet">Planilha do template.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ReplaceMarkup(System.String)">
             <summary>
             Substitui valores de células conforme configuração do cabeçalho, que deve estar na célula A1 e seguir formato específico.
             </summary>
             <returns>Nome do arquivo XLSX com cabeçalho aplicado.</returns>
             <param name="p_templatename">Nome do arquivo XLSX usado como template.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.ReplaceMarkup(System.Collections.Generic.List{System.String})">
             <summary>
             Substitui valores de células conforme configuração do cabeçalho, que deve estar na célula A1 e seguir formato específico.
             Cada planilha a princípio está em um arquivo diferente, e o arquivo resultante contém todas as planilhas de todos os arquivos.
             </summary>
             <returns>Nome do arquivo XLSX com cabeçalho aplicado em todas as planilhas.</returns>
             <param name="p_templatenames">Nome dos arquivo XLSX usados como templates.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.CreateTemplate(System.Boolean,System.Boolean)">
             <summary>
             Baseado em um DataTable preenchido, cria um XLSX para ser usado como template.
             </summary>
             <returns>Nome do arquivo a ser usado como template.</returns>
             <param name="p_freezeheader">Se deve congelar ou não a primeira linha da planilha.</param>
             <param name="p_showfilter">Se deve mostrar ou não o filtro na primeira linha da planilha.</param>
            </member>
        <member name="M:Spartacus.Utils.Excel.CreatePivotTable(System.Data.DataTable,System.String,System.String)">
             <summary>
             Cria uma tabela dinâmica.
             </summary>
             <returns>Tabela dinâmica.</returns>
             <param name="p_table">Tabela original.</param>
             <param name="p_origcolumns">
               Nomes originais das colunas, separados por vírgula.
               Nomes de colunas de texto vem à esquerda, separadas dos nomes de colunas de valor por um ponto-e-vírgula.
             </param>
             <param name="p_fakecolumns">Nomes fantasia das colunas, separados por vírgula.</param>
            </member>
        <member name="T:Spartacus.ThirdParty.ZipStorer.Compression">
             <summary>
             Compression method enumeration
             </summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.Compression.Store">
             <summary>Uncompressed storage</summary> 
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.Compression.Deflate">
             <summary>Deflate compression method</summary>
            </member>
        <member name="T:Spartacus.ThirdParty.ZipStorer.ZipFileEntry">
             <summary>
             Represents an entry in Zip file directory
             </summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.Method">
             <summary>Compression method</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.FilenameInZip">
             <summary>Full path and filename as stored in Zip</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.FileSize">
             <summary>Original file size</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.CompressedSize">
             <summary>Compressed file size</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.HeaderOffset">
             <summary>Offset of header information inside Zip storage</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.FileOffset">
             <summary>Offset of file inside Zip storage</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.HeaderSize">
             <summary>Size of header information</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.Crc32">
             <summary>32-bit checksum of entire file</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.ModifyTime">
             <summary>Last modification time of file</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.Comment">
             <summary>User comment for file</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.EncodeUTF8">
             <summary>True if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.ZipFileEntry.ToString">
             <summary>Overriden method</summary>
             <returns>Filename in Zip</returns>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.EncodeUTF8">
             <summary>True if UTF8 encoding for filename and comments, false if default (CP 437)</summary>
            </member>
        <member name="F:Spartacus.ThirdParty.ZipStorer.ForceDeflating">
             <summary>Force deflate algotithm even if it inflates the stored file. Off by default.</summary>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.Create(System.String,System.String)">
             <summary>
             Method to create a new storage file
             </summary>
             <param name="_filename">Full path of Zip file to create</param>
             <param name="_comment">General comment for Zip file</param>
             <returns>A valid ZipStorer object</returns>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.Create(System.IO.Stream,System.String)">
             <summary>
             Method to create a new zip storage in a stream
             </summary>
             <param name="_stream"></param>
             <param name="_comment"></param>
             <returns>A valid ZipStorer object</returns>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.Open(System.String,System.IO.FileAccess)">
             <summary>
             Method to open an existing storage file
             </summary>
             <param name="_filename">Full path of Zip file to open</param>
             <param name="_access">File access mode as used in FileStream constructor</param>
             <returns>A valid ZipStorer object</returns>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.Open(System.IO.Stream,System.IO.FileAccess)">
             <summary>
             Method to open an existing storage from stream
             </summary>
             <param name="_stream">Already opened stream with zip contents</param>
             <param name="_access">File access mode for stream operations</param>
             <returns>A valid ZipStorer object</returns>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.AddFile(Spartacus.ThirdParty.ZipStorer.Compression,System.String,System.String,System.String)">
             <summary>
             Add full contents of a file into the Zip storage
             </summary>
             <param name="_method">Compression method</param>
             <param name="_pathname">Full path of file to add to Zip storage</param>
             <param name="_filenameInZip">Filename and path as desired in Zip directory</param>
             <param name="_comment">Comment for stored file</param>        
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.AddStream(Spartacus.ThirdParty.ZipStorer.Compression,System.String,System.IO.Stream,System.DateTime,System.String)">
             <summary>
             Add full contents of a stream into the Zip storage
             </summary>
             <param name="_method">Compression method</param>
             <param name="_filenameInZip">Filename and path as desired in Zip directory</param>
             <param name="_source">Stream object containing the data to store in Zip</param>
             <param name="_modTime">Modification time of the data to store</param>
             <param name="_comment">Comment for stored file</param>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.Close">
             <summary>
             Updates central directory (if pertinent) and close the Zip storage
             </summary>
             <remarks>This is a required step, unless automatic dispose is used</remarks>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.ReadCentralDir">
             <summary>
             Read all the file records in the central directory 
             </summary>
             <returns>List of all entries in directory</returns>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.ExtractFile(Spartacus.ThirdParty.ZipStorer.ZipFileEntry,System.String)">
             <summary>
             Copy the contents of a stored file into a physical file
             </summary>
             <param name="_zfe">Entry information of file to extract</param>
             <param name="_filename">Name of file to store uncompressed data</param>
             <returns>True if success, false if not.</returns>
             <remarks>Unique compression methods are Store and Deflate</remarks>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.ExtractFile(Spartacus.ThirdParty.ZipStorer.ZipFileEntry,System.IO.Stream)">
             <summary>
             Copy the contents of a stored file into an opened stream
             </summary>
             <param name="_zfe">Entry information of file to extract</param>
             <param name="_stream">Stream to store the uncompressed data</param>
             <returns>True if success, false if not.</returns>
             <remarks>Unique compression methods are Store and Deflate</remarks>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.RemoveEntries(Spartacus.ThirdParty.ZipStorer@,System.Collections.Generic.List{Spartacus.ThirdParty.ZipStorer.ZipFileEntry})">
             <summary>
             Removes one of many files in storage. It creates a new Zip file.
             </summary>
             <param name="_zip">Reference to the current Zip object</param>
             <param name="_zfes">List of Entries to remove from storage</param>
             <returns>True if success, false if not</returns>
             <remarks>This method only works for storage of type FileStream</remarks>
            </member>
        <member name="M:Spartacus.ThirdParty.ZipStorer.Dispose">
             <summary>
             Closes the Zip file stream
             </summary>
            </member>
        <member name="T:Spartacus.Reporting.Package">
             <summary>
             Classe Package.
             Pode conter um ou mais relatórios em PDF, e salvá-los em arquivos separados ou no mesmo arquivo.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Package.v_reports">
             <summary>
             Lista de Relatórios.
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Package.v_filenames">
             <summary>
             Lista de nomes de arquivos (opcional).
             </summary>
            </member>
        <member name="F:Spartacus.Reporting.Package.v_filename">
             <summary>
             Nome do arquivo PDF de saída (opcional).
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Package.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Package" />.
             </summary>
             <param name="p_filename">Nome do arquivo PDF de saída.</param>
            </member>
        <member name="M:Spartacus.Reporting.Package.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Reporting.Package" />.
             O arquivo PDF de saída é considerado opcionalmente como "output.pdf".
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Package.Add(Spartacus.Reporting.Report,System.String)">
             <summary>
             Adiciona um relatório associado a um nome de arquivo PDF de saída.
             </summary>
             <param name="p_report">Relatório.</param>
             <param name="p_filename">Nome do arquivo PDF de saída.</param>
            </member>
        <member name="M:Spartacus.Reporting.Package.Add(Spartacus.Reporting.Report)">
             <summary>
             Adiciona um relatório.
             </summary>
             <param name="p_report">Relatório.</param>
            </member>
        <member name="M:Spartacus.Reporting.Package.Execute">
             <summary>
             Processa todos os relatórios do pacote.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Package.SaveSplitted">
             <summary>
             Salva todos os relatórios em arquivos separados.
             É necessário que o atributo "v_filenames" tenha sido alimentado e possua o mesmo número de elementos.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Package.SaveSplitted(System.Collections.Generic.List{System.String})">
             <summary>
             Salva todos os relatórios em arquivos separados.
             </summary>
             <param name="p_filenames">Lista de nomes de arquivos, que deve possuir o mesmo número de elementos.</param>
            </member>
        <member name="M:Spartacus.Reporting.Package.SaveSplitted(System.Boolean)">
             <summary>
             Salva todos os relatórios em arquivos separados.
             É necessário que o atributo "v_filenames" tenha sido alimentado e possua o mesmo número de elementos.
             </summary>
             <param name="p_compress">Gerar arquivo ZIP com todos os arquivos PDF.</param>
            </member>
        <member name="M:Spartacus.Reporting.Package.SaveSplitted(System.Collections.Generic.List{System.String},System.Boolean)">
             <summary>
             Salva todos os relatórios em arquivos separados.
             </summary>
             <param name="p_filenames">Lista de nomes de arquivos, que deve possuir o mesmo número de elementos.</param>
             <param name="p_compress">Gerar arquivo ZIP com todos os arquivos PDF.</param>
            </member>
        <member name="M:Spartacus.Reporting.Package.SaveSplitted(System.Boolean,System.String)">
             <summary>
             Salva todos os relatórios em arquivos separados.
             É necessário que o atributo "v_filenames" tenha sido alimentado e possua o mesmo número de elementos.
             </summary>
             <param name="p_compress">Gerar arquivo ZIP com todos os arquivos PDF.</param>
             <param name="p_outfilename">Nome do arquivo ZIP de saída.</param>
            </member>
        <member name="M:Spartacus.Reporting.Package.SaveSplitted(System.Collections.Generic.List{System.String},System.Boolean,System.String)">
             <summary>
             Salva todos os relatórios em arquivos separados.
             </summary>
             <param name="p_filenames">Lista de nomes de arquivos, que deve possuir o mesmo número de elementos.</param>
             <param name="p_compress">Gerar arquivo ZIP com todos os arquivos PDF.</param>
             <param name="p_outfilename">Nome do arquivo ZIP de saída.</param>
            </member>
        <member name="M:Spartacus.Reporting.Package.SaveMerged">
             <summary>
             Salva todos os relatórios em um único PDF.
             </summary>
            </member>
        <member name="M:Spartacus.Reporting.Package.SaveMerged(System.String)">
             <summary>
             Salva todos os relatórios em um único PDF.
             </summary>
             <param name="p_filename">Nome do arquivo PDF a ser salvo.</param>
            </member>
        <member name="T:Spartacus.Database.Oracle">
             <summary>
             Classe Spartacus.Database.Oracle.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o Oracle .NET Provider para acessar um SGBD Oracle.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Oracle.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Oracle.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Oracle.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Oracle.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oracle.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Oracle" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oracle.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Oracle" />.
             </summary>
             <param name="p_host">
             Hostname ou IP onde o banco de dados está localizado.
             </param>
             <param name="p_port">
             Porta TCP para conectar-se ao SGBG.
             </param>
             <param name="p_service">
             Nome do serviço que representa o banco ao qual desejamos nos conectar.
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.#ctor(System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.Oracle" />.
             </summary>
             <param name="p_host">
             Hostname ou IP onde o banco de dados está localizado.
             </param>
             <param name="p_service">
             Nome do serviço que representa o banco ao qual desejamos nos conectar.
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oracle.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oracle.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Oracle.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Oracle.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Oracle.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Oracle.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oracle.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Oracle.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Oracle.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:PDFjet.NET.A3">
            
            
             *  Used to specify PDF page with size <strong>A3</strong>.
             *  For more information about the page size classes - A3, A4, A5, B5, Executive, Letter, Legal and Tabloid - see the Page class.
             *
             </member>
        <member name="T:PDFjet.NET.A4">
            
            
             *  Used to specify PDF page with size <strong>A4</strong>.
             *  For more information about the page size classes - A3, A4, A5, B5, Executive, Letter, Legal and Tabloid - see the Page class.
             *
             </member>
        <member name="T:PDFjet.NET.A5">
            
            
             *  Used to specify PDF page with size <strong>A5</strong>.
             *  For more information about the page size classes - A3, A4, A5, B5, Executive, Letter, Legal and Tabloid - see the Page class.
             *
             </member>
        <member name="T:PDFjet.NET.Align">
            
            
             *  Used to specify the text alignment in paragraphs.
             *  See the Paragraph class for more details.
             *
             *
             </member>
        <member name="T:PDFjet.NET.Annotation">
            
            
             *  Used to create PDF annotation objects.
             *
             *
             </member>
        <member name="M:PDFjet.NET.Annotation.#ctor(System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.String,System.String,System.String)">
            
            
                 *  This class is used to create annotation objects.
                 *
                 *  @param uri the URI string.
                 *  @param key the destination name.
                 *  @param x1 the x coordinate of the top left corner.
                 *  @param y1 the y coordinate of the top left corner.
                 *  @param x2 the x coordinate of the bottom right corner.
                 *  @param y2 the y coordinate of the bottom right corner.
                 *
                 </member>
        <member name="T:PDFjet.NET.B5">
            
            
             *  Used to specify PDF page with size <strong>B5</strong>.
             *  For more information about the page size classes - A3, A4, A5, B5, Executive, Letter, Legal and Tabloid - see the Page class.
             *
             </member>
        <member name="T:PDFjet.NET.BarCode">
            
            
             *  Used to create one dimentional barcodes - UPC, Code 39 and Code 128.
             *
             *  Please see Example_11.
             </member>
        <member name="M:PDFjet.NET.BarCode.#ctor(System.Int32,System.String)">
            
            
                 *  The constructor.
                 *
                 *  @param type the type of the barcode.
                 *  @param str the content string of the barcode.
                 </member>
        <member name="M:PDFjet.NET.BarCode.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position where this barcode will be drawn on the page.
                 *
                 *  @param x1 the x coordinate of the top left corner of the barcode.
                 *  @param y1 the y coordinate of the top left corner of the barcode.
                 </member>
        <member name="M:PDFjet.NET.BarCode.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position where this barcode will be drawn on the page.
                 *
                 *  @param x1 the x coordinate of the top left corner of the barcode.
                 *  @param y1 the y coordinate of the top left corner of the barcode.
                 </member>
        <member name="M:PDFjet.NET.BarCode.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location where this barcode will be drawn on the page.
                 *
                 *  @param x1 the x coordinate of the top left corner of the barcode.
                 *  @param y1 the y coordinate of the top left corner of the barcode.
                 </member>
        <member name="M:PDFjet.NET.BarCode.SetModuleLength(System.Double)">
            
            
                 *  Sets the module length of this barcode.
                 *  The default value is 0.75
                 *
                 *  @param moduleLength the specified module length.
                 </member>
        <member name="M:PDFjet.NET.BarCode.SetModuleLength(System.Single)">
            
            
                 *  Sets the module length of this barcode.
                 *  The default value is 0.75f
                 *
                 *  @param moduleLength the specified module length.
                 </member>
        <member name="M:PDFjet.NET.BarCode.SetBarHeightFactor(System.Double)">
            
            
                 *  Sets the bar height factor.
                 *  The height of the bars is the moduleLength * barHeightFactor
                 *  The default value is 50.0
                 *
                 *  @param barHeightFactor the specified bar height factor.
                 </member>
        <member name="M:PDFjet.NET.BarCode.SetBarHeightFactor(System.Single)">
            
            
                 *  Sets the bar height factor.
                 *  The height of the bars is the moduleLength * barHeightFactor
                 *  The default value is 50.0
                 *
                 *  @param barHeightFactor the specified bar height factor.
                 </member>
        <member name="M:PDFjet.NET.BarCode.SetDirection(System.Int32)">
            
            
                 *  Sets the drawing direction for this font.
                 *
                 *  @param direction the specified direction.
                 </member>
        <member name="M:PDFjet.NET.BarCode.SetFont(PDFjet.NET.Font)">
            
            
                 *  Sets the font to be used with this barcode.
                 *
                 *  @param font the specified font.
                 </member>
        <member name="M:PDFjet.NET.BarCode.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this barcode on the specified page.
                 *
                 *  @param page the scecified page.
                 </member>
        <member name="T:PDFjet.NET.BarCode2D">
            
            
             *  Used to create PDF417 2D barcodes.
             *
             *  Please see Example_12.
             </member>
        <member name="M:PDFjet.NET.BarCode2D.#ctor(System.String)">
            
            
                 *  Constructor for 2D barcodes.
                 *
                 *  @param str the specified string.
                 </member>
        <member name="M:PDFjet.NET.BarCode2D.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position of this barcode on the page.
                 *
                 *  @param x the x coordinate of the top left corner of the barcode.
                 *  @param y the y coordinate of the top left corner of the barcode.
                 </member>
        <member name="M:PDFjet.NET.BarCode2D.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position of this barcode on the page.
                 *
                 *  @param x the x coordinate of the top left corner of the barcode.
                 *  @param y the y coordinate of the top left corner of the barcode.
                 </member>
        <member name="M:PDFjet.NET.BarCode2D.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location of this barcode on the page.
                 *
                 *  @param x the x coordinate of the top left corner of the barcode.
                 *  @param y the y coordinate of the top left corner of the barcode.
                 </member>
        <member name="M:PDFjet.NET.BarCode2D.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this barcode on the specified page.
                 *
                 *  @param page the page to draw this barcode on.
                 </member>
        <member name="T:PDFjet.NET.Bidi">
            
            
             *  Provides simple BIDI processing for Hebrew.
             *  Please see Example_27.
             *  Note that the base level must be right to left.
             *  This means you can only use Hebrew text with a few Latin words and numbers embedded in it.
             *  Not the other way around.
             </member>
        <member name="M:PDFjet.NET.Bidi.ReorderVisually(System.String)">
            
            
                 *  Reorders the string so that Hebrew text flows from right to left while numbers and Latin text flow from left to right.
                 *
                 *  @param str the input string.
                 *  @return the processed string.
                 </member>
        <member name="T:PDFjet.NET.BitBuffer">
            
            
             * BitBuffer
             * @author Kazuhiko Arase
             </member>
        <member name="T:PDFjet.NET.Border">
            
            
             *  Used to control the visibility of cell borders.
             *  See the Cell class for more information.
             *
             </member>
        <member name="T:PDFjet.NET.Box">
            
            
             *  Used to create rectangular boxes on a page.
             *  Also used to for layout purposes. See the PlaceIn method in the Image and TextLine classes.
             *
             </member>
        <member name="M:PDFjet.NET.Box.#ctor">
            
            
                 *  The default constructor.
                 *
                 </member>
        <member name="M:PDFjet.NET.Box.#ctor(System.Double,System.Double,System.Double,System.Double)">
            
            
                 *  Creates a box object.
                 *
                 *  @param x the x coordinate of the top left corner of this box when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this box when drawn on the page.
                 *  @param w the width of this box.
                 *  @param h the height of this box.
                 </member>
        <member name="M:PDFjet.NET.Box.#ctor(System.Single,System.Single,System.Single,System.Single)">
            
            
                 *  Creates a box object.
                 *
                 *  @param x the x coordinate of the top left corner of this box when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this box when drawn on the page.
                 *  @param w the width of this box.
                 *  @param h the height of this box.
                 </member>
        <member name="M:PDFjet.NET.Box.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position of this box on the page.
                 *
                 *  @param x the x coordinate of the top left corner of this box when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this box when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Box.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position of this box on the page.
                 *
                 *  @param x the x coordinate of the top left corner of this box when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this box when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Box.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location of this box on the page.
                 *
                 *  @param x the x coordinate of the top left corner of this box when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this box when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Box.SetSize(System.Double,System.Double)">
            
            
                 *  Sets the size of this box.
                 *
                 *  @param w the width of this box.
                 *  @param h the height of this box.
                 </member>
        <member name="M:PDFjet.NET.Box.SetSize(System.Single,System.Single)">
            
            
                 *  Sets the size of this box.
                 *
                 *  @param w the width of this box.
                 *  @param h the height of this box.
                 </member>
        <member name="M:PDFjet.NET.Box.SetColor(System.Int32)">
            
            
                 *  Sets the color for this box.
                 *
                 *  @param color the color specified as an integer.
                 </member>
        <member name="M:PDFjet.NET.Box.SetLineWidth(System.Double)">
            
            
                 *  Sets the width of this line.
                 *
                 *  @param width the width.
                 </member>
        <member name="M:PDFjet.NET.Box.SetLineWidth(System.Single)">
            
            
                 *  Sets the width of this line.
                 *
                 *  @param width the width.
                 </member>
        <member name="M:PDFjet.NET.Box.SetURIAction(System.String)">
            
            
                 *  Sets the URI for the "click box" action.
                 *
                 *  @param uri the URI
                 </member>
        <member name="M:PDFjet.NET.Box.SetGoToAction(System.String)">
            
            
                 *  Sets the destination key for the action.
                 *
                 *  @param key the destination name.
                 </member>
        <member name="M:PDFjet.NET.Box.SetAltDescription(System.String)">
            
            
                 *  Sets the alternate description of this box.
                 *
                 *  @param altDescription the alternate description of the box.
                 *  @return this Box.
                 </member>
        <member name="M:PDFjet.NET.Box.SetActualText(System.String)">
            
            
                 *  Sets the actual text for this box.
                 *
                 *  @param actualText the actual text for the box.
                 *  @return this Box.
                 </member>
        <member name="M:PDFjet.NET.Box.SetPattern(System.String)">
            
            
                 *  The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
                 *  It is specified by a dash array and a dash phase.
                 *  The elements of the dash array are positive numbers that specify the lengths of
                 *  alternating dashes and gaps.
                 *  The dash phase specifies the distance into the dash pattern at which to start the dash.
                 *  The elements of both the dash array and the dash phase are expressed in user space units.
                 *  <pre>
                 *  Examples of line dash patterns:
                 *
                 *      "[Array] Phase"     Appearance          Description
                 *      _______________     _________________   ____________________________________
                 *
                 *      "[] 0"              -----------------   Solid line
                 *      "[3] 0"             ---   ---   ---     3 units on, 3 units off, ...
                 *      "[2] 1"             -  --  --  --  --   1 on, 2 off, 2 on, 2 off, ...
                 *      "[2 1] 0"           -- -- -- -- -- --   2 on, 1 off, 2 on, 1 off, ...
                 *      "[3 5] 6"             ---     ---       2 off, 3 on, 5 off, 3 on, 5 off, ...
                 *      "[2 3] 11"          -   --   --   --    1 on, 3 off, 2 on, 3 off, 2 on, ...
                 *  </pre>
                 *
                 *  @param pattern the line dash pattern.
                 </member>
        <member name="M:PDFjet.NET.Box.SetFillShape(System.Boolean)">
            
            
                 *  Sets the private fill_shape variable.
                 *  If the value of fill_shape is true - the box is filled with the current brush color.
                 *
                 *  @param fill_shape the value used to set the private fill_shape variable.
                 </member>
        <member name="M:PDFjet.NET.Box.PlaceIn(PDFjet.NET.Box,System.Double,System.Double)">
            
            
                 *  Places this box in the another box.
                 *
                 *  @param box the other box.
                 *  @param x_offset the x offset from the top left corner of the box.
                 *  @param y_offset the y offset from the top left corner of the box.
                 </member>
        <member name="M:PDFjet.NET.Box.PlaceIn(PDFjet.NET.Box,System.Single,System.Single)">
            
            
                 *  Places this box in the another box.
                 *
                 *  @param box the other box.
                 *  @param x_offset the x offset from the top left corner of the box.
                 *  @param y_offset the y offset from the top left corner of the box.
                 </member>
        <member name="M:PDFjet.NET.Box.ScaleBy(System.Double)">
            
            
                 *  Scales this box by the spacified factor.
                 *
                 *  @param factor the factor used to scale the box.
                 </member>
        <member name="M:PDFjet.NET.Box.ScaleBy(System.Single)">
            
            
                 *  Scales this box by the spacified factor.
                 *
                 *  @param factor the factor used to scale the box.
                 </member>
        <member name="M:PDFjet.NET.Box.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this box on the specified page.
                 *
                 *  @param page the page to draw this box on.
                 </member>
        <member name="T:PDFjet.NET.Cap">
            
            
             *  Used to specify the cap style of a line.
             *  See the Line class for more information.
             *
             </member>
        <member name="T:PDFjet.NET.Cell">
            
            
             *  Used to create table cell objects.
             *  See the Table class for more information.
             *
             </member>
        <member name="M:PDFjet.NET.Cell.#ctor(PDFjet.NET.Font)">
            
            
                 *  Creates a cell object and sets the font.
                 *
                 *  @param font the font.
                 </member>
        <member name="M:PDFjet.NET.Cell.#ctor(PDFjet.NET.Font,System.String)">
            
            
                 *  Creates a cell object and sets the font and the cell text.
                 *
                 *  @param font the font.
                 *  @param text the text.
                 </member>
        <member name="M:PDFjet.NET.Cell.#ctor(PDFjet.NET.Font,PDFjet.NET.Font,System.String)">
            
            
                 *  Creates a cell object and sets the font, fallback font and the cell text.
                 *
                 *  @param font the font.
                 *  @param fallbackFont the fallback font.
                 *  @param text the text.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetFont(PDFjet.NET.Font)">
            
            
                 *  Sets the font for this cell.
                 *
                 *  @param font the font.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetFallbackFont(PDFjet.NET.Font)">
            
            
                 *  Sets the fallback font for this cell.
                 *
                 *  @param fallbackFont the fallback font.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetFont">
            
            
                 *  Returns the font used by this cell.
                 *
                 *  @return the font.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetFallbackFont">
            
            
                 *  Returns the fallback font used by this cell.
                 *
                 *  @return the fallback font.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetText(System.String)">
            
            
                 *  Sets the cell text.
                 *
                 *  @param text the cell text.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetText">
            
            
                 *  Returns the cell text.
                 *
                 *  @return the cell text.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetImage(PDFjet.NET.Image)">
            
            
                 *  Sets the image inside this cell.
                 *
                 *  @param image the image.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetImage">
            
            
                 *  Returns the cell image.
                 *
                 *  @return the image.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetPoint(PDFjet.NET.Point)">
            
            
                 *  Sets the point inside this cell.
                 *  See the Point class and Example_09 for more information.
                 *
                 *  @param point the point.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetPoint">
            
            
                 *  Returns the cell point.
                 *
                 *  @return the point.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetWidth(System.Double)">
            
            
                 *  Sets the width of this cell.
                 *
                 *  @param width the specified width.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetWidth">
            
            
                 *  Returns the cell width.
                 *
                 *  @return the cell width.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetTopPadding(System.Single)">
            
            
                 *  Sets the top padding of this cell.
                 *
                 *  @param padding the top padding.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetBottomPadding(System.Single)">
            
            
                 *  Sets the bottom padding of this cell.
                 *
                 *  @param padding the bottom padding.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetLeftPadding(System.Single)">
            
            
                 *  Sets the left padding of this cell.
                 *
                 *  @param padding the left padding.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetRightPadding(System.Single)">
            
            
                 *  Sets the right padding of this cell.
                 *
                 *  @param padding the right padding.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetHeight">
            
            
                 *  Returns the cell height.
                 *
                 *  @return the cell height.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetBgColor(System.Int32)">
            
            
                 *  Sets the background to the specified color.
                 *
                 *  @param color the color specified as an integer.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetBgColor">
            
            
                 *  Returns the background color of this cell.
                 *
                 </member>
        <member name="M:PDFjet.NET.Cell.SetPenColor(System.Int32)">
            
            
                 *  Sets the pen color.
                 *
                 *  @param color the color specified as an integer.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetPenColor">
            
            
                 *  Returns the pen color.
                 *
                 </member>
        <member name="M:PDFjet.NET.Cell.SetBrushColor(System.Int32)">
            
            
                 *  Sets the brush color.
                 *
                 *  @param color the color specified as an integer.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetBrushColor">
            
            
                 *  Returns the brush color.
                 *
                 </member>
        <member name="M:PDFjet.NET.Cell.SetFgColor(System.Int32)">
            
            
                 *  Sets the pen and brush colors to the specified color.
                 *
                 *  @param color the color specified as an integer.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetColSpan(System.Int32)">
            
            
                 *  Sets the column span private variable.
                 *
                 *  @param colspan the specified column span value.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetColSpan">
            
            
                 *  Returns the column span private variable value.
                 *
                 *  @return the column span value.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetBorder(System.Int32,System.Boolean)">
            
            
                 *  Sets the cell border object.
                 *
                 *  @param border the border object.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetBorder(System.Int32)">
            
            
                 *  Returns the cell border object.
                 *
                 *  @return the cell border object.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetNoBorders">
            
            
                 *  Sets all border object parameters to false.
                 *  This cell will have no borders when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Cell.SetTextAlignment(System.Int32)">
            
            
                 *  Sets the cell text alignment.
                 *
                 *  @param alignment the alignment code.
                 *  Supported values: Align.LEFT, Align.RIGHT and Align.CENTER.
                 </member>
        <member name="M:PDFjet.NET.Cell.GetTextAlignment">
            
            
                 *  Returns the text alignment.
                 *
                 </member>
        <member name="M:PDFjet.NET.Cell.SetUnderline(System.Boolean)">
            
            
                 *  Sets the underline variable.
                 *  If the value of the underline variable is 'true' - the text is underlined.
                 *
                 *  @param underline the underline flag.
                 </member>
        <member name="M:PDFjet.NET.Cell.Paint(PDFjet.NET.Page,System.Single,System.Single,System.Single,System.Single)">
            
            
                 *  Draws the point, text and borders of this cell.
                 *
                 </member>
        <member name="M:PDFjet.NET.Cell.ImprovedPaint(PDFjet.NET.Page,System.Single,System.Single,System.Single,System.Single,System.String)">
            
            
                 *  Draws the point, text and borders of this cell.
                 *
                 </member>
        <member name="T:PDFjet.NET.Chart">
            
            
             *  Used to create XY chart objects and draw them on a page.
             *
             *  Please see Example_09.
             </member>
        <member name="M:PDFjet.NET.Chart.#ctor(PDFjet.NET.Font,PDFjet.NET.Font)">
            
            
                 *  Create a XY chart object.
                 *
                 *  @param f1 the font used for the chart title.
                 *  @param f2 the font used for the X and Y axis titles.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetTitle(System.String)">
            
            
                 *  Sets the title of the chart.
                 *
                 *  @param title the title text.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetXAxisTitle(System.String)">
            
            
                 *  Sets the title for the X axis.
                 *
                 *  @param title the X axis title.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetYAxisTitle(System.String)">
            
            
                 *  Sets the title for the Y axis.
                 *
                 *  @param title the Y axis title.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetData(System.Collections.Generic.List{System.Collections.Generic.List{PDFjet.NET.Point}})">
            
            
                 *  Sets the data that will be used to draw this chart.
                 *
                 *  @param chartData the data.
                 </member>
        <member name="M:PDFjet.NET.Chart.GetData">
            
            
                 *  Returns the chart data.
                 *
                 *  @return the chart data.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position of this chart on the page.
                 *
                 *  @param x the x coordinate of the top left corner of this chart when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this chart when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position of this chart on the page.
                 *
                 *  @param x the x coordinate of the top left corner of this chart when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this chart when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location of this chart on the page.
                 *
                 *  @param x the x coordinate of the top left corner of this chart when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this chart when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetSize(System.Double,System.Double)">
            
            
                 *  Sets the size of this chart.
                 *
                 *  @param w the width of this chart.
                 *  @param h the height of this chart.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetSize(System.Single,System.Single)">
            
            
                 *  Sets the size of this chart.
                 *
                 *  @param w the width of this chart.
                 *  @param h the height of this chart.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetMinimumFractionDigits(System.Int32)">
            
            
                 *  Sets the minimum number of fractions digits do display for the X and Y axis labels.
                 *
                 *  @param minFractionDigits the minimum number of fraction digits.
                 </member>
        <member name="M:PDFjet.NET.Chart.SetMaximumFractionDigits(System.Int32)">
            
            
                 *  Sets the maximum number of fractions digits do display for the X and Y axis labels.
                 *
                 *  @param maxFractionDigits the maximum number of fraction digits.
                 </member>
        <member name="M:PDFjet.NET.Chart.Slope(System.Collections.Generic.List{PDFjet.NET.Point})">
            
            
                 *  Calculates the Slope of a trend line given a list of points.
                 *  See Example_09.
                 *
                 *  @param points the list of points.
                 *  @return the Slope float value.
                 </member>
        <member name="M:PDFjet.NET.Chart.Intercept(System.Collections.Generic.List{PDFjet.NET.Point},System.Double)">
            
            
                 *  Calculates the Intercept of a trend line given a list of points.
                 *  See Example_09.
                 *
                 *  @param points the list of points.
                 *  @return the Intercept float value.
                 </member>
        <member name="M:PDFjet.NET.Chart.Intercept(System.Collections.Generic.List{PDFjet.NET.Point},System.Single)">
            
            
                 *  Calculates the Intercept of a trend line given a list of points.
                 *  See Example_09.
                 *
                 *  @param points the list of points.
                 *  @return the Intercept float value.
                 </member>
        <member name="M:PDFjet.NET.Chart.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this chart on the specified page.
                 *
                 *  @param page the page to draw this chart on.
                 </member>
        <member name="M:PDFjet.NET.Chart.Devsq(System.Collections.Generic.List{PDFjet.NET.Point})">
            
            
                 * Devsq() returns the sum of squares of deviations.
                 *
                 </member>
        <member name="T:PDFjet.NET.CheckBox">
            
            
             *  Creates a CheckBox, which can be set checked or unchecked.
             *  By default the check box is unchecked.
             </member>
        <member name="M:PDFjet.NET.CheckBox.#ctor(PDFjet.NET.Font,System.String)">
            
            
                 *  Creates a CheckBox with blue check mark.
                 *
                 </member>
        <member name="M:PDFjet.NET.CheckBox.SetFontSize(System.Single)">
            
            
                 *  Sets the font size to use for this text line.
                 *
                 *  @param fontSize the fontSize to use.
                 *  @return this CheckBox.
                 </member>
        <member name="M:PDFjet.NET.CheckBox.SetBoxColor(System.Int32)">
            
            
                 *  Sets the color of the check box.
                 *
                 *  @param boxColor the check box color specified as an 0xRRGGBB integer.
                 *  @return this CheckBox.
                 </member>
        <member name="M:PDFjet.NET.CheckBox.SetCheckmark(System.Int32)">
            
            
                 *  Sets the color of the check mark.
                 *
                 *  @param checkColor the check mark color specified as an 0xRRGGBB integer.
                 *  @return this CheckBox.
                 </member>
        <member name="M:PDFjet.NET.CheckBox.SetPosition(System.Single,System.Single)">
            
            
                 *  Set the x,y position on the Page.
                 *
                 *  @param x the x coordinate on the Page.
                 *  @param y the y coordinate on the Page.
                 *  @return this CheckBox.
                 </member>
        <member name="M:PDFjet.NET.CheckBox.SetLocation(System.Single,System.Single)">
            
            
                 *  Set the x,y location on the Page.
                 *
                 *  @param x the x coordinate on the Page.
                 *  @param y the y coordinate on the Page.
                 *  @return this CheckBox.
                 </member>
        <member name="M:PDFjet.NET.CheckBox.GetHeight">
            
            
                 *  Gets the height of the CheckBox.
                 *
                 </member>
        <member name="M:PDFjet.NET.CheckBox.GetWidth">
            
            
                 *  Gets the width of the CheckBox.
                 *
                 </member>
        <member name="M:PDFjet.NET.CheckBox.Check(System.Int32)">
            
            
                 *  Checks or unchecks this check box. See the Mark class for available options.
                 *
                 *  @return this CheckBox.
                 </member>
        <member name="M:PDFjet.NET.CheckBox.SetURIAction(System.String)">
            
            
                 *  Sets the URI for the "click text line" action.
                 *
                 *  @param uri the URI.
                 *  @return this CheckBox.
                 </member>
        <member name="M:PDFjet.NET.CheckBox.SetAltDescription(System.String)">
            
            
                 *  Sets the alternate description of this check box.
                 *
                 *  @param altDescription the alternate description of the check box.
                 *  @return this CheckBox.
                 </member>
        <member name="M:PDFjet.NET.CheckBox.SetActualText(System.String)">
            
            
                 *  Sets the actual text for this check box.
                 *
                 *  @param actualText the actual text for the check box.
                 *  @return this CheckBox.
                 </member>
        <member name="M:PDFjet.NET.CheckBox.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this CheckBox on the specified Page.
                 *
                 *  @param page the Page where the CheckBox is to be drawn.
                 </member>
        <member name="T:PDFjet.NET.CodePage">
            
            
             *  Used to specify the character encoding - code page - for a font.
             *  See the Font class for more information.
             *
             *
             </member>
        <member name="T:PDFjet.NET.Compliance">
            
            
             *  Used to set PDF/A compliance.
             *  See the constructors in the PDF class.
             *
             </member>
        <member name="T:PDFjet.NET.CompositeTextLine">
            
            
             *  Used to create composite text line objects.
             *
             *
             </member>
        <member name="M:PDFjet.NET.CompositeTextLine.SetFontSize(System.Single)">
            
            
                 *  Sets the font size.
                 *
                 *  @param fontSize the font size.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.GetFontSize">
            
            
                 *  Gets the font size.
                 *
                 *  @return fontSize the font size.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.SetSuperscriptFactor(System.Single)">
            
            
                 *  Sets the superscript factor for this composite text line.
                 *
                 *  @param superscript the superscript size factor.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.GetSuperscriptFactor">
            
            
                 *  Gets the superscript factor for this text line.
                 *
                 *  @return superscript the superscript size factor.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.SetSubscriptFactor(System.Single)">
            
            
                 *  Sets the subscript factor for this composite text line.
                 *
                 *  @param subscript the subscript size factor.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.GetSubscriptFactor">
            
            
                 *  Gets the subscript factor for this text line.
                 *
                 *  @return subscript the subscript size factor.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.SetSuperscriptPosition(System.Single)">
            
            
                 *  Sets the superscript position for this composite text line.
                 *
                 *  @param superscript_position the superscript position.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.GetSuperscriptPosition">
            
            
                 *  Gets the superscript position for this text line.
                 *
                 *  @return superscript_position the superscript position.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.SetSubscriptPosition(System.Single)">
            
            
                 *  Sets the subscript position for this composite text line.
                 *
                 *  @param subscript_position the subscript position.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.GetSubscriptPosition">
            
            
                 *  Gets the subscript position for this text line.
                 *
                 *  @return subscript_position the subscript position.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.AddComponent(PDFjet.NET.TextLine)">
            
            
                 *  Add a new text line.
                 *
                 *  Find the current font, current size and effects (normal, super or subscript)
                 *  Set the position of the component to the starting stored as current position
                 *  Set the size and offset based on effects
                 *  Set the new current position
                 *
                 *  @param component the component.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.SetPosition(System.Double,System.Double)">
            
            
                 *  Loop through all the text lines and reset their position based on
                 *  the new position set here.
                 *
                 *  @param x the x coordinate.
                 *  @param y the y coordinate.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.SetPosition(System.Single,System.Single)">
            
            
                 *  Loop through all the text lines and reset their position based on
                 *  the new position set here.
                 *
                 *  @param x the x coordinate.
                 *  @param y the y coordinate.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.SetLocation(System.Single,System.Single)">
            
            
                 *  Loop through all the text lines and reset their location based on
                 *  the new location set here.
                 *
                 *  @param x the x coordinate.
                 *  @param y the y coordinate.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.GetPosition">
            
            
                 *  Return the position of this composite text line.
                 *
                 *  @return the position of this composite text line.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.Get(System.Int32)">
            
            
                 *  Return the nth entry in the TextLine array.
                 *
                 *  @param index the index of the nth element.
                 *  @return the text line at the specified index.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.Size">
            
            
                 *  Returns the number of text lines.
                 *
                 *  @return the number of text lines.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.GetMinMax">
            
            
                 *  Returns the vertical coordinates of the top left and bottom right corners
                 *  of the bounding box of this composite text line.
                 *
                 *  @return the an array containing the vertical coordinates.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.GetHeight">
            
            
                 *  Returns the height of this CompositeTextLine.
                 *
                 *  @return the height.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.GetWidth">
            
            
                 *  Returns the width of this CompositeTextLine.
                 *
                 *  @return the width.
                 </member>
        <member name="M:PDFjet.NET.CompositeTextLine.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this line on the specified page.
                 *
                 *  @param page the page to draw this line on.
                 </member>
        <member name="T:PDFjet.NET.CoreFont">
            
            
             *  Used to select one of the 14 core fonts.
             *  See the Font class for more details.
             *
             </member>
        <member name="T:PDFjet.NET.Destination">
            
            
             *  Used to create PDF destination objects.
             *
             *
             </member>
        <member name="M:PDFjet.NET.Destination.#ctor(System.String,System.Double)">
            
            
                 *  This class is used to create destination objects.
                 *
                 *  @param name the name of this destination object.
                 *  @param yPosition the y coordinate of the top left corner.
                 *
                 </member>
        <member name="M:PDFjet.NET.Destination.#ctor(System.String,System.Single)">
            
            
                 *  This class is used to create destination objects.
                 *
                 *  @param name the name of this destination object.
                 *  @param yPosition the y coordinate of the top left corner.
                 *
                 </member>
        <member name="T:PDFjet.NET.Dimension">
            
            
             *  Encapsulates the width and height of a component.
             </member>
        <member name="M:PDFjet.NET.Dimension.#ctor(System.Single,System.Single)">
            
            
                 *  Constructor for creating dimension objects.
                 *
                 *  @param width the width.
                 *  @param height the height.
                 </member>
        <member name="T:PDFjet.NET.Effect">
            
            
             *  Used to specify the text effects.
             *
             </member>
        <member name="T:PDFjet.NET.Embed">
            
            
             *  Used to specify if TrueType or OpenType font should be embedded in the PDF document.
             *  See the Font class for more details.
             *
             </member>
        <member name="T:PDFjet.NET.ErrorCorrectLevel">
            
            
             * Used to specify the error correction level for QR Codes.
             *
             * @author Kazuhiko Arase
             </member>
        <member name="T:PDFjet.NET.Executive">
            
            
             *  Used to specify PDF page with size <strong>Executive</strong>.
             *  For more information about the page size classes - A3, A4, A5, B5, Executive, Letter, Legal and Tabloid - see the Page class.
             *
             </member>
        <member name="M:PDFjet.NET.Font.#ctor(PDFjet.NET.PDF,PDFjet.NET.CoreFont)">
            
            
                 *  Constructor for the 14 standard fonts.
                 *  Creates a font object and adds it to the PDF.
                 *
                 *  <pre>
                 *  Examples:
                 *      Font font1 = new Font(pdf, CoreFont.HELVETICA);
                 *      Font font2 = new Font(pdf, CoreFont.TIMES_ITALIC);
                 *      Font font3 = new Font(pdf, CoreFont.ZAPF_DINGBATS);
                 *      ...
                 *  </pre>
                 *
                 *  @param pdf the PDF to add this font to.
                 *  @param coreFont the core font. Must be one the names defined in the CoreFont class.
                 </member>
        <member name="M:PDFjet.NET.Font.SetItalic(System.Boolean)">
            
            
                * Sets the skew15 private variable.
                * When the variable is set to 'true' all glyphs in the font are skewed on 15 degrees.
                * This makes a regular font look like an italic type font.
                * Use this method when you don't have real italic font in the font family,
                * or when you want to generate smaller PDF files.
                * For example you could embed only the Regular and Bold fonts and synthesize the RegularItalic and BoldItalic.
                * 
                * @param skew15 the skew flag.
                </member>
        <member name="M:PDFjet.NET.Font.StringWidth(PDFjet.NET.Font,System.String)">
            
            
                 * Returns the width of a string drawn using two fonts.
                 * 
                 * @param font2 the fallback font.
                 * @param str the string.
                 * @return the width.
                 </member>
        <member name="T:PDFjet.NET.Glyph">
            
            
             *  Should not be used by third party applications.
             *  It's public only because the AfmCompiler is using it.
             *
             </member>
        <member name="M:PDFjet.NET.IDrawable.DrawOn(PDFjet.NET.Page)">
            
            
                 * Draw the component implementing this interface on the PDF page.
                 *
                 * @param page the page to draw on.
                 * @throws Exception
                 </member>
        <member name="T:PDFjet.NET.Image">
            
            
             *  Used to create image objects and draw them on a page.
             *  The image type can be one of the following: ImageType.JPG, ImageType.PNG, ImageType.BMP or ImageType.JET
             *
             *  Please see Example_03 and Example_24.
             </member>
        <member name="M:PDFjet.NET.Image.#ctor(PDFjet.NET.PDF,System.IO.Stream,System.Int32)">
            
            
                 *  The main constructor for the Image class.
                 *
                 *  @param pdf the page to draw this image on.
                 *  @param inputStream the input stream to read the image from.
                 *  @param imageType ImageType.JPG, ImageType.PNG or ImageType.BMP.
                 *
                 </member>
        <member name="M:PDFjet.NET.Image.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position of this image on the page to (x, y).
                 *
                 *  @param x the x coordinate of the top left corner of the image.
                 *  @param y the y coordinate of the top left corner of the image.
                 </member>
        <member name="M:PDFjet.NET.Image.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position of this image on the page to (x, y).
                 *
                 *  @param x the x coordinate of the top left corner of the image.
                 *  @param y the y coordinate of the top left corner of the image.
                 </member>
        <member name="M:PDFjet.NET.Image.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location of this image on the page to (x, y).
                 *
                 *  @param x the x coordinate of the top left corner of the image.
                 *  @param y the y coordinate of the top left corner of the image.
                 </member>
        <member name="M:PDFjet.NET.Image.ScaleBy(System.Double)">
            
            
                 *  Scales this image by the specified factor.
                 *
                 *  @param factor the factor used to scale the image.
                 </member>
        <member name="M:PDFjet.NET.Image.ScaleBy(System.Single)">
            
            
                 *  Scales this image by the specified factor.
                 *
                 *  @param factor the factor used to scale the image.
                 </member>
        <member name="M:PDFjet.NET.Image.ScaleBy(System.Single,System.Single)">
            
            
                 *  Scales this image by the specified width and height factor.
                 *  <p><i>Author:</i> <strong>Pieter Libin</strong>, pieter@emweb.be</p>
                 *
                 *  @param widthFactor the factor used to scale the width of the image
                 *  @param heightFactor the factor used to scale the height of the image
                 </member>
        <member name="M:PDFjet.NET.Image.PlaceIn(PDFjet.NET.Box)">
            
            
                 *  Places this image in the specified box.
                 *
                 *  @param box the specified box.
                 </member>
        <member name="M:PDFjet.NET.Image.SetURIAction(System.String)">
            
            
                 *  Sets the URI for the "click box" action.
                 *
                 *  @param uri the URI
                 </member>
        <member name="M:PDFjet.NET.Image.SetGoToAction(System.String)">
            
            
                 *  Sets the destination key for the action.
                 *
                 *  @param key the destination name.
                 </member>
        <member name="M:PDFjet.NET.Image.SetRotateCW90(System.Boolean)">
            
            
                 *  Sets the rotate90 flag.
                 *  When the flag is true the image is rotated 90 degrees clockwise.
                 *
                 *  @param rotate90 the flag.
                 </member>
        <member name="M:PDFjet.NET.Image.SetAltDescription(System.String)">
            
            
                 *  Sets the alternate description of this image.
                 *
                 *  @param altDescription the alternate description of the image.
                 *  @return this Image.
                 </member>
        <member name="M:PDFjet.NET.Image.SetActualText(System.String)">
            
            
                 *  Sets the actual text for this image.
                 *
                 *  @param actualText the actual text for the image.
                 *  @return this Image.
                 </member>
        <member name="M:PDFjet.NET.Image.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this image on the specified page.
                 *
                 *  @param page the page to draw this image on.
                 </member>
        <member name="M:PDFjet.NET.Image.GetWidth">
            
            
                 *  Returns the width of this image when drawn on the page.
                 *  The scaling is take into account.
                 *
                 *  @return w - the width of this image.
                 </member>
        <member name="M:PDFjet.NET.Image.GetHeight">
            
            
                 *  Returns the height of this image when drawn on the page.
                 *  The scaling is take into account.
                 *
                 *  @return h - the height of this image.
                 </member>
        <member name="T:PDFjet.NET.ImageType">
            
            
             *  Used to specify the image type of an image.
             *  Supported types: ImageType.JPEG, ImageType.PNG, ImageType.BMP and ImageType.JET
             *  See the Image class for more information.
             *
             </member>
        <member name="T:PDFjet.NET.Join">
            
            
             *  Used to specify the join style when joining two lines.
             *  See the Page and Line classes for more details.
             *
             </member>
        <member name="T:PDFjet.NET.Legal">
            
            
             *  Used to specify PDF page with size <strong>Legal</strong>.
             *  For more information about the page size classes - A3, A4, A5, B5, Executive, Letter, Legal and Tabloid - see the Page class.
             </member>
        <member name="T:PDFjet.NET.Letter">
            
            
             *  Used to specify PDF page with size <strong>Letter</strong>.
             *  For more information about the page size classes - A3, A4, A5, B5, Executive, Letter, Legal and Tabloid - see the Page class.
             *
             </member>
        <member name="T:PDFjet.NET.Line">
            
            
             *  Used to create line objects.
             *
             *  Please see Example_01.
             </member>
        <member name="M:PDFjet.NET.Line.#ctor">
            
            
                 *  The default constructor.
                 *
                 </member>
        <member name="M:PDFjet.NET.Line.#ctor(System.Double,System.Double,System.Double,System.Double)">
            
            
                 *  Create a line object.
                 *
                 *  @param x1 the x coordinate of the start point.
                 *  @param y1 the y coordinate of the start point.
                 *  @param x2 the x coordinate of the end point.
                 *  @param y2 the y coordinate of the end point.     
                 </member>
        <member name="M:PDFjet.NET.Line.#ctor(System.Single,System.Single,System.Single,System.Single)">
            
            
                 *  Create a line object.
                 *
                 *  @param x1 the x coordinate of the start point.
                 *  @param y1 the y coordinate of the start point.
                 *  @param x2 the x coordinate of the end point.
                 *  @param y2 the y coordinate of the end point.     
                 </member>
        <member name="M:PDFjet.NET.Line.SetPattern(System.String)">
            
            
                 *  The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
                 *  It is specified by a dash array and a dash phase.
                 *  The elements of the dash array are positive numbers that specify the lengths of
                 *  alternating dashes and gaps.
                 *  The dash phase specifies the distance into the dash pattern at which to start the dash.
                 *  The elements of both the dash array and the dash phase are expressed in user space units.
                 *  <pre>
                 *  Examples of line dash patterns:
                 *
                 *      "[Array] Phase"     Appearance          Description
                 *      _______________     _________________   ____________________________________
                 *
                 *      "[] 0"              -----------------   Solid line
                 *      "[3] 0"             ---   ---   ---     3 units on, 3 units off, ...
                 *      "[2] 1"             -  --  --  --  --   1 on, 2 off, 2 on, 2 off, ...
                 *      "[2 1] 0"           -- -- -- -- -- --   2 on, 1 off, 2 on, 1 off, ...
                 *      "[3 5] 6"             ---     ---       2 off, 3 on, 5 off, 3 on, 5 off, ...
                 *      "[2 3] 11"          -   --   --   --    1 on, 3 off, 2 on, 3 off, 2 on, ...
                 *  </pre>
                 *
                 *  @param pattern the line dash pattern.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.SetStartPoint(System.Double,System.Double)">
            
            
                 *  Sets the x and y coordinates of the start point.
                 *
                 *  @param x the x coordinate of the start point.
                 *  @param y the t coordinate of the start point.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.SetStartPoint(System.Single,System.Single)">
            
            
                 *  Sets the x and y coordinates of the start point.
                 *
                 *  @param x the x coordinate of the start point.
                 *  @param y the y coordinate of the start point.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.SetPointA(System.Single,System.Single)">
            
            
                 *  Sets the x and y coordinates of the start point.
                 *
                 *  @param x the x coordinate of the start point.
                 *  @param y the y coordinate of the start point.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.GetStartPoint">
            
            
                 *  Returns the start point of this line.
                 *
                 *  @return Point the point.
                 </member>
        <member name="M:PDFjet.NET.Line.SetEndPoint(System.Double,System.Double)">
            
            
                 *  Sets the x and y coordinates of the end point.
                 *
                 *  @param x the x coordinate of the end point.
                 *  @param y the y coordinate of the end point.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.SetEndPoint(System.Single,System.Single)">
            
            
                 *  Sets the x and y coordinates of the end point.
                 *
                 *  @param x the x coordinate of the end point.
                 *  @param y the y coordinate of the end point.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.SetPointB(System.Single,System.Single)">
            
            
                 *  Sets the x and y coordinates of the end point.
                 *
                 *  @param x the x coordinate of the end point.
                 *  @param y the y coordinate of the end point.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.GetEndPoint">
            
            
                 *  Returns the end point of this line.
                 *
                 *  @return Point the point.
                 </member>
        <member name="M:PDFjet.NET.Line.SetWidth(System.Double)">
            
            
                 *  Sets the width of this line.
                 *
                 *  @param width the width.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.SetWidth(System.Single)">
            
            
                 *  Sets the width of this line.
                 *
                 *  @param width the width.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.SetColor(System.Int32)">
            
            
                 *  Sets the color for this line.
                 *
                 *  @param color the color specified as an integer.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.SetCapStyle(System.Int32)">
            
            
                 *  Sets the line cap style.
                 *
                 *  @param style the cap style of the current line. Supported values: Cap.BUTT, Cap.ROUND and Cap.PROJECTING_SQUARE
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.GetCapStyle">
            
            
                 *  Returns the line cap style.
                 *
                 *  @return the cap style.
                 </member>
        <member name="M:PDFjet.NET.Line.SetAltDescription(System.String)">
            
            
                 *  Sets the alternate description of this line.
                 *
                 *  @param altDescription the alternate description of the line.
                 *  @return this Line.
                 </member>
        <member name="M:PDFjet.NET.Line.SetActualText(System.String)">
            
            
                 *  Sets the actual text for this line.
                 *
                 *  @param actualText the actual text for the line.
                 *  @return this Line.
                 </member>
        <member name="M:PDFjet.NET.Line.PlaceIn(PDFjet.NET.Box)">
            
            
                 *  Places this line in the specified box at position (0.0f, 0.0f).
                 *
                 *  @param box the specified box.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.PlaceIn(PDFjet.NET.Box,System.Double,System.Double)">
            
            
                 *  Places this line in the specified box.
                 *
                 *  @param box the specified box.
                 *  @param x_offset the x offset from the top left corner of the box.
                 *  @param y_offset the y offset from the top left corner of the box.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.PlaceIn(PDFjet.NET.Box,System.Single,System.Single)">
            
            
                 *  Places this line in the specified box.
                 *
                 *  @param box the specified box.
                 *  @param x_offset the x offset from the top left corner of the box.
                 *  @param y_offset the y offset from the top left corner of the box.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.ScaleBy(System.Double)">
            
            
                 *  Scales this line by the spacified factor.
                 *
                 *  @param factor the factor used to scale the line.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.ScaleBy(System.Single)">
            
            
                 *  Scales this line by the spacified factor.
                 *
                 *  @param factor the factor used to scale the line.
                 *  @return this Line object.
                 </member>
        <member name="M:PDFjet.NET.Line.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this line on the specified page.
                 *
                 *  @param page the page to draw this line on.
                 </member>
        <member name="T:PDFjet.NET.Mark">
            
            
             *  Used to specify the check mark in CheckBox.
             *
             </member>
        <member name="T:PDFjet.NET.MaskPattern">
            
            
             * @author Kazuhiko Arase
             </member>
        <member name="T:PDFjet.NET.Operation">
            
            
             *  Used to specify the 'stroke', 'close' and 'fill' operations.
             *
             </member>
        <member name="T:PDFjet.NET.OptionalContentGroup">
            
            
             * Container for drawable objects that can be drawn on a page as part of Optional Content Group. 
             * Please see the PDF specification and Example_30 for more details.
             *
             * @author Mark Paxton
             </member>
        <member name="T:PDFjet.NET.Page">
            
            
             *  Used to create PDF page objects.
             *
             *  Please note:
             *  <pre>
             *  The coordinate (0.0f, 0.0f) is the top left corner of the page.
             *  The size of the pages are represented in points.
             *  1 point is 1/72 inches.
             *  </pre>
             *
             </member>
        <member name="M:PDFjet.NET.Page.#ctor(PDFjet.NET.PDF,System.Single[])">
            
            
                 *  Creates page object and add it to the PDF document.
                 *
                 *  Please note:
                 *  <pre>
                 *  The coordinate (0.0, 0.0) is the top left corner of the page.
                 *  The size of the pages are represented in points.
                 *  1 point is 1/72 inches.
                 *  </pre>
                 *
                 *  @param pdf the pdf object.
                 *  @param pageSize the page size of this page.
                 </member>
        <member name="M:PDFjet.NET.Page.#ctor(PDFjet.NET.PDF,System.Single[],System.Boolean)">
            
            
                 *  Creates page object and add it to the PDF document.
                 *
                 *  Please note:
                 *  <pre>
                 *  The coordinate (0.0, 0.0) is the top left corner of the page.
                 *  The size of the pages are represented in points.
                 *  1 point is 1/72 inches.
                 *  </pre>
                 *
                 *  @param pdf the pdf object.
                 *  @param pageSize the page size of this page.
                 *  @param addPageToPDF bool flag.
                 </member>
        <member name="M:PDFjet.NET.Page.AddDestination(System.String,System.Single)">
            
            
                 *  Adds destination to this page.
                 *
                 *  @param name The destination name.
                 *  @param yPosition The vertical position of the destination on this page.
                 </member>
        <member name="M:PDFjet.NET.Page.GetWidth">
            
            
                 *  Returns the width of this page.
                 *
                 *  @return the width of the page.
                 </member>
        <member name="M:PDFjet.NET.Page.GetHeight">
            
            
                 *  Returns the height of this page.
                 *
                 *  @return the height of the page.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawLine(System.Double,System.Double,System.Double,System.Double)">
            
            
                 *  Draws a line on the page, using the current color, between the points (x1, y1) and (x2, y2).
                 *
                 *  @param x1 the first point's x coordinate.
                 *  @param y1 the first point's y coordinate.
                 *  @param x2 the second point's x coordinate.
                 *  @param y2 the second point's y coordinate.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawString(PDFjet.NET.Font,PDFjet.NET.Font,System.String,System.Single,System.Single)">
            
            
                 *  Draws the text given by the specified string,
                 *  using the specified Thai or Hebrew font and the current brush color.
                 *  If the font is missing some glyphs - the fallback font is used.
                 *  The baseline of the leftmost character is at position (x, y) on the page.
                 *
                 *  @param font1 the Thai or Hebrew font.
                 *  @param font2 the fallback font.
                 *  @param str the string to be drawn.
                 *  @param x the x coordinate.
                 *  @param y the y coordinate.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawString(PDFjet.NET.Font,System.String,System.Double,System.Double)">
            
            
                 *  Draws the text given by the specified string,
                 *  using the specified font and the current brush color.
                 *  The baseline of the leftmost character is at position (x, y) on the page.
                 *
                 *  @param font the font to use.
                 *  @param str the string to be drawn.
                 *  @param x the x coordinate.
                 *  @param y the y coordinate.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawString(PDFjet.NET.Font,System.String,System.Single,System.Single)">
            
            
                 *  Draws the text given by the specified string,
                 *  using the specified font and the current brush color.
                 *  The baseline of the leftmost character is at position (x, y) on the page.
                 *
                 *  @param font the font to use.
                 *  @param str the string to be drawn.
                 *  @param x the x coordinate.
                 *  @param y the y coordinate.
                 </member>
        <member name="M:PDFjet.NET.Page.SetPenColor(System.Double,System.Double,System.Double)">
            
            
                 * Sets the color for stroking operations.
                 * The pen color is used when drawing lines and splines.
                 *
                 * @param r the red component is float value from 0.0 to 1.0.
                 * @param g the green component is float value from 0.0 to 1.0.
                 * @param b the blue component is float value from 0.0 to 1.0.
                 </member>
        <member name="M:PDFjet.NET.Page.SetPenColor(System.Single,System.Single,System.Single)">
            
            
                 * Sets the color for stroking operations.
                 * The pen color is used when drawing lines and splines.
                 *
                 * @param r the red component is float value from 0.0f to 1.0f.
                 * @param g the green component is float value from 0.0f to 1.0f.
                 * @param b the blue component is float value from 0.0f to 1.0f.
                 </member>
        <member name="M:PDFjet.NET.Page.SetBrushColor(System.Double,System.Double,System.Double)">
            
            
                 * Sets the color for brush operations.
                 * This is the color used when drawing regular text and filling shapes.
                 *
                 * @param r the red component is float value from 0.0 to 1.0.
                 * @param g the green component is float value from 0.0 to 1.0.
                 * @param b the blue component is float value from 0.0 to 1.0.
                 </member>
        <member name="M:PDFjet.NET.Page.SetBrushColor(System.Single,System.Single,System.Single)">
            
            
                 * Sets the color for brush operations.
                 * This is the color used when drawing regular text and filling shapes.
                 *
                 * @param r the red component is float value from 0.0f to 1.0f.
                 * @param g the green component is float value from 0.0f to 1.0f.
                 * @param b the blue component is float value from 0.0f to 1.0f.
                 </member>
        <member name="M:PDFjet.NET.Page.SetBrushColor(System.Single[])">
            
            
                 * Sets the color for brush operations.
                 * 
                 * @param color the color.
                 * @throws IOException
                 </member>
        <member name="M:PDFjet.NET.Page.GetBrushColor">
            
            
                 * Returns the brush color.
                 * 
                 * @return the brush color.
                 </member>
        <member name="M:PDFjet.NET.Page.SetPenColor(System.Int32)">
            
            
                 * Sets the pen color.
                 * 
                 * @param color the color. See the Color class for predefined values or define your own using 0x00RRGGBB packed integers.
                 * @throws IOException
                 </member>
        <member name="M:PDFjet.NET.Page.SetBrushColor(System.Int32)">
            
            
                 * Sets the brush color.
                 * 
                 * @param color the color. See the Color class for predefined values or define your own using 0x00RRGGBB packed integers.
                 * @throws IOException
                 </member>
        <member name="M:PDFjet.NET.Page.SetDefaultLineWidth">
            
            
                 *  Sets the line width to the default.
                 *  The default is the finest line width.
                 </member>
        <member name="M:PDFjet.NET.Page.SetLinePattern(System.String)">
            
            
                 *  The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
                 *  It is specified by a dash array and a dash phase.
                 *  The elements of the dash array are positive numbers that specify the lengths of
                 *  alternating dashes and gaps.
                 *  The dash phase specifies the distance into the dash pattern at which to start the dash.
                 *  The elements of both the dash array and the dash phase are expressed in user space units.
                 *  <pre>
                 *  Examples of line dash patterns:
                 *
                 *      "[Array] Phase"     Appearance          Description
                 *      _______________     _________________   ____________________________________
                 *
                 *      "[] 0"              -----------------   Solid line
                 *      "[3] 0"             ---   ---   ---     3 units on, 3 units off, ...
                 *      "[2] 1"             -  --  --  --  --   1 on, 2 off, 2 on, 2 off, ...
                 *      "[2 1] 0"           -- -- -- -- -- --   2 on, 1 off, 2 on, 1 off, ...
                 *      "[3 5] 6"             ---     ---       2 off, 3 on, 5 off, 3 on, 5 off, ...
                 *      "[2 3] 11"          -   --   --   --    1 on, 3 off, 2 on, 3 off, 2 on, ...
                 *  </pre>
                 *
                 *  @param pattern the line dash pattern.
                 </member>
        <member name="M:PDFjet.NET.Page.SetDefaultLinePattern">
            
            
                 *  Sets the default line dash pattern - solid line.
                 </member>
        <member name="M:PDFjet.NET.Page.SetPenWidth(System.Double)">
            
            
                 *  Sets the pen width that will be used to draw lines and splines on this page.
                 *
                 *  @param width the pen width.
                 </member>
        <member name="M:PDFjet.NET.Page.SetPenWidth(System.Single)">
            
            
                 *  Sets the pen width that will be used to draw lines and splines on this page.
                 *
                 *  @param width the pen width.
                 </member>
        <member name="M:PDFjet.NET.Page.SetLineCapStyle(System.Int32)">
            
            
                 *  Sets the current line cap style.
                 *
                 *  @param style the cap style of the current line. Supported values: Cap.BUTT, Cap.ROUND and Cap.PROJECTING_SQUARE
                 </member>
        <member name="M:PDFjet.NET.Page.SetLineJoinStyle(System.Int32)">
            
            
                 *  Sets the line join style.
                 *
                 *  @param style the line join style code. Supported values: Join.MITER, Join.ROUND and Join.BEVEL
                 </member>
        <member name="M:PDFjet.NET.Page.MoveTo(System.Double,System.Double)">
            
            
                 *  Moves the pen to the point with coordinates (x, y) on the page.
                 *
                 *  @param x the x coordinate of new pen position.
                 *  @param y the y coordinate of new pen position.
                 </member>
        <member name="M:PDFjet.NET.Page.MoveTo(System.Single,System.Single)">
            
            
                 *  Moves the pen to the point with coordinates (x, y) on the page.
                 *
                 *  @param x the x coordinate of new pen position.
                 *  @param y the y coordinate of new pen position.
                 </member>
        <member name="M:PDFjet.NET.Page.LineTo(System.Double,System.Double)">
            
            
                 *  Draws a line from the current pen position to the point with coordinates (x, y),
                 *  using the current pen width and stroke color.
                 </member>
        <member name="M:PDFjet.NET.Page.LineTo(System.Single,System.Single)">
            
            
                 *  Draws a line from the current pen position to the point with coordinates (x, y),
                 *  using the current pen width and stroke color.
                 </member>
        <member name="M:PDFjet.NET.Page.StrokePath">
            
            
                 *  Draws the path using the current pen color.
                 </member>
        <member name="M:PDFjet.NET.Page.ClosePath">
            
            
                 *  Closes the path and draws it using the current pen color.
                 </member>
        <member name="M:PDFjet.NET.Page.FillPath">
            
            
                 *  Closes and fills the path with the current brush color.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawRect(System.Double,System.Double,System.Double,System.Double)">
            
            
                 *  Draws the outline of the specified rectangle on the page.
                 *  The left and right edges of the rectangle are at x and x + w.
                 *  The top and bottom edges are at y and y + h.
                 *  The rectangle is drawn using the current pen color.
                 *
                 *  @param x the x coordinate of the rectangle to be drawn.
                 *  @param y the y coordinate of the rectangle to be drawn.
                 *  @param w the width of the rectangle to be drawn.
                 *  @param h the height of the rectangle to be drawn.
                 </member>
        <member name="M:PDFjet.NET.Page.FillRect(System.Double,System.Double,System.Double,System.Double)">
            
            
                 *  Fills the specified rectangle on the page.
                 *  The left and right edges of the rectangle are at x and x + w.
                 *  The top and bottom edges are at y and y + h.
                 *  The rectangle is drawn using the current pen color.
                 *
                 *  @param x the x coordinate of the rectangle to be drawn.
                 *  @param y the y coordinate of the rectangle to be drawn.
                 *  @param w the width of the rectangle to be drawn.
                 *  @param h the height of the rectangle to be drawn.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawPath(System.Collections.Generic.List{PDFjet.NET.Point},System.Char)">
            
            
                 *  Draws or fills the specified path using the current pen or brush.
                 *
                 *  @param path the path.
                 *  @param operation specifies 'stroke' or 'fill' operation.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawBezierCurve(System.Collections.Generic.List{PDFjet.NET.Point})">
            
            
                 * Strokes a bezier curve and draws it using the current pen.
                 * @deprecated  As of v4.00 replaced by {@link #drawPath(List, char)}
                 *
                 * @param list the list of points that define the bezier curve.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawBezierCurve(System.Collections.Generic.List{PDFjet.NET.Point},System.Char)">
            
            
                 * Draws a bezier curve and fills it using the current brush.
                 * @deprecated  As of v4.00 replaced by {@link #drawPath(List, char)}
                 *
                 * @param list the list of points that define the bezier curve.
                 * @param operation must be Operation.STROKE or Operation.FILL.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawCircle(System.Double,System.Double,System.Double)">
            
            
                 *  Draws a circle on the page.
                 *
                 *  The outline of the circle is drawn using the current pen color.
                 *
                 *  @param x the x coordinate of the center of the circle to be drawn.
                 *  @param y the y coordinate of the center of the circle to be drawn.
                 *  @param r the radius of the circle to be drawn.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawCircle(System.Double,System.Double,System.Double,System.Char)">
            
            
                 *  Draws the specified circle on the page and fills it with the current brush color.
                 *
                 *  @param x the x coordinate of the center of the circle to be drawn.
                 *  @param y the y coordinate of the center of the circle to be drawn.
                 *  @param r the radius of the circle to be drawn.
                 *  @param operation Operation.STROKE or Operation.FILL
                 </member>
        <member name="M:PDFjet.NET.Page.DrawEllipse(System.Double,System.Double,System.Double,System.Double)">
            
            
                 *  Draws an ellipse on the page and fills it using the current brush color.
                 *
                 *  @param x the x coordinate of the center of the ellipse to be drawn.
                 *  @param y the y coordinate of the center of the ellipse to be drawn.
                 *  @param r1 the horizontal radius of the ellipse to be drawn.
                 *  @param r2 the vertical radius of the ellipse to be drawn.
                 *  @param operation must be: Operation.FILL
                 </member>
        <member name="M:PDFjet.NET.Page.DrawEllipse(System.Single,System.Single,System.Single,System.Single)">
            
            
                 *  Draws an ellipse on the page and fills it using the current brush color.
                 *
                 *  @param x the x coordinate of the center of the ellipse to be drawn.
                 *  @param y the y coordinate of the center of the ellipse to be drawn.
                 *  @param r1 the horizontal radius of the ellipse to be drawn.
                 *  @param r2 the vertical radius of the ellipse to be drawn.
                 *  @param operation must be: Operation.FILL
                 </member>
        <member name="M:PDFjet.NET.Page.FillEllipse(System.Double,System.Double,System.Double,System.Double)">
            
            
                 *  Draws an ellipse on the page and fills it using the current brush color.
                 *
                 *  @param x the x coordinate of the center of the ellipse to be drawn.
                 *  @param y the y coordinate of the center of the ellipse to be drawn.
                 *  @param r1 the horizontal radius of the ellipse to be drawn.
                 *  @param r2 the vertical radius of the ellipse to be drawn.
                 </member>
        <member name="M:PDFjet.NET.Page.FillEllipse(System.Single,System.Single,System.Single,System.Single)">
            
            
                 *  Draws an ellipse on the page and fills it using the current brush color.
                 *
                 *  @param x the x coordinate of the center of the ellipse to be drawn.
                 *  @param y the y coordinate of the center of the ellipse to be drawn.
                 *  @param r1 the horizontal radius of the ellipse to be drawn.
                 *  @param r2 the vertical radius of the ellipse to be drawn.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawEllipse(System.Single,System.Single,System.Single,System.Single,System.Char)">
            
            
                 *  Draws an ellipse on the page and fills it using the current brush color.
                 *
                 *  @param x the x coordinate of the center of the ellipse to be drawn.
                 *  @param y the y coordinate of the center of the ellipse to be drawn.
                 *  @param r1 the horizontal radius of the ellipse to be drawn.
                 *  @param r2 the vertical radius of the ellipse to be drawn.
                 *  @param operation the operation.
                 </member>
        <member name="M:PDFjet.NET.Page.DrawPoint(PDFjet.NET.Point)">
            
            
                 *  Draws a point on the page using the current pen color.
                 *
                 *  @param p the point.
                 </member>
        <member name="M:PDFjet.NET.Page.SetTextRenderingMode(System.Int32)">
            
            
                 *  Sets the text rendering mode.
                 *
                 *  @param mode the rendering mode.
                 </member>
        <member name="M:PDFjet.NET.Page.SetTextDirection(System.Int32)">
            
            
                 *  Sets the text direction.
                 *
                 *  @param degrees the angle.
                 </member>
        <member name="M:PDFjet.NET.Page.BezierCurveTo(PDFjet.NET.Point,PDFjet.NET.Point,PDFjet.NET.Point)">
            
            
                 *  Draws a bezier curve starting from the current point.
                 *  <strong>Please note:</strong> You must call the StrokePath, ClosePath or FillPath methods after the last BezierCurveTo call.
                 *  <p><i>Author:</i> <strong>Pieter Libin</strong>, pieter@emweb.be</p>
                 *
                 *  @param p1 this first control point.
                 *  @param p2 this second control point.
                 *  @param p3 this end point.
                 </member>
        <member name="M:PDFjet.NET.Page.SetTextLocation(System.Single,System.Single)">
            
            
                 *  Sets the text location.
                 *
                 *  @param x the x coordinate of new text location.
                 *  @param y the y coordinate of new text location.
                 </member>
        <member name="M:PDFjet.NET.Page.SetTextLeading(System.Single)">
            
            
                 *  Sets the text leading.
                 *
                 *  @param leading the leading.
                 </member>
        <member name="M:PDFjet.NET.Page.ClipPath">
            
            
                 *  Clips the path.
                 </member>
        <member name="M:PDFjet.NET.Page.SetCropBox(System.Single,System.Single,System.Single,System.Single)">
            
            
                 * Sets the page CropBox.
                 * See page 77 of the PDF32000_2008.pdf specification.
                 *
                 * @param upperLeftX the top left X coordinate of the CropBox.
                 * @param upperLeftY the top left Y coordinate of the CropBox.
                 * @param lowerRightX the bottom right X coordinate of the CropBox.
                 * @param lowerRightY the bottom right Y coordinate of the CropBox.
                 </member>
        <member name="M:PDFjet.NET.Page.SetBleedBox(System.Single,System.Single,System.Single,System.Single)">
            
            
                 * Sets the page BleedBox.
                 * See page 77 of the PDF32000_2008.pdf specification.
                 *
                 * @param upperLeftX the top left X coordinate of the BleedBox.
                 * @param upperLeftY the top left Y coordinate of the BleedBox.
                 * @param lowerRightX the bottom right X coordinate of the BleedBox.
                 * @param lowerRightY the bottom right Y coordinate of the BleedBox.
                 </member>
        <member name="M:PDFjet.NET.Page.SetTrimBox(System.Single,System.Single,System.Single,System.Single)">
            
            
                 * Sets the page TrimBox.
                 * See page 77 of the PDF32000_2008.pdf specification.
                 *
                 * @param upperLeftX the top left X coordinate of the TrimBox.
                 * @param upperLeftY the top left Y coordinate of the TrimBox.
                 * @param lowerRightX the bottom right X coordinate of the TrimBox.
                 * @param lowerRightY the bottom right Y coordinate of the TrimBox.
                 </member>
        <member name="M:PDFjet.NET.Page.SetArtBox(System.Single,System.Single,System.Single,System.Single)">
            
            
                 * Sets the page ArtBox.
                 * See page 77 of the PDF32000_2008.pdf specification.
                 *
                 * @param upperLeftX the top left X coordinate of the ArtBox.
                 * @param upperLeftY the top left Y coordinate of the ArtBox.
                 * @param lowerRightX the bottom right X coordinate of the ArtBox.
                 * @param lowerRightY the bottom right Y coordinate of the ArtBox.
                 </member>
        <member name="M:PDFjet.NET.Page.Append(System.Byte[])">
            
            
                 *  Appends the specified array of bytes to the page.
                 </member>
        <member name="T:PDFjet.NET.PageLayout">
            
            
             *  Used to specify the PDF page layout.
             *
             </member>
        <member name="T:PDFjet.NET.PageMode">
            
            
             *  Used to specify the PDF page layout.
             *
             </member>
        <member name="T:PDFjet.NET.Paragraph">
            
            
             *  Used to create paragraph objects.
             *  See the TextColumn class for more information.
             *
             </member>
        <member name="M:PDFjet.NET.Paragraph.#ctor">
            
            
                 *  Constructor for creating paragraph objects.
                 *
                 </member>
        <member name="M:PDFjet.NET.Paragraph.Add(PDFjet.NET.TextLine)">
            
            
                 *  Adds a text line to this paragraph.
                 *
                 *  @param text the text line to add to this paragraph.
                 </member>
        <member name="M:PDFjet.NET.Paragraph.removeLastTextLine">
            
            
                 *  Removes the last text line added to this paragraph.
                 *
                 </member>
        <member name="M:PDFjet.NET.Paragraph.SetAlignment(System.Int32)">
            
            
                 *  Sets the alignment of the text in this paragraph.
                 *
                 *  @param alignment the alignment code.
                 *
                 *  <pre>Supported values: Align.LEFT, Align.RIGHT, Align.CENTER and Align.JUSTIFY.</pre>
                 </member>
        <member name="T:PDFjet.NET.Path">
            
            
             *  Used to create path objects.
             *  The path objects may consist of lines, splines or both.
             *
             *  Please see Example_02.
             </member>
        <member name="M:PDFjet.NET.Path.#ctor">
            
            
                 *  The default constructor.
                 *
                 *
                 </member>
        <member name="M:PDFjet.NET.Path.Add(PDFjet.NET.Point)">
            
            
                 *  Adds a point to this path.
                 *
                 *  @param point the point to add.
                 </member>
        <member name="M:PDFjet.NET.Path.SetPattern(System.String)">
            
            
                 *  Sets the line dash pattern for this path.
                 *
                 *  The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
                 *  It is specified by a dash array and a dash phase.
                 *  The elements of the dash array are positive numbers that specify the lengths of
                 *  alternating dashes and gaps.
                 *  The dash phase specifies the distance into the dash pattern at which to start the dash.
                 *  The elements of both the dash array and the dash phase are expressed in user space units.
                 *  <pre>
                 *  Examples of line dash patterns:
                 *
                 *      "[Array] Phase"     Appearance          Description
                 *      _______________     _________________   ____________________________________
                 *
                 *      "[] 0"              -----------------   Solid line
                 *      "[3] 0"             ---   ---   ---     3 units on, 3 units off, ...
                 *      "[2] 1"             -  --  --  --  --   1 on, 2 off, 2 on, 2 off, ...
                 *      "[2 1] 0"           -- -- -- -- -- --   2 on, 1 off, 2 on, 1 off, ...
                 *      "[3 5] 6"             ---     ---       2 off, 3 on, 5 off, 3 on, 5 off, ...
                 *      "[2 3] 11"          -   --   --   --    1 on, 3 off, 2 on, 3 off, 2 on, ...
                 *  </pre>
                 *
                 *  @param pattern the line dash pattern.
                 </member>
        <member name="M:PDFjet.NET.Path.SetWidth(System.Double)">
            
            
                 *  Sets the pen width that will be used to draw the lines and splines that are part of this path.
                 *
                 *  @param width the pen width.
                 </member>
        <member name="M:PDFjet.NET.Path.SetWidth(System.Single)">
            
            
                 *  Sets the pen width that will be used to draw the lines and splines that are part of this path.
                 *
                 *  @param width the pen width.
                 </member>
        <member name="M:PDFjet.NET.Path.SetColor(System.Int32)">
            
            
                 *  Sets the pen color that will be used to draw this path.
                 *
                 *  @param color the color is specified as an integer.
                 </member>
        <member name="M:PDFjet.NET.Path.SetClosePath(System.Boolean)">
            
            
                 *  Sets the close_path variable.
                 *
                 *  @param close_path if close_path is true a line will be draw between the first and last point of this path.
                 </member>
        <member name="M:PDFjet.NET.Path.SetFillShape(System.Boolean)">
            
            
                 *  Sets the fill_shape private variable. If fill_shape is true - the shape of the path will be filled with the current brush color.
                 *
                 *  @param fill_shape the fill_shape flag.
                 </member>
        <member name="M:PDFjet.NET.Path.SetLineCapStyle(System.Int32)">
            
            
                 *  Sets the line cap style.
                 *
                 *  @param style the cap style of this path. Supported values: Cap.BUTT, Cap.ROUND and Cap.PROJECTING_SQUARE
                 </member>
        <member name="M:PDFjet.NET.Path.GetLineCapStyle">
            
            
                 *  Returns the line cap style for this path.
                 *
                 *  @return the line cap style for this path.
                 </member>
        <member name="M:PDFjet.NET.Path.SetLineJoinStyle(System.Int32)">
            
            
                 *  Sets the line join style.
                 *
                 *  @param style the line join style code. Supported values: Join.MITER, Join.ROUND and Join.BEVEL
                 </member>
        <member name="M:PDFjet.NET.Path.GetLineJoinStyle">
            
            
                 *  Returns the line join style.
                 *
                 *  @return the line join style.
                 </member>
        <member name="M:PDFjet.NET.Path.PlaceIn(PDFjet.NET.Box)">
            
            
                 *  Places this path in the specified box at position (0.0, 0.0).
                 *
                 *  @param box the specified box.
                 </member>
        <member name="M:PDFjet.NET.Path.PlaceIn(PDFjet.NET.Box,System.Double,System.Double)">
            
            
                 *  Places the path inside the spacified box at coordinates (x_offset, y_offset) of the top left corner.
                 *
                 *  @param box the specified box.
                 *  @param x_offset the x_offset.
                 *  @param y_offset the y_offset.
                 </member>
        <member name="M:PDFjet.NET.Path.PlaceIn(PDFjet.NET.Box,System.Single,System.Single)">
            
            
                 *  Places the path inside the spacified box at coordinates (x_offset, y_offset) of the top left corner.
                 *
                 *  @param box the specified box.
                 *  @param x_offset the x_offset.
                 *  @param y_offset the y_offset.
                 </member>
        <member name="M:PDFjet.NET.Path.ScaleBy(System.Double)">
            
            
                 *  Scales the path using the specified factor.
                 *
                 *  @param factor the specified factor.
                 </member>
        <member name="M:PDFjet.NET.Path.ScaleBy(System.Single)">
            
            
                 *  Scales the path using the specified factor.
                 *
                 *  @param factor the specified factor.
                 </member>
        <member name="M:PDFjet.NET.Path.GetCurvePoints(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            
            
                 * Returns a list containing the start point, first control point, second control point and the end point of elliptical curve segment.
                 * Please see Example_18.
                 * 
                 * @param x the x coordinate of the center of the ellipse.
                 * @param y the y coordinate of the center of the ellipse.
                 * @param r1 the horizontal radius of the ellipse.
                 * @param r2 the vertical radius of the ellipse.
                 * @param segment the segment to draw - please see the Segment class.
                 * @return
                 * @throws Exception
                 </member>
        <member name="M:PDFjet.NET.Path.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this path on the page using the current selected color, pen width, line pattern and line join style.
                 *
                 *  @param page the page to draw this path on.
                 </member>
        <member name="T:PDFjet.NET.PDF">
            
            
             *  Used to create PDF objects that represent PDF documents.
             *
             *
             </member>
        <member name="M:PDFjet.NET.PDF.#ctor">
            
            
                 * The default constructor - use when reading PDF files.
                 * 
                 *
                 </member>
        <member name="M:PDFjet.NET.PDF.Flush">
            
            
                 *  Writes the PDF object to the output stream.
                 *  Does not close the underlying output stream.
                 </member>
        <member name="M:PDFjet.NET.PDF.Close">
            
            
                 *  Writes the PDF object to the output stream and closes it.
                 </member>
        <member name="M:PDFjet.NET.PDF.SetTitle(System.String)">
            
            
                 *  Set the "Title" document property of the PDF file.
                 *  @param title The title of this document.
                 </member>
        <member name="M:PDFjet.NET.PDF.SetSubject(System.String)">
            
            
                 *  Set the "Subject" document property of the PDF file.
                 *  @param subject The subject of this document.
                 </member>
        <member name="M:PDFjet.NET.PDF.SetAuthor(System.String)">
            
            
                 *  Set the "Author" document property of the PDF file.
                 *  @param author The author of this document.
                 </member>
        <member name="M:PDFjet.NET.PDF.ToInt(System.Byte[],System.Int32,System.Int32)">
            
            
                 * Converts an array of bytes to an integer.
                 * @param buf byte[]
                 * @return int
                 </member>
        <member name="T:PDFjet.NET.PDFobj">
            
            
             *  Used to create Java or .NET objects that represent the objects in PDF document. 
             *  See the PDF specification for more information.
             *
             </member>
        <member name="M:PDFjet.NET.PDFobj.#ctor(System.Int32)">
            
            
                 *  Used to create Java or .NET objects that represent the objects in PDF document. 
                 *  See the PDF specification for more information.
                 *  Also see Example_19.
                 *
                 *  @param offset the object offset in the offsets table.
                 </member>
        <member name="M:PDFjet.NET.PDFobj.GetValue(System.String)">
            
            
                 *  Returns the parameter value given the specified key.
                 *
                 *  @param key the specified key.
                 *
                 *  @return the value.
                 </member>
        <member name="M:PDFjet.NET.PNGImage.#ctor(System.IO.Stream)">
            
            
                 * Used to embed PNG images in the PDF document.
                 *
                 </member>
        <member name="T:PDFjet.NET.Point">
            
            
             *  Used to create point objects with different shapes and draw them on a page.
             *  Please note: When we are mentioning (x, y) coordinates of a point - we are talking about the coordinates of the center of the point.
             *
             *  Please see Example_05.
             </member>
        <member name="M:PDFjet.NET.Point.#ctor">
            
            
                 *  The default constructor.
                 *
                 </member>
        <member name="M:PDFjet.NET.Point.#ctor(System.Double,System.Double)">
            
            
                 *  Constructor for creating point objects.
                 *
                 *  @param x the x coordinate of this point when drawn on the page.
                 *  @param y the y coordinate of this point when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Point.#ctor(System.Single,System.Single)">
            
            
                 *  Constructor for creating point objects.
                 *
                 *  @param x the x coordinate of this point when drawn on the page.
                 *  @param y the y coordinate of this point when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Point.#ctor(System.Double,System.Double,System.Boolean)">
            
            
                 *  Constructor for creating point objects.
                 *
                 *  @param x the x coordinate of this point when drawn on the page.
                 *  @param y the y coordinate of this point when drawn on the page.
                 *  @param isControlPoint true if this point is one of the points specifying a curve.
                 </member>
        <member name="M:PDFjet.NET.Point.#ctor(System.Single,System.Single,System.Boolean)">
            
            
                 *  Constructor for creating point objects.
                 *
                 *  @param x the x coordinate of this point when drawn on the page.
                 *  @param y the y coordinate of this point when drawn on the page.
                 *  @param isControlPoint true if this point is one of the points specifying a curve.
                 </member>
        <member name="M:PDFjet.NET.Point.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position (x, y) of this point.
                 *
                 *  @param x the x coordinate of this point when drawn on the page.
                 *  @param y the y coordinate of this point when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Point.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position (x, y) of this point.
                 *
                 *  @param x the x coordinate of this point when drawn on the page.
                 *  @param y the y coordinate of this point when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Point.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location (x, y) of this point.
                 *
                 *  @param x the x coordinate of this point when drawn on the page.
                 *  @param y the y coordinate of this point when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Point.SetX(System.Double)">
            
            
                 *  Sets the x coordinate of this point.
                 *
                 *  @param x the x coordinate of this point when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Point.SetX(System.Single)">
            
            
                 *  Sets the x coordinate of this point.
                 *
                 *  @param x the x coordinate of this point when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Point.GetX">
            
            
                 *  Returns the x coordinate of this point.
                 *
                 *  @return the x coordinate of this point.
                 </member>
        <member name="M:PDFjet.NET.Point.SetY(System.Double)">
            
            
                 *  Sets the y coordinate of this point.
                 *
                 *  @param y the y coordinate of this point when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Point.SetY(System.Single)">
            
            
                 *  Sets the y coordinate of this point.
                 *
                 *  @param y the y coordinate of this point when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.Point.GetY">
            
            
                 *  Returns the y coordinate of this point.
                 *
                 *  @return the y coordinate of this point.
                 </member>
        <member name="M:PDFjet.NET.Point.SetRadius(System.Double)">
            
            
                 *  Sets the radius of this point.
                 *
                 *  @param r the radius.
                 </member>
        <member name="M:PDFjet.NET.Point.SetRadius(System.Single)">
            
            
                 *  Sets the radius of this point.
                 *
                 *  @param r the radius.
                 </member>
        <member name="M:PDFjet.NET.Point.GetRadius">
            
            
                 *  Returns the radius of this point.
                 *
                 *  @return the radius of this point.
                 </member>
        <member name="M:PDFjet.NET.Point.SetShape(System.Int32)">
            
            
                 *  Sets the shape of this point.
                 *
                 *  @param shape the shape of this point. Supported values:
                 *  <pre>
                 *  Point.INVISIBLE
                 *  Point.CIRCLE
                 *  Point.DIAMOND
                 *  Point.BOX
                 *  Point.PLUS
                 *  Point.H_DASH
                 *  Point.V_DASH
                 *  Point.MULTIPLY
                 *  Point.STAR
                 *  Point.X_MARK
                 *  Point.UP_ARROW
                 *  Point.DOWN_ARROW
                 *  Point.LEFT_ARROW
                 *  Point.RIGHT_ARROW
                 *  </pre>
                 </member>
        <member name="M:PDFjet.NET.Point.GetShape">
            
            
                 *  Returns the point shape code value.
                 *
                 *  @return the shape code value.
                 </member>
        <member name="M:PDFjet.NET.Point.SetFillShape(System.Boolean)">
            
            
                 *  Sets the private fillShape variable.
                 *
                 *  @param fillShape if true - fill the point with the specified brush color.
                 </member>
        <member name="M:PDFjet.NET.Point.GetFillShape">
            
            
                 *  Returns the value of the fillShape private variable.
                 *
                 *  @return the value of the private fillShape variable.
                 </member>
        <member name="M:PDFjet.NET.Point.SetColor(System.Int32)">
            
            
                 *  Sets the pen color for this point.
                 *
                 *  @param color the color specified as an integer.
                 </member>
        <member name="M:PDFjet.NET.Point.GetColor">
            
            
                 *  Returns the point color as an integer.
                 *
                 *  @return the color.
                 </member>
        <member name="M:PDFjet.NET.Point.SetLineWidth(System.Double)">
            
            
                 *  Sets the width of the lines of this point.
                 *
                 *  @param lineWidth the line width.
                 </member>
        <member name="M:PDFjet.NET.Point.SetLineWidth(System.Single)">
            
            
                 *  Sets the width of the lines of this point.
                 *
                 *  @param lineWidth the line width.
                 </member>
        <member name="M:PDFjet.NET.Point.GetLineWidth">
            
            
                 *  Returns the width of the lines used to draw this point.
                 *
                 *  @return the width of the lines used to draw this point.
                 </member>
        <member name="M:PDFjet.NET.Point.SetLinePattern(System.String)">
            
            
                 *
                 *  The line dash pattern controls the pattern of dashes and gaps used to stroke paths.
                 *  It is specified by a dash array and a dash phase.
                 *  The elements of the dash array are positive numbers that specify the lengths of
                 *  alternating dashes and gaps.
                 *  The dash phase specifies the distance into the dash pattern at which to start the dash.
                 *  The elements of both the dash array and the dash phase are expressed in user space units.
                 *  <pre>
                 *  Examples of line dash patterns:
                 *
                 *      "[Array] Phase"     Appearance          Description
                 *      _______________     _________________   ____________________________________
                 *
                 *      "[] 0"              -----------------   Solid line
                 *      "[3] 0"             ---   ---   ---     3 units on, 3 units off, ...
                 *      "[2] 1"             -  --  --  --  --   1 on, 2 off, 2 on, 2 off, ...
                 *      "[2 1] 0"           -- -- -- -- -- --   2 on, 1 off, 2 on, 1 off, ...
                 *      "[3 5] 6"             ---     ---       2 off, 3 on, 5 off, 3 on, 5 off, ...
                 *      "[2 3] 11"          -   --   --   --    1 on, 3 off, 2 on, 3 off, 2 on, ...
                 *  </pre>
                 *
                 *  @param linePattern the line dash pattern.
                 </member>
        <member name="M:PDFjet.NET.Point.GetLinePattern">
            
            
                 *  Returns the line dash pattern.
                 *
                 *  @return the line dash pattern.
                 </member>
        <member name="M:PDFjet.NET.Point.SetDrawLineTo(System.Boolean)">
            
            
                 *  @deprecated
                 *  Please use the setStartOfPath method.
                 *  See Example_40.
                 *
                 *  @param drawLineTo the boolean value.
                 </member>
        <member name="M:PDFjet.NET.Point.SetStartOfPath">
            
            
                 *  Sets this point as the start of a path that will be drawn on the chart.
                 *
                 </member>
        <member name="M:PDFjet.NET.Point.SetURIAction(System.String)">
            
            
                 *  Sets the URI for the "click point" action.
                 *
                 *  @param uri the URI
                 </member>
        <member name="M:PDFjet.NET.Point.GetURIAction">
            
            
                 *  Returns the URI for the "click point" action.
                 *
                 *  @return the URI for the "click point" action.
                 </member>
        <member name="M:PDFjet.NET.Point.SetText(System.String)">
            
            
                 *  Sets the point text.
                 *
                 *  @param text the text.
                 </member>
        <member name="M:PDFjet.NET.Point.GetText">
            
            
                 *  Returns the text associated with this point.
                 *
                 *  @return the text.
                 </member>
        <member name="M:PDFjet.NET.Point.SetTextColor(System.Int32)">
            
            
                 *  Sets the point's text color.
                 *
                 *  @param textColor the text color.
                 </member>
        <member name="M:PDFjet.NET.Point.GetTextColor">
            
            
                 *  Returns the point's text color.
                 *
                 *  @return the text color.
                 </member>
        <member name="M:PDFjet.NET.Point.SetTextDirection(System.Int32)">
            
            
                 *  Sets the point's text direction.
                 *
                 *  @param textDirection the text direction.
                 </member>
        <member name="M:PDFjet.NET.Point.GetTextDirection">
            
            
                 *  Returns the point's text direction.
                 *
                 *  @return the text direction.
                 </member>
        <member name="M:PDFjet.NET.Point.SetAlignment(System.Int32)">
            
            
                 *  Sets the point alignment.
                 *
                 *  @param align the alignment value.
                 </member>
        <member name="M:PDFjet.NET.Point.GetAlignment">
            
            
                 *  Returns the point alignment.
                 *
                 *  @return align the alignment value.
                 </member>
        <member name="M:PDFjet.NET.Point.PlaceIn(PDFjet.NET.Box)">
            
            
                 *  Places this point in the specified box at position (0f, 0f).
                 *
                 *  @param box the specified box.
                 </member>
        <member name="M:PDFjet.NET.Point.PlaceIn(PDFjet.NET.Box,System.Double,System.Double)">
            
            
                 *  Places this point in the specified box.
                 *
                 *  @param box the specified box.
                 *  @param x_offset the x offset from the top left corner of the box.
                 *  @param y_offset the y offset from the top left corner of the box.
                 </member>
        <member name="M:PDFjet.NET.Point.PlaceIn(PDFjet.NET.Box,System.Single,System.Single)">
            
            
                 *  Places this point in the specified box.
                 *
                 *  @param box the specified box.
                 *  @param x_offset the x offset from the top left corner of the box.
                 *  @param y_offset the y offset from the top left corner of the box.
                 </member>
        <member name="M:PDFjet.NET.Point.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this point on the specified page.
                 *
                 *  @param page the page to draw this point on.
                 </member>
        <member name="T:PDFjet.NET.Polynomial">
            
            
             * Polynomial
             * @author Kazuhiko Arase
             </member>
        <member name="T:PDFjet.NET.QRCode">
            
            
             * Used to create 2D QR Code barcodes. Please see Example_20.
             * 
             * @author Kazuhiko Arase
             </member>
        <member name="M:PDFjet.NET.QRCode.#ctor(System.String,System.Int32)">
            
            
                 * Used to create 2D QR Code barcodes.
                 * 
                 * @param str the string to encode.
                 * @param errorCorrectLevel the desired error correction level.
                 * @throws UnsupportedEncodingException
                 </member>
        <member name="M:PDFjet.NET.QRCode.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position where this barcode will be drawn on the page.
                 *
                 *  @param x the x coordinate of the top left corner of the barcode.
                 *  @param y the y coordinate of the top left corner of the barcode.
                 </member>
        <member name="M:PDFjet.NET.QRCode.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position where this barcode will be drawn on the page.
                 *
                 *  @param x the x coordinate of the top left corner of the barcode.
                 *  @param y the y coordinate of the top left corner of the barcode.
                 </member>
        <member name="M:PDFjet.NET.QRCode.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location where this barcode will be drawn on the page.
                 *
                 *  @param x the x coordinate of the top left corner of the barcode.
                 *  @param y the y coordinate of the top left corner of the barcode.
                 </member>
        <member name="M:PDFjet.NET.QRCode.SetModuleLength(System.Double)">
            
            
                 *  Sets the module length of this barcode.
                 *  The default value is 2.0f
                 *
                 *  @param moduleLength the specified module length.
                 </member>
        <member name="M:PDFjet.NET.QRCode.SetModuleLength(System.Single)">
            
            
                 *  Sets the module length of this barcode.
                 *  The default value is 2.0f
                 *
                 *  @param moduleLength the specified module length.
                 </member>
        <member name="M:PDFjet.NET.QRCode.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this barcode on the specified page.
                 *
                 *  @param page the specified page.
                 </member>
        <member name="T:PDFjet.NET.QRMath">
            
            
             * QRMath
             * @author Kazuhiko Arase
             </member>
        <member name="T:PDFjet.NET.QRUtil">
            
            
             * QRUtil
             * @author Kazuhiko Arase
             </member>
        <member name="T:PDFjet.NET.RadioButton">
            
            
             *  Creates a RadioButton, which can be set selected or unselected.
             *
             </member>
        <member name="M:PDFjet.NET.RadioButton.#ctor(PDFjet.NET.Font,System.String)">
            
            
                 *  Creates a RadioButton that is not selected.
                 *
                 </member>
        <member name="M:PDFjet.NET.RadioButton.SetFontSize(System.Single)">
            
            
                 *  Sets the font size to use for this text line.
                 *
                 *  @param fontSize the fontSize to use.
                 *  @return this RadioButton.
                 </member>
        <member name="M:PDFjet.NET.RadioButton.SetPosition(System.Single,System.Single)">
            
            
                 *  Set the x,y position on the Page.
                 *
                 *  @param x the x coordinate on the Page.
                 *  @param y the y coordinate on the Page.
                 *  @return this RadioButton.
                 </member>
        <member name="M:PDFjet.NET.RadioButton.SetLocation(System.Single,System.Single)">
            
            
                 *  Set the x,y location on the Page.
                 *
                 *  @param x the x coordinate on the Page.
                 *  @param y the y coordinate on the Page.
                 *  @return this RadioButton.
                 </member>
        <member name="M:PDFjet.NET.RadioButton.Select(System.Boolean)">
            
            
                 *  Selects or deselects this radio button.
                 *
                 *  @param selected the selection flag.
                 *  @return this RadioButton.
                 </member>
        <member name="M:PDFjet.NET.RadioButton.SetURIAction(System.String)">
            
            
                 *  Sets the URI for the "click text line" action.
                 *
                 *  @param uri the URI.
                 *  @return this RadioButton.
                 </member>
        <member name="M:PDFjet.NET.RadioButton.SetAltDescription(System.String)">
            
            
                 *  Sets the alternate description of this radio button.
                 *
                 *  @param altDescription the alternate description of the radio button.
                 *  @return this RadioButton.
                 </member>
        <member name="M:PDFjet.NET.RadioButton.SetActualText(System.String)">
            
            
                 *  Sets the actual text for this radio button.
                 *
                 *  @param actualText the actual text for the radio button.
                 *  @return this RadioButton.
                 </member>
        <member name="M:PDFjet.NET.RadioButton.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this RadioButton on the specified Page.
                 *
                 *  @param page the Page where the RadioButton is to be drawn.
                 </member>
        <member name="T:PDFjet.NET.RSBlock">
            
            
             * RSBlock
             * @author Kazuhiko Arase
             </member>
        <member name="T:PDFjet.NET.Segment">
            
            
             *  Used to specify the segment of Ellipse or Circle to draw.
             *  See Example_18
             </member>
        <member name="T:PDFjet.NET.StructElem">
            
            
             *  Used to specify the text alignment in paragraphs.
             *  See the Paragraph class for more details.
             *
             *
             </member>
        <member name="T:PDFjet.NET.Table">
            
            
             *  Used to create table objects and draw them on a page.
             *
             *  Please see Example_08.
             </member>
        <member name="M:PDFjet.NET.Table.#ctor">
            
            
                 *  Create a table object.
                 *
                 </member>
        <member name="M:PDFjet.NET.Table.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position (x, y) of the top left corner of this table on the page.
                 *
                 *  @param x the x coordinate of the top left point of the table.
                 *  @param y the y coordinate of the top left point of the table.
                 </member>
        <member name="M:PDFjet.NET.Table.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position (x, y) of the top left corner of this table on the page.
                 *
                 *  @param x the x coordinate of the top left point of the table.
                 *  @param y the y coordinate of the top left point of the table.
                 </member>
        <member name="M:PDFjet.NET.Table.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location (x, y) of the top left corner of this table on the page.
                 *
                 *  @param x the x coordinate of the top left point of the table.
                 *  @param y the y coordinate of the top left point of the table.
                 </member>
        <member name="M:PDFjet.NET.Table.SetBottomMargin(System.Double)">
            
            
                 *  Sets the bottom margin for this table.
                 *
                 *  @param bottom_margin the margin.
                 </member>
        <member name="M:PDFjet.NET.Table.SetBottomMargin(System.Single)">
            
            
                 *  Sets the bottom margin for this table.
                 *
                 *  @param bottom_margin the margin.
                 </member>
        <member name="M:PDFjet.NET.Table.SetData(System.Collections.Generic.List{System.Collections.Generic.List{PDFjet.NET.Cell}})">
            
            
                 *  Sets the table data.
                 *
                 *  @param tableData the table data.
                 </member>
        <member name="M:PDFjet.NET.Table.SetData(System.Collections.Generic.List{System.Collections.Generic.List{PDFjet.NET.Cell}},System.Int32)">
            
            
                 *  Sets the table data and specifies the number of header rows in this data.
                 *
                 *  @param tableData the table data.
                 *  @param numOfHeaderRows the number of header rows in this data.
                 </member>
        <member name="M:PDFjet.NET.Table.AutoAdjustColumnWidths">
            
            
                 *  Auto adjusts the widths of all columns so that they are just wide enough to hold the text without truncation.
                 </member>
        <member name="M:PDFjet.NET.Table.RightAlignNumbers">
            
            
                 *  Sets the alignment of the numbers to the right.
                 </member>
        <member name="M:PDFjet.NET.Table.RemoveLineBetweenRows(System.Int32,System.Int32)">
            
            
                 *  Removes the horizontal lines between the rows from index1 to index2.
                 </member>
        <member name="M:PDFjet.NET.Table.SetTextAlignInColumn(System.Int32,System.Int32)">
            
            
                 *  Sets the text alignment in the specified column.
                 *
                 *  @param index the index of the specified column.
                 *  @param alignment the specified alignment. Supported values: Align.LEFT, Align.RIGHT, Align.CENTER and Align.JUSTIFY.
                 </member>
        <member name="M:PDFjet.NET.Table.SetTextColorInColumn(System.Int32,System.Int32)">
            
            
                 *  Sets the color of the text in the specified column.
                 *
                 *  @param index the index of the specified column.
                 *  @param color the color specified as an integer.
                 </member>
        <member name="M:PDFjet.NET.Table.SetFontInColumn(System.Int32,PDFjet.NET.Font)">
            
            
                 *  Sets the font for the specified column.
                 *
                 *  @param index the column index.
                 *  @param font the font.
                 </member>
        <member name="M:PDFjet.NET.Table.SetTextColorInRow(System.Int32,System.Int32)">
            
            
                 *  Sets the color of the text in the specified row.
                 *
                 *  @param index the index of the specified row.
                 *  @param color the color specified as an integer.
                 </member>
        <member name="M:PDFjet.NET.Table.SetFontInRow(System.Int32,PDFjet.NET.Font)">
            
            
                 *  Sets the font for the specified row.
                 *
                 *  @param index the row index.
                 *  @param font the font.
                 </member>
        <member name="M:PDFjet.NET.Table.SetColumnWidth(System.Int32,System.Double)">
            
            
                 *  Sets the width of the column with the specified index.
                 *
                 *  @param index the index of specified column.
                 *  @param width the specified width.
                 </member>
        <member name="M:PDFjet.NET.Table.GetColumnWidth(System.Int32)">
            
            
                 *  Returns the column width of the column at the specified index.
                 *
                 *  @param index the index of the column.
                 *  @return the width of the column.
                 </member>
        <member name="M:PDFjet.NET.Table.GetCellAt(System.Int32,System.Int32)">
            
            
                 *  Returns the cell at the specified row and column.
                 *
                 *  @param row the specified row.
                 *  @param col the specified column.
                 *
                 *  @return the cell at the specified row and column.
                 </member>
        <member name="M:PDFjet.NET.Table.GetCellAtRowColumn(System.Int32,System.Int32)">
            
            
                 *  Returns the cell at the specified row and column.
                 *
                 *  @param row the specified row.
                 *  @param col the specified column.
                 *
                 *  @return the cell at the specified row and column.
                 </member>
        <member name="M:PDFjet.NET.Table.GetRow(System.Int32)">
            
            
                 *  Returns a list of cell for the specified row.
                 *
                 *  @param index the index of the specified row.
                 *
                 *  @return the list of cells.
                 </member>
        <member name="M:PDFjet.NET.Table.GetColumn(System.Int32)">
            
            
                 *  Returns a list of cell for the specified column.
                 *
                 *  @param index the index of the specified column.
                 *
                 *  @return the list of cells.
                 </member>
        <member name="M:PDFjet.NET.Table.GetNumberOfPages(PDFjet.NET.Page)">
            
            
                 *  Returns the total number of pages that are required to draw this table on.
                 *
                 *  @param page the type of pages we are drawing this table on.
                 *
                 *  @return the number of pages.
                 </member>
        <member name="M:PDFjet.NET.Table.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this table on the specified page.
                 *
                 *  @param page the page to draw this table on.
                 *  @param draw if false - do not draw the table. Use to only find out where the table ends.
                 *
                 *  @return Point the point on the page where to draw the next component.
                 </member>
        <member name="M:PDFjet.NET.Table.ImprovedDrawOn(PDFjet.NET.Page,System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            
            
                 *  Draws this table on the specified page.
                 *
                 *  @param page the page to draw this table on.
                 *  @param draw if false - do not draw the table. Use to only find out where the table ends.
                 *  @param p_textlist Lista de listas de strings a serem renderizadas.
                 *
                 *  @return Point the point on the page where to draw the next component.
                 </member>
        <member name="M:PDFjet.NET.Table.ImprovedDrawOn(PDFjet.NET.Page,System.IO.StreamReader)">
            
            
                 *  Draws this table on the specified page.
                 *
                 *  @param page the page to draw this table on.
                 *  @param draw if false - do not draw the table. Use to only find out where the table ends.
                 *  @param p_file Arquivo de onde ler as strings a serem renderizadas.
                 *
                 *  @return Point the point on the page where to draw the next component.
                 </member>
        <member name="M:PDFjet.NET.Table.DrawOn(PDFjet.NET.Page,System.Boolean)">
            
            
                 *  Draws this table on the specified page.
                 *
                 *  @param page the page to draw this table on.
                 *  @param draw
                 *
                 *  @return Point the point on the page where to draw the next component.
                 </member>
        <member name="M:PDFjet.NET.Table.ImprovedDrawOn(PDFjet.NET.Page,System.Boolean,System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            
            
                 *  Draws this table on the specified page.
                 *
                 *  @param page the page to draw this table on.
                 *  @param draw
                 *  @param p_textlist Lista de listas de strings a serem renderizadas.
                 *
                 *  @return Point the point on the page where to draw the next component.
                 </member>
        <member name="M:PDFjet.NET.Table.ImprovedDrawOn(PDFjet.NET.Page,System.Boolean,System.IO.StreamReader)">
            
            
                 *  Draws this table on the specified page.
                 *
                 *  @param page the page to draw this table on.
                 *  @param draw
                 *  @param p_file Arquivo de onde ler as strings a serem renderizadas.
                 *
                 *  @return Point the point on the page where to draw the next component.
                 </member>
        <member name="M:PDFjet.NET.Table.HasMoreData">
            
            
                 *  Returns true if the table contains more data that needs to be drawn on a page.
                 </member>
        <member name="M:PDFjet.NET.Table.GetWidth">
            
            
                 *  Returns the width of this table when drawn on a page.
                 *
                 *  @return the width of this table.
                 </member>
        <member name="M:PDFjet.NET.Table.GetRowsRendered">
            
            
                 *  Returns the number of data rows that have been rendered so far.
                 *
                 *  @return the number of data rows that have been rendered so far.
                 </member>
        <member name="M:PDFjet.NET.Table.WrapAroundCellText">
            
            
                 *  Wraps around the text in all cells so it fits the column width.
                 *  This method should be called after all calls to SetColumnWidth and AutoAdjustColumnWidths.
                 *
                 </member>
        <member name="M:PDFjet.NET.Table.SetNoCellBorders">
            
            
                 *  Sets all table cells borders to <strong>false</strong>.
                 *
                 </member>
        <member name="M:PDFjet.NET.Table.SetCellBordersColor(System.Int32)">
            
            
                 *  Sets the color of the cell border lines.
                 *
                 *  @param color the color of the cell border lines.
                 </member>
        <member name="M:PDFjet.NET.Table.SetCellBordersWidth(System.Single)">
            
            
                 *  Sets the width of the cell border lines.
                 *
                 *  @param width the width of the cell border lines.
                 </member>
        <member name="M:PDFjet.NET.Table.ResetRenderedPagesCount">
            
            
                 * Resets the rendered pages count.
                 * Call this method if you have to draw this table more than one time.
                 </member>
        <member name="T:PDFjet.NET.Tabloid">
            
            
             *  Used to specify PDF page with size <strong>Tabloid</strong>.
             *  For more information about the page size classes - A3, A4, A5, B5, Executive, Letter, Legal and Tabloid - see the Page class.
             *
             </member>
        <member name="T:PDFjet.NET.TextAlign">
            
            
             *  Used to specify the text alignment in paragraphs.
             *  See the Paragraph class for more details.
             *
             *
             </member>
        <member name="T:PDFjet.NET.TextBox">
            
            
             *  A box containing line-wrapped text.
             *  
             *  <p>Defaults:<br />
             *  x = 0f<br />
             *  y = 0f<br />
             *  width = 300f<br />
             *  height = 200f<br />
             *  alignment = Align.LEFT<br />
             *  valign = Align.TOP<br />
             *  spacing = 3f<br />
             *  margin = 1f<br />
             *  </p>
             *  
             *  This class was originally developed by Ronald Bourret.
             *  It was completely rewritten in 2013 by Eugene Dragoev.
             </member>
        <member name="M:PDFjet.NET.TextBox.#ctor(PDFjet.NET.Font)">
            
            
                 *  Creates a text box and sets the font.
                 *
                 *  @param font the font.
                 </member>
        <member name="M:PDFjet.NET.TextBox.#ctor(PDFjet.NET.Font,System.String,System.Double,System.Double)">
            
            
                 *  Creates a text box and sets the font and the text.
                 *
                 *  @param font the font.
                 *  @param text the text.
                 *  @param width the width.
                 *  @param height the height.
                 </member>
        <member name="M:PDFjet.NET.TextBox.#ctor(PDFjet.NET.Font,System.String,System.Single,System.Single)">
            
            
                 *  Creates a text box and sets the font and the text.
                 *
                 *  @param font the font.
                 *  @param text the text.
                 *  @param width the width.
                 *  @param height the height.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetFont(PDFjet.NET.Font)">
            
            
                 *  Sets the font for this text box.
                 *
                 *  @param font the font.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetFont">
            
            
                 *  Returns the font used by this text box.
                 *
                 *  @return the font.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetText(System.String)">
            
            
                 *  Sets the text box text.
                 *
                 *  @param text the text box text.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetText">
            
            
                 *  Returns the text box text.
                 *
                 *  @return the text box text.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position where this text box will be drawn on the page.
                 *
                 *  @param x the x coordinate of the top left corner of the text box.
                 *  @param y the y coordinate of the top left corner of the text box.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position where this text box will be drawn on the page.
                 *
                 *  @param x the x coordinate of the top left corner of the text box.
                 *  @param y the y coordinate of the top left corner of the text box.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location where this text box will be drawn on the page.
                 *
                 *  @param x the x coordinate of the top left corner of the text box.
                 *  @param y the y coordinate of the top left corner of the text box.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetX">
            
            
                 *  Gets the x coordinate where this text box will be drawn on the page.
                 *
                 *  @return the x coordinate of the top left corner of the text box.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetY">
            
            
                 *  Gets the y coordinate where this text box will be drawn on the page.
                 *
                 *  @return the y coordinate of the top left corner of the text box.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetWidth(System.Double)">
            
            
                 *  Sets the width of this text box.
                 *
                 *  @param width the specified width.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetWidth(System.Single)">
            
            
                 *  Sets the width of this text box.
                 *
                 *  @param width the specified width.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetWidth">
            
            
                 *  Returns the text box width.
                 *
                 *  @return the text box width.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetHeight(System.Double)">
            
            
                 *  Sets the height of this text box.
                 *
                 *  @param height the specified height.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetHeight(System.Single)">
            
            
                 *  Sets the height of this text box.
                 *
                 *  @param height the specified height.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetHeight">
            
            
                 *  Returns the text box height.
                 *
                 *  @return the text box height.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetMargin(System.Double)">
            
            
                 *  Sets the margin of this text box.
                 *
                 *  @param margin the margin between the text and the box
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetMargin(System.Single)">
            
            
                 *  Sets the margin of this text box.
                 *
                 *  @param margin the margin between the text and the box
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetMargin">
            
            
                 *  Returns the text box margin.
                 *
                 *  @return the margin between the text and the box
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetLineWidth(System.Double)">
            
            
                 *  Sets the border line width.
                 *
                 *  @param lineWidth float
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetLineWidth(System.Single)">
            
            
                 *  Sets the border line width.
                 *
                 *  @param lineWidth float
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetLineWidth">
            
            
                 *  Returns the border line width.
                 *
                 *  @return float the line width.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetSpacing(System.Double)">
            
            
                 *  Sets the spacing between lines of text.
                 *
                 *  @param spacing the spacing
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetSpacing(System.Single)">
            
            
                 *  Sets the spacing between lines of text.
                 *
                 *  @param spacing the spacing
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetSpacing">
            
            
                 *  Returns the spacing between lines of text.
                 *
                 *  @return the spacing.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetBgColor(System.Int32)">
            
            
                 *  Sets the background to the specified color.
                 *
                 *  @param color the color specified as 0xRRGGBB integer.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetBgColor(System.Int32[])">
            
            
                 *  Sets the background to the specified color.
                 *
                 *  @param color the color specified as array of integer values from 0x00 to 0xFF.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetBgColor(System.Double[])">
            
            
                 *  Sets the background to the specified color.
                 *
                 *  @param color the color specified as array of double values from 0.0 to 1.0.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetBgColor">
            
            
                 *  Returns the background color.
                 *
                 * @return int the color as 0xRRGGBB integer.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetFgColor(System.Int32)">
            
            
                 *  Sets the pen and brush colors to the specified color.
                 *
                 *  @param color the color specified as 0xRRGGBB integer.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetFgColor(System.Int32[])">
            
            
                 *  Sets the pen and brush colors to the specified color.
                 *
                 *  @param color the color specified as 0xRRGGBB integer.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetFgColor(System.Double[])">
            
            
                 *  Sets the foreground pen and brush colors to the specified color.
                 *
                 *  @param color the color specified as an array of double values from 0.0 to 1.0.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetPenColor(System.Int32)">
            
            
                 *  Sets the pen color.
                 *
                 *  @param color the color specified as 0xRRGGBB integer.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetPenColor(System.Int32[])">
            
            
                 *  Sets the pen color.
                 *
                 *  @param color the color specified as an array of int values from 0x00 to 0xFF.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetPenColor(System.Double[])">
            
            
                 *  Sets the pen color.
                 *
                 *  @param color the color specified as an array of double values from 0.0 to 1.0.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetPenColor">
            
            
                 *  Returns the pen color as 0xRRGGBB integer.
                 *
                 * @return int the pen color.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetBrushColor(System.Int32)">
            
            
                 *  Sets the brush color.
                 *
                 *  @param color the color specified as 0xRRGGBB integer.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetBrushColor(System.Int32[])">
            
            
                 *  Sets the brush color.
                 *
                 *  @param color the color specified as an array of int values from 0x00 to 0xFF.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetBrushColor(System.Double[])">
            
            
                 *  Sets the brush color.
                 *
                 *  @param color the color specified as an array of double values from 0.0 to 1.0.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetBrushColor">
            
            
                 * Returns the brush color.
                 *
                 * @return int the brush color specified as 0xRRGGBB integer.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetBorder(System.Int32,System.Boolean)">
            
            
                 *  Sets the TextBox border object.
                 *
                 *  @param border the border object.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetBorder(System.Int32)">
            
            
                 *  Returns the text box border.
                 *
                 *  @return boolean the text border object.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetNoBorders">
            
            
                 *  Sets all borders to be invisible.
                 *  This cell will have no borders when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetTextAlignment(System.Int32)">
            
            
                 *  Sets the cell text alignment.
                 *
                 *  @param alignment the alignment code.
                 *  Supported values: Align.LEFT, Align.RIGHT and Align.CENTER.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetTextAlignment">
            
            
                 *  Returns the text alignment.
                 *
                 *  @return alignment the alignment code. Supported values: Align.LEFT, Align.RIGHT and Align.CENTER.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetUnderline(System.Boolean)">
            
            
                 *  Sets the underline variable.
                 *  If the value of the underline variable is 'true' - the text is underlined.
                 *
                 *  @param underline the underline flag.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetUnderline">
            
            
                 *  Whether the text will be underlined.
                 *
                 *  @return whether the text will be underlined
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetStrikeout(System.Boolean)">
            
            
                 *  Sets the srikeout flag.
                 *  In the flag is true - draw strikeout line through the text.
                 *
                 *  @param strikeout the strikeout flag.
                 </member>
        <member name="M:PDFjet.NET.TextBox.GetStrikeout">
            
            
                 *  Returns the strikeout flag.
                 *
                 *  @return boolean the strikeout flag.
                 </member>
        <member name="M:PDFjet.NET.TextBox.SetVerticalAlignment(System.Int32)">
            
            
                 *  Sets the vertical alignment of the text in this TextBox.
                 *
                 *  @param alignment - valid values are TextAlign.TOP, TextAlign.BOTTOM and TextAlign.CENTER
                 </member>
        <member name="M:PDFjet.NET.TextBox.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this text box on the specified page.
                 *
                 </member>
        <member name="T:PDFjet.NET.TextColumn">
            
            
             *  Used to create text column objects and draw them on a page.
             *
             *  Please see Example_10 and Example_29.
             </member>
        <member name="M:PDFjet.NET.TextColumn.#ctor">
            
            
                 *  Create a text column object.
                 *
                 </member>
        <member name="M:PDFjet.NET.TextColumn.#ctor(System.Int32)">
            
            
                 *  Create a text column object and set the rotation angle.
                 *
                 *  @param rotateByDegrees the specified rotation angle in degrees.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetLineBetweenParagraphs(System.Boolean)">
            
            
                 *  Sets the lineBetweenParagraphs private variable value.
                 *  If the value is set to true - an empty line will be inserted between the current and next paragraphs.
                 *
                 *  @param lineBetweenParagraphs the specified bool value.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position of this text column on the page.
                 *
                 *  @param x the x coordinate of the top left corner of this text column when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this text column when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position of this text column on the page.
                 *
                 *  @param x the x coordinate of the top left corner of this text column when drawn on the page.
                 *  @param y the y coordinate of the top left corner of this text column when drawn on the page.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location of this text column on the page.
                 *
                 *  @param x the x coordinate of the top left corner.
                 *  @param y the y coordinate of the top left corner.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetSize(System.Double,System.Double)">
            
            
                 *  Sets the size of this text column.
                 *
                 *  @param w the width of this text column.
                 *  @param h the height of this text column.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetSize(System.Single,System.Single)">
            
            
                 *  Sets the size of this text column.
                 *
                 *  @param w the width of this text column.
                 *  @param h the height of this text column.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetWidth(System.Single)">
            
            
                 *  Sets the desired width of this text column.
                 *
                 *  @param w the width of this text column.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetAlignment(System.Int32)">
            
            
                 *  Sets the text alignment.
                 *
                 *  @param alignment the specified alignment code. Supported values: Align.LEFT, Align.RIGHT. Align.CENTER and Align.JUSTIFY
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetLineSpacing(System.Double)">
            
            
                 *  Sets the spacing between the lines in this text column.
                 *
                 *  @param spacing the specified spacing value.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.SetLineSpacing(System.Single)">
            
            
                 *  Sets the spacing between the lines in this text column.
                 *
                 *  @param spacing the specified spacing value.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.AddParagraph(PDFjet.NET.Paragraph)">
            
            
                 *  Adds a new paragraph to this text column.
                 *
                 *  @param paragraph the new paragraph object.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.RemoveLastParagraph">
            
            
                 *  Removes the last paragraph added to this text column.
                 *
                 </member>
        <member name="M:PDFjet.NET.TextColumn.GetSize">
            
            
                 *  Returns dimension object containing the width and height of this component.
                 *  Please see Example_29.
                 *
                 *  @Return dimension object containing the width and height of this component.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this text column on the specified page.
                 *
                 *  @param page the page to draw this text column on.
                 *  @return the point with x and y coordinates of the location where to draw the next component.
                 </member>
        <member name="M:PDFjet.NET.TextColumn.DrawOn(PDFjet.NET.Page,System.Boolean)">
            
            
                 *  Draws this text column on the specified page if the 'draw' boolean value is 'true'.
                 *
                 *  @param page the page to draw this text column on.
                 *  @param draw the boolean value that specified if the text column should actually be drawn on the page.
                 *  @return the point with x and y coordinates of the location where to draw the next component.
                 </member>
        <member name="T:PDFjet.NET.TextLine">
            
            
             *  Used to create text line objects.
             *
             *
             </member>
        <member name="M:PDFjet.NET.TextLine.#ctor(PDFjet.NET.Font)">
            
            
                 *  Constructor for creating text line objects.
                 *
                 *  @param font the font to use.
                 </member>
        <member name="M:PDFjet.NET.TextLine.#ctor(PDFjet.NET.Font,System.String)">
            
            
                 *  Constructor for creating text line objects.
                 *
                 *  @param font the font to use.
                 *  @param text the text.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetText(System.String)">
            
            
                 *  Sets the text.
                 *
                 *  @param text the text.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetText">
            
            
                 *  Returns the text.
                 *
                 *  @return the text.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetPosition(System.Double,System.Double)">
            
            
                 *  Sets the position where this text line will be drawn on the page.
                 *
                 *  @param x the x coordinate of the text line.
                 *  @param y the y coordinate of the text line.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetPosition(System.Single,System.Single)">
            
            
                 *  Sets the position where this text line will be drawn on the page.
                 *
                 *  @param x the x coordinate of the text line.
                 *  @param y the y coordinate of the text line.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetLocation(System.Single,System.Single)">
            
            
                 *  Sets the location where this text line will be drawn on the page.
                 *
                 *  @param x the x coordinate of the text line.
                 *  @param y the y coordinate of the text line.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetFont(PDFjet.NET.Font)">
            
            
                 *  Sets the font to use for this text line.
                 *
                 *  @param font the font to use.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetFont">
            
            
                 *  Gets the font to use for this text line.
                 *
                 *  @return font the font to use.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetFontSize(System.Single)">
            
            
                 *  Sets the font size to use for this text line.
                 *
                 *  @param fontSize the fontSize to use.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetFallbackFont(PDFjet.NET.Font)">
            
            
                 *  Sets the fallback font.
                 *
                 *  @param fallbackFont the fallback font.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetFallbackFont">
            
            
                 *  Returns the fallback font.
                 *
                 *  @return the fallback font.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetColor(System.Int32)">
            
            
                 *  Sets the color for this text line.
                 *
                 *  @param color the color specified as an integer.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetColor">
            
            
                 *  Returns the text line color.
                 *
                 *  @return the text line color.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetDestinationY">
            
            
                 * Returns the y coordinate of the destination.
                 * 
                 * @return the y coordinate of the destination.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetWidth">
            
            
                 *  Returns the width of this TextLine.
                 *
                 *  @return the width.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetHeight">
            
            
                 *  Returns the height of this TextLine.
                 *
                 *  @return the height.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetURIAction(System.String)">
            
            
                 *  Sets the URI for the "click text line" action.
                 *
                 *  @param uri the URI
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetURIAction">
            
            
                 *  Returns the action URI.
                 * 
                 *  @return the action URI.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetGoToAction(System.String)">
            
            
                 *  Sets the destination key for the action.
                 *
                 *  @param key the destination name.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetGoToAction">
            
            
                 * Returns the GoTo action string.
                 * 
                 * @return the GoTo action string.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetUnderline(System.Boolean)">
            
            
                 *  Sets the underline variable.
                 *  If the value of the underline variable is 'true' - the text is underlined.
                 *
                 *  @param underline the underline flag.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetUnderline">
            
            
                 *  Returns the underline flag.
                 * 
                 *  @return the underline flag.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetStrikeout(System.Boolean)">
            
            
                 *  Sets the strike variable.
                 *  If the value of the strike variable is 'true' - a strike line is drawn through the text.
                 *
                 *  @param strike the strike value.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetStrikeout">
            
            
                 *  Returns the strikeout flag.
                 * 
                 *  @return the strikeout flag.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetTextDirection(System.Int32)">
            
            
                 *  Sets the direction in which to draw the text.
                 *
                 *  @param degrees the number of degrees.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetTextDirection">
            
            
                 * Returns the text direction.
                 * 
                 * @return the text direction.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetTextEffect(System.Int32)">
            
            
                 *  Sets the text effect.
                 * 
                 *  @param textEffect Effect.NORMAL, Effect.SUBSCRIPT or Effect.SUPERSCRIPT.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.GetTextEffect">
            
            
                 *  Returns the text effect.
                 * 
                 *  @return the text effect.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetAltDescription(System.String)">
            
            
                 *  Sets the alternate description of this text line.
                 *
                 *  @param altDescription the alternate description of the text line.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.SetActualText(System.String)">
            
            
                 *  Sets the actual text for this text line.
                 *
                 *  @param actualText the actual text for the text line.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.PlaceIn(PDFjet.NET.Box)">
            
            
                 *  Places this text line in the specified box at position (0.0, 0.0).
                 *
                 *  @param box the specified box.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.PlaceIn(PDFjet.NET.Box,System.Double,System.Double)">
            
            
                 *  Places this text line in the box at the specified offset.
                 *
                 *  @param box the specified box.
                 *  @param x_offset the x offset from the top left corner of the box.
                 *  @param y_offset the y offset from the top left corner of the box.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.PlaceIn(PDFjet.NET.Box,System.Single,System.Single)">
            
            
                 *  Places this text line in the box at the specified offset.
                 *
                 *  @param box the specified box.
                 *  @param x_offset the x offset from the top left corner of the box.
                 *  @param y_offset the y offset from the top left corner of the box.
                 *  @return this TextLine.
                 </member>
        <member name="M:PDFjet.NET.TextLine.DrawOn(PDFjet.NET.Page)">
            
            
                 *  Draws this text line on the specified page.
                 *
                 *  @param page the page to draw this text line on.
                 </member>
        <member name="M:PDFjet.NET.TextLine.DrawOn(PDFjet.NET.Page,System.Boolean)">
            
            
                 *  Draws this text line on the specified page if the draw parameter is true.
                 *
                 *  @param page the page to draw this text line on.
                 *  @param draw if draw is false - no action is performed.
                 </member>
        <member name="T:Spartacus.Database.Memory">
             <summary>
             Classe Spartacus.Database.Memory.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o Mono.Data.Sqlite para acessar um SGBD Sqlite em memória.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Memory.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Memory.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Memory.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Memory.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Memory.#ctor">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Memory" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Memory.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Memory.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Memory.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Memory.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Memory.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Memory.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Memory.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Memory.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Memory.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Memory.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Memory.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Memory.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Memory.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Memory.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Memory.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Memory.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Memory.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Memory.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:SocialExplorer.IO.FastDBF.DbfColumn">
             <summary>
             This class represents a DBF Column.
             </summary>
             
             <remarks>
             Note that certain properties can not be modified after creation of the object. 
             This is because we are locking the header object after creation of a data row,
             and columns are part of the header so either we have to have a lock field for each column,
             or make it so that certain properties such as length can only be set during creation of a column.
             Otherwise a user of this object could modify a column that belongs to a locked header and thus corrupt the DBF file.
             </remarks>
            </member>
        <member name="T:SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType">
             <summary>
              Great information on DBF located here: 
              http://www.clicketyclick.dk/databases/xbase/format/data_types.html
              http://www.clicketyclick.dk/databases/xbase/format/dbf.html
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType.Character">
             <summary>
             Character  less than 254 length
             ASCII text less than 254 characters long in dBASE. 
             
             Character fields can be up to 32 KB long (in Clipper and FoxPro) using decimal 
             count as high byte in field length. It's possible to use up to 64KB long fields 
             by reading length as unsigned.
             
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType.Number">
             <summary>
             Number 	Length: less than 18 
               ASCII text up till 18 characters long (include sign and decimal point). 
             
             Valid characters: 
                "0" - "9" and "-". Number fields can be up to 20 characters long in FoxPro and Clipper. 
             </summary>
             <remarks>
             We are not enforcing this 18 char limit.
             </remarks>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType.Boolean">
             <summary>
              L  Logical  Length: 1    Boolean/byte (8 bit) 
              
              Legal values: 
               ? 	Not initialised (default)
               Y,y 	Yes
               N,n 	No
               F,f 	False
               T,t 	True
               Logical fields are always displayed using T/F/?. Some sources claims 
               that space (ASCII 20h) is valid for not initialised. Space may occur, but is not defined. 	 
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType.Date">
             <summary>
             D 	Date 	Length: 8  Date in format YYYYMMDD. A date like 0000-00- 00 is *NOT* valid. 
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType.Memo">
             <summary>
             M 	Memo 	Length: 10 	Pointer to ASCII text field in memo file 10 digits representing a pointer to a DBT block (default is blanks). 
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType.Binary">
             <summary>
             B 	Binary 	 	(dBASE V) Like Memo fields, but not for text processing.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType.Integer">
             <summary>
             I 	Integer 	Length: 4 byte little endian integer 	(FoxPro)
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.mName">
             <summary>
             Column (field) name
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.mType">
             <summary>
             Field Type (Char, number, boolean, date, memo, binary)
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.mDataAddress">
             <summary>
             Offset from the start of the record
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.mLength">
             <summary>
             Length of the data in bytes; some rules apply which are in the spec (read more above).
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfColumn.mDecimalCount">
             <summary>
             Decimal precision count, or number of digits afer decimal point. This applies to Number types only.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfColumn.#ctor(System.String,SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType,System.Int32,System.Int32)">
             <summary>
             Full spec constructor sets all relevant fields.
             </summary>
             <param name="sName"></param>
             <param name="type"></param>
             <param name="nLength"></param>
             <param name="nDecimals"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfColumn.#ctor(System.String,SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType,System.Int32,System.Int32,System.Int32)">
             <summary>
             Create a new column fully specifying all properties.
             </summary>
             <param name="sName">column name</param>
             <param name="type">type of field</param>
             <param name="nLength">field length including decimal places and decimal point if any</param>
             <param name="nDecimals">decimal places</param>
             <param name="nDataAddress">offset from start of record</param>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfColumn.Name">
             <summary>
             Field Name.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfColumn.ColumnType">
             <summary>
             Field Type (C N L D or M).
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfColumn.ColumnTypeChar">
             <summary>
             Returns column type as a char, (as written in the DBF column header)
             N=number, C=char, B=binary, L=boolean, D=date, I=integer, M=memo
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfColumn.DataAddress">
             <summary>
             Field Data Address offset from the start of the record.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfColumn.Length">
             <summary>
             Length of the data in bytes.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfColumn.DecimalCount">
             <summary>
             Field decimal count in Binary, indicating where the decimal is.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfColumn.GetDbaseType(System.Type)">
             <summary>
             Returns corresponding dbf field type given a .net Type.
             </summary>
             <param name="type"></param>
             <returns></returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfColumn.ShapeField">
             <summary>
             Returns shp file Shape Field.
             </summary>
             <returns></returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfColumn.IdField">
             <summary>
             Returns Shp file ID field.
             </summary>
             <returns></returns>
            </member>
        <member name="T:SocialExplorer.IO.FastDBF.DbfFile">
             <summary>
             This class represents a DBF file. You can create new, open, update and save DBF files using this class and supporting classes.
             Also, this class supports reading/writing from/to an internet forward only type of stream!
             </summary>
             <remarks>
             TODO: add end of file byte '0x1A' !!!
             We don't relly on that byte at all, and everything works with or without that byte, but it should be there by spec.
             </remarks>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfFile.mHeader">
             <summary>
             Helps read/write dbf file header information.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfFile.mHeaderWritten">
             <summary>
             flag that indicates whether the header was written or not...
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfFile.mDbfFile">
             <summary>
             Streams to read and write to the DBF file.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfFile.mFileName">
             <summary>
             File that was opened, if one was opened at all.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfFile.mRecordsReadCount">
             <summary>
             Number of records read using ReadNext() methods only. This applies only when we are using a forward-only stream.
             mRecordsReadCount is used to keep track of record index. With a seek enabled stream, 
             we can always calculate index using stream position.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfFile.mIsForwardOnly">
             <summary>
             keep these values handy so we don't call functions on every read.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Open(System.IO.Stream)">
             <summary>
             Open a DBF from a FileStream. This can be a file or an internet connection stream. Make sure that it is positioned at start of DBF file.
             Reading a DBF over the internet we can not determine size of the file, so we support HasMore(), ReadNext() interface. 
             RecordCount information in header can not be trusted always, since some packages store 0 there.
             </summary>
             <param name="ofs"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
             <summary>
             Open a DBF file or create a new one.
             </summary>
             <param name="sPath">Full path to the file.</param>
             <param name="mode"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
             <summary>
             Open a DBF file or create a new one.
             </summary>
             <param name="sPath">Full path to the file.</param>
             <param name="mode"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Open(System.String,System.IO.FileMode)">
             <summary>
             Open a DBF file or create a new one.
             </summary>
             <param name="sPath">Full path to the file.</param>
             <param name="mode"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Create(System.String)">
             <summary>
             Creates a new DBF 4 file. Overwrites if file exists! Use Open() function for more options.
             </summary>
             <param name="sPath"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Close">
             <summary>
             Update header info, flush buffers and close streams. You should always call this method when you are done with a DBF file.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfFile.IsReadOnly">
             <summary>
             Returns true if we can not write to the DBF file stream.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfFile.IsForwardOnly">
             <summary>
             Returns true if we can not seek to different locations within the file, such as internet connections.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfFile.FileName">
             <summary>
             Returns the name of the filestream.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.ReadNext(SocialExplorer.IO.FastDBF.DbfRecord)">
             <summary>
             Read next record and fill data into parameter oFillRecord. Returns true if a record was read, otherwise false.
             </summary>
             <param name="oFillRecord"></param>
             <returns></returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.ReadNext">
             <summary>
             Tries to read a record and returns a new record object or null if nothing was read.
             </summary>
             <returns></returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Read(System.Int32,SocialExplorer.IO.FastDBF.DbfRecord)">
             <summary>
             Reads a record specified by index into oFillRecord object. You can use this method 
             to read in and process records without creating and discarding record objects.
             Note that you should check that your stream is not forward-only! If you have a forward only stream, use ReadNext() functions.
             </summary>
             <param name="index">Zero based record index.</param>
             <param name="oFillRecord">Record object to fill, must have same size and number of fields as thid DBF file header!</param>
             <remarks>
             <returns>True if read a record was read, otherwise false. If you read end of file false will be returned and oFillRecord will NOT be modified!</returns>
             The parameter record (oFillRecord) must match record size specified by the header and number of columns as well.
             It does not have to come from the same header, but it must match the structure. We are not going as far as to check size of each field.
             The idea is to be flexible but safe. It's a fine balance, these two are almost always at odds.
             </remarks>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Read(System.Int32)">
             <summary>
             Reads a record specified by index. This method requires the stream to be able to seek to position. 
             If you are using a http stream, or a stream that can not stream, use ReadNext() methods to read in all records.
             </summary>
             <param name="index">Zero based index.</param>
             <returns>Null if record can not be read, otherwise returns a new record.</returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Write(SocialExplorer.IO.FastDBF.DbfRecord)">
             <summary>
             Write a record to file. If RecordIndex is present, record will be updated, otherwise a new record will be written.
             Header will be output first if this is the first record being writen to file. 
             This method does not require stream seek capability to add a new record.
             </summary>
             <param name="orec"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.Update(SocialExplorer.IO.FastDBF.DbfRecord)">
             <summary>
             Update a record. RecordIndex (zero based index) must be more than -1, otherwise an exception is thrown.
             You can also use Write method which updates a record if it has RecordIndex or adds a new one if RecordIndex == -1.
             RecordIndex is set automatically when you call any Read() methods on this class.
             </summary>
             <param name="orec"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfFile.WriteHeader">
             <summary>
             Save header to file. Normally, you do not have to call this method, header is saved 
             automatically and updated when you close the file (if it changed).
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfFile.Header">
             <summary>
             Access DBF header with information on columns. Use this object for faster access to header. 
             Remove one layer of function calls by saving header reference and using it directly to access columns.
             </summary>
            </member>
        <member name="T:SocialExplorer.IO.FastDBF.DbfHeader">
             <summary>
             This class represents a DBF IV file header.
             </summary>
             
             <remarks>
             DBF files are really wasteful on space but this legacy format lives on because it's really really simple. 
             It lacks much in features though.
             
             
             Thanks to Erik Bachmann for providing the DBF file structure information!!
             http://www.clicketyclick.dk/databases/xbase/format/dbf.html
             
                       _______________________  _______
             00h /   0| Version number      *1|  ^
                      |-----------------------|  |
             01h /   1| Date of last update   |  |
             02h /   2|      YYMMDD        *21|  |
             03h /   3|                    *14|  |
                      |-----------------------|  |
             04h /   4| Number of records     | Record
             05h /   5| in data file          | header
             06h /   6| ( 32 bits )        *14|  |
             07h /   7|                       |  |
                      |-----------------------|  |
             08h /   8| Length of header   *14|  |
             09h /   9| structure ( 16 bits ) |  |
                      |-----------------------|  |
             0Ah /  10| Length of each record |  |
             0Bh /  11| ( 16 bits )     *2 *14|  |
                      |-----------------------|  |
             0Ch /  12| ( Reserved )        *3|  |
             0Dh /  13|                       |  |
                      |-----------------------|  |
             0Eh /  14| Incomplete transac.*12|  |
                      |-----------------------|  |
             0Fh /  15| Encryption flag    *13|  |
                      |-----------------------|  |
             10h /  16| Free record thread    |  |
             11h /  17| (reserved for LAN     |  |
             12h /  18|  only )               |  |
             13h /  19|                       |  |
                      |-----------------------|  |
             14h /  20| ( Reserved for        |  |            _        |=======================| ______
                      |   multi-user dBASE )  |  |           / 00h /  0| Field name in ASCII   |  ^
                      : ( dBASE III+ - )      :  |          /          : (terminated by 00h)   :  |
                      :                       :  |         |           |                       |  |
             1Bh /  27|                       |  |         |   0Ah / 10|                       |  |
                      |-----------------------|  |         |           |-----------------------| For
             1Ch /  28| MDX flag (dBASE IV)*14|  |         |   0Bh / 11| Field type (ASCII) *20| each
                      |-----------------------|  |         |           |-----------------------| field
             1Dh /  29| Language driver     *5|  |        /    0Ch / 12| Field data address    |  |
                      |-----------------------|  |       /             |                     *6|  |
             1Eh /  30| ( Reserved )          |  |      /              | (in memory !!!)       |  |
             1Fh /  31|                     *3|  |     /       0Fh / 15| (dBASE III+)          |  |
                      |=======================|__|____/                |-----------------------|  |  -
             20h /  32|                       |  |  ^          10h / 16| Field length       *22|  |   |
                      |- - - - - - - - - - - -|  |  |                  |-----------------------|  |   | *7
                      |                    *19|  |  |          11h / 17| Decimal count      *23|  |   |
                      |- - - - - - - - - - - -|  |  Field              |-----------------------|  |  -
                      |                       |  | Descriptor  12h / 18| ( Reserved for        |  |
                      :. . . . . . . . . . . .:  |  |array     13h / 19|   multi-user dBASE)*18|  |
                      :                       :  |  |                  |-----------------------|  |
                   n  |                       |__|__v_         14h / 20| Work area ID       *16|  |
                      |-----------------------|  |    \                |-----------------------|  |
                   n+1| Terminator (0Dh)      |  |     \       15h / 21| ( Reserved for        |  |
                      |=======================|  |      \      16h / 22|   multi-user dBASE )  |  |
                   m  | Database Container    |  |       \             |-----------------------|  |
                      :                    *15:  |        \    17h / 23| Flag for SET FIELDS   |  |
                      :                       :  |         |           |-----------------------|  |
                 / m+263                      |  |         |   18h / 24| ( Reserved )          |  |
                      |=======================|__v_ ___    |           :                       :  |
                      :                       :    ^       |           :                       :  |
                      :                       :    |       |           :                       :  |
                      :                       :    |       |   1Eh / 30|                       |  |
                      | Record structure      |    |       |           |-----------------------|  |
                      |                       |    |        \  1Fh / 31| Index field flag    *8|  |
                      |                       |    |         \_        |=======================| _v_____
                      |                       | Records
                      |-----------------------|    |
                      |                       |    |          _        |=======================| _______
                      |                       |    |         / 00h /  0| Record deleted flag *9|  ^
                      |                       |    |        /          |-----------------------|  |
                      |                       |    |       /           | Data               *10|  One
                      |                       |    |      /            : (ASCII)            *17: record
                      |                       |____|_____/             |                       |  |
                      :                       :    |                   |                       | _v_____
                      :                       :____|_____              |=======================|
                      :                       :    |
                      |                       |    |
                      |                       |    |
                      |                       |    |
                      |                       |    |
                      |                       |    |
                      |=======================|    |
                      |__End_of_File__________| ___v____  End of file ( 1Ah )  *11
             
             </remarks>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfHeader.FileDescriptorSize">
             <summary>
             Header file descriptor size is 33 bytes (32 bytes + 1 terminator byte), followed by column metadata which is 32 bytes each.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfHeader.ColumnDescriptorSize">
             <summary>
             Field or DBF Column descriptor is 32 bytes long.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfHeader.mIsDirty">
             <summary>
             When object is modified dirty flag is set.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfHeader.mEmptyRecord">
             <summary>
             mEmptyRecord is an array used to clear record data in CDbf4Record.
             This is shared by all record objects, used to speed up clearing fields or entire record.
             <seealso cref="P:SocialExplorer.IO.FastDBF.DbfHeader.EmptyDataRecord" />
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfHeader.#ctor(System.Int32)">
             <summary>
             Specify initial column capacity.
             </summary>
             <param name="nInitialFields"></param>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfHeader.HeaderLength">
             <summary>
             Gets header length.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfHeader.AddColumn(SocialExplorer.IO.FastDBF.DbfColumn)">
             <summary>
             Add a new column to the DBF header.
             </summary>
             <param name="oNewCol"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfHeader.AddColumn(System.String,SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType)">
             <summary>
             Create and add a new column with specified name and type.
             </summary>
             <param name="sName"></param>
             <param name="type"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfHeader.AddColumn(System.String,SocialExplorer.IO.FastDBF.DbfColumn.DbfColumnType,System.Int32,System.Int32)">
             <summary>
             Create and add a new column with specified name, type, length, and decimal precision.
             </summary>
             <param name="sName">Field name. Uniqueness is not enforced.</param>
             <param name="type"></param>
             <param name="nLength">Length of the field including decimal point and decimal numbers</param>
             <param name="nDecimals">Number of decimal places to keep.</param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfHeader.RemoveColumn(System.Int32)">
             <summary>
             Remove column from header definition.
             </summary>
             <param name="nIndex"></param>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfHeader.Item(System.String)">
             <summary>
             Look up a column index by name. Note that this is case sensitive, internally it does a lookup using a dictionary.
             </summary>
             <param name="sName"></param>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfHeader.Item(System.Int32)">
             <summary>
             Returns column at specified index. Index is 0 based.
             </summary>
             <param name="nIndex">Zero based index.</param>
             <returns></returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfHeader.FindColumn(System.String)">
             <summary>
             Finds a column index by using a fast dictionary lookup-- creates column dictionary on first use. Returns -1 if not found. Note this is case sensitive!
             </summary>
             <param name="sName">Column name</param>
             <returns>column index (0 based) or -1 if not found.</returns>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfHeader.EmptyDataRecord">
             <summary>
             Returns an empty data record. This is used to clear columns 
             </summary>
             <remarks>
             The reason we put this in the header class is because it allows us to use the CDbf4Record class in two ways.
             1. we can create one instance of the record and reuse it to write many records quickly clearing the data array by bitblting to it.
             2. we can create many instances of the record (a collection of records) and have only one copy of this empty dataset for all of them.
                If we had put it in the Record class then we would be taking up twice as much space unnecessarily. The empty record also fits the model
                and everything is neatly encapsulated and safe.
             
             </remarks>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfHeader.ColumnCount">
             <summary>
             Returns Number of columns in this dbf header.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfHeader.RecordLength">
             <summary>
             Size of one record in bytes. All fields + 1 byte delete flag.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfHeader.RecordCount">
             <summary>
             Get/Set number of records in the DBF.
             </summary>
             <remarks>
             The reason we allow client to set RecordCount is beause in certain streams 
             like internet streams we can not update record count as we write out records, we have to set it in advance,
             so client has to be able to modify this property.
             </remarks>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfHeader.Locked">
             <summary>
             Get/set whether this header is read only or can be modified. When you create a CDbfRecord 
             object and pass a header to it, CDbfRecord locks the header so that it can not be modified any longer.
             in order to preserve DBF integrity.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfHeader.Unlock">
             <summary>
             Use this method with caution. Headers are locked for a reason, to prevent DBF from becoming corrupt.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfHeader.IsDirty">
             <summary>
             Returns true when this object is modified after read or write.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfHeader.Write(System.IO.BinaryWriter)">
             <summary>
             Encoding must be ASCII for this binary writer.
             </summary>
             <param name="writer"></param>
             <remarks>
             See class remarks for DBF file structure.
             </remarks>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfHeader.Read(System.IO.BinaryReader)">
             <summary>
             Read header data, make sure the stream is positioned at the start of the file to read the header otherwise you will get an exception.
             When this function is done the position will be the first record.
             </summary>
             <param name="reader"></param>
            </member>
        <member name="T:SocialExplorer.IO.FastDBF.DbfRecord">
             <summary>
             Use this class to create a record and write it to a dbf file. You can use one record object to write all records!!
             It was designed for this kind of use. You can do this by clearing the record of all data 
             (call Clear() method) or setting values to all fields again, then write to dbf file. 
             This eliminates creating and destroying objects and optimizes memory use.
             
             Once you create a record the header can no longer be modified, since modifying the header would make a corrupt DBF file.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfRecord.mHeader">
             <summary>
             Header provides information on all field types, sizes, precision and other useful information about the DBF.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfRecord.mData">
             <summary>
             Dbf data are a mix of ASCII characters and binary, which neatly fit in a byte array.
             BinaryWriter would esentially perform the same conversion using the same Encoding class.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfRecord.mRecordIndex">
             <summary>
             Zero based record index. -1 when not set, new records for example.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfRecord.mEmptyRecord">
             <summary>
             Empty Record array reference used to clear fields quickly (or entire record).
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfRecord.mAllowStringTruncate">
             <summary>
             Specifies whether we allow strings to be truncated. If false and string is longer than we can fit in the field, an exception is thrown.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfRecord.mAllowDecimalTruncate">
             <summary>
             Specifies whether we allow the decimal portion of numbers to be truncated. 
             If false and decimal digits overflow the field, an exception is thrown.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfRecord.mAllowIntegerTruncate">
             <summary>
             Specifies whether we allow the integer portion of numbers to be truncated.
             If false and integer digits overflow the field, an exception is thrown.
             </summary>
            </member>
        <member name="F:SocialExplorer.IO.FastDBF.DbfRecord.mColNameToConIdx">
             <summary>
             Column Name to Column Index map
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.#ctor(SocialExplorer.IO.FastDBF.DbfHeader)">
             <summary>
             
             </summary>
             <param name="oHeader">Dbf Header will be locked once a record is created 
             since the record size is fixed and if the header was modified it would corrupt the DBF file.</param>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfRecord.Item(System.Int32)">
             <summary>
             Set string data to a column, if the string is longer than specified column length it will be truncated!
             If dbf column type is not a string, input will be treated as dbf column 
             type and if longer than length an exception will be thrown.
             </summary>
             <param name="nColIndex"></param>
             <returns></returns>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfRecord.Item(System.String)">
             <summary>
             Set string data to a column, if the string is longer than specified column length it will be truncated!
             If dbf column type is not a string, input will be treated as dbf column 
             type and if longer than length an exception will be thrown.
             </summary>
             <param name="nColName"></param>
             <returns></returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.GetDateValue(System.Int32)">
             <summary>
             Get date value.
             </summary>
             <param name="nColIndex"></param>
             <returns></returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.SetDateValue(System.Int32,System.DateTime)">
             <summary>
             Get date value.
             </summary>
             <param name="nColIndex"></param>
             <returns></returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.Clear">
             <summary>
             Clears all data in the record.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.ToString">
             <summary>
             returns a string representation of this record.
             </summary>
             <returns></returns>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfRecord.RecordIndex">
             <summary>
             Gets/sets a zero based record index. This information is not directly stored in DBF. 
             It is the location of this record within the DBF. 
             </summary>
             <remarks>
             This property is managed from outside this object,
             CDbfFile object updates it when records are read. The reason we don't set it in the Read() 
             function within this object is that the stream can be forward-only so the Position property 
             is not available and there is no way to figure out what index the record was unless you 
             count how many records were read, and that's exactly what CDbfFile does.
             </remarks>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfRecord.IsDeleted">
             <summary>
             Returns/sets flag indicating whether this record was tagged deleted. 
             </summary>
             <remarks>Use CDbf4File.Compress() function to rewrite dbf removing records flagged as deleted.</remarks>
             <seealso cref="!:CDbf4File.Compress() function" />
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfRecord.AllowStringTurncate">
             <summary>
             Specifies whether strings can be truncated. If false and string is longer than can fit in the field, an exception is thrown.
             Default is True.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfRecord.AllowDecimalTruncate">
             <summary>
             Specifies whether to allow the decimal portion of numbers to be truncated. 
             If false and decimal digits overflow the field, an exception is thrown. Default is false.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfRecord.AllowIntegerTruncate">
             <summary>
             Specifies whether integer portion of numbers can be truncated.
             If false and integer digits overflow the field, an exception is thrown. 
             Default is False.
             </summary>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfRecord.Header">
             <summary>
             Returns header object associated with this record.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.Column(System.Int32)">
             <summary>
             Get column by index.
             </summary>
             <param name="index"></param>
             <returns></returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.Column(System.String)">
             <summary>
             Get column by name.
             </summary>
             <param name="index"></param>
             <returns></returns>
            </member>
        <member name="P:SocialExplorer.IO.FastDBF.DbfRecord.ColumnCount">
             <summary>
             Gets column count from header.
             </summary>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.FindColumn(System.String)">
             <summary>
             Finds a column index by searching sequentially through the list. Case is ignored. Returns -1 if not found.
             </summary>
             <param name="sName">Column name.</param>
             <returns>Column index (0 based) or -1 if not found.</returns>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.Write(System.IO.Stream)">
             <summary>
             Writes data to stream. Make sure stream is positioned correctly because we simply write out the data to it.
             </summary>
             <param name="osw"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.Write(System.IO.Stream,System.Boolean)">
             <summary>
             Writes data to stream. Make sure stream is positioned correctly because we simply write out data to it, and clear the record.
             </summary>
             <param name="osw"></param>
            </member>
        <member name="M:SocialExplorer.IO.FastDBF.DbfRecord.Read(System.IO.Stream)">
             <summary>
             Read record from stream. Returns true if record read completely, otherwise returns false.
             </summary>
             <param name="obr"></param>
             <returns></returns>
            </member>
        <member name="F:Spartacus.Utils.NotImplementedException.v_message">
             <summary>
             Mensagem de Exceção.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.NotImplementedException.#ctor">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.NotImplementedException.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_function">
             Nome do método não implementado.
             </param>
            </member>
        <member name="F:Spartacus.Utils.NotSupportedException.v_message">
             <summary>
             Mensagem de Exceção.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.NotSupportedException.#ctor">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.NotSupportedException.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_function">
             Nome do método não implementado.
             </param>
            </member>
        <member name="T:Spartacus.Database.SqlServer">
             <summary>
             Classe Spartacus.Database.SqlServer.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o Mono.Data.Tds para acessar um SGBD MS SQL Server.
             </summary>
            </member>
        <member name="F:Spartacus.Database.SqlServer.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.SqlServer.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.SqlServer.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.SqlServer.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.SqlServer.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.SqlServer" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.SqlServer.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.SqlServer" />.
             </summary>
             <param name="p_host">
             Hostname ou IP onde o banco de dados está localizado.
             </param>
             <param name="p_port">
             Porta TCP para conectar-se ao SGBG.
             </param>
             <param name="p_service">
             Nome do serviço que representa o banco ao qual desejamos nos conectar.
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.#ctor(System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.SqlServer" />.
             </summary>
             <param name="p_host">
             Hostname ou IP onde o banco de dados está localizado.
             </param>
             <param name="p_service">
             Nome do serviço que representa o banco ao qual desejamos nos conectar.
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.#ctor(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.SqlServer" />.
             </summary>
             <param name="p_host">
             Hostname ou IP onde o banco de dados está localizado.
             </param>
             <param name="p_port">
             Porta TCP para conectar-se ao SGBG.
             </param>
             <param name="p_service">
             Nome do serviço que representa o banco ao qual desejamos nos conectar.
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
             <param name="p_integrated_security">
             Segurança integrada (suportada apenas na classe SqlServer).
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Database.SqlServer" />.
             </summary>
             <param name="p_host">
             Hostname ou IP onde o banco de dados está localizado.
             </param>
             <param name="p_service">
             Nome do serviço que representa o banco ao qual desejamos nos conectar.
             </param>
             <param name="p_user">
             Usuário ou schema para se conectar ao banco de dados.
             </param>
             <param name="p_password">
             A senha do usuário ou schema.
             </param>
             <param name="p_integrated_security">
             Segurança integrada (suportada apenas na classe SqlServer).
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.SqlServer.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.SqlServer.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.SqlServer.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.SqlServer.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.SqlServer.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.SqlServer.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Utils.Cryptor">
             <summary>
             Classe Cryptor.
             Objeto genérico que pode criptografar e descriptografar strings e arquivos.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Cryptor.v_password">
             <summary>
             Senha da Criptografia.
             A mesma senha usada para criptografar deve ser usada para descriptografar.
             Obrigatório.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Cryptor.v_initvector">
             <summary>
             Vetor de Inicialização.
             Deve ser uma string de exatamente 16 caracteres.
             O padrão é a string "0123456789ABCDEF".
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Cryptor.v_keysize">
             <summary>
             Tamanho da Chave.
             Pode ser 128, 192 ou 256. Quanto maior, mais forte é a criptografia.
             O padrão é 256.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Cryptor.v_minsaltlength">
             <summary>
             Tamanho mínimo do SALT (string aleatória incluída na criptografia).
             Deve estar entre 8 e 255 caracteres.
             O padrão é 8 caracteres.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Cryptor.v_maxsaltlength">
             <summary>
             Tamanho máximo do SALT (string aleatória incluída na criptografia).
             Deve estar entre 8 e 255 caracteres.
             O padrão é 8 caracteres.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Cryptor.v_encryptor">
             <summary>
             Objeto Criptografador.
             </summary>
            </member>
        <member name="F:Spartacus.Utils.Cryptor.v_decryptor">
             <summary>
             Objeto Descriptografador.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Cryptor" />.
             </summary>
             <param name="p_password">Senha da Criptografia.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.#ctor(System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Cryptor" />.
             </summary>
             <param name="p_password">Senha da Criptografia.</param>
             <param name="p_initvector">Vetor de Inicialização (deve conter 16 caracteres).</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.#ctor(System.String,System.Int32,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Cryptor" />.
             </summary>
             <param name="p_password">Senha da Criptografia.</param>
             <param name="p_minsaltlength">Tamanho mínimo do SALT (entre 8 e 255).</param>
             <param name="p_maxsaltlength">Tamanho máximo do SALT (entre 8 e 255).</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.#ctor(System.String,System.String,System.Int32,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Cryptor" />.
             </summary>
             <param name="p_password">Senha da Criptografia.</param>
             <param name="p_initvector">Vetor de Inicialização (deve conter 16 caracteres).</param>
             <param name="p_minsaltlength">Tamanho mínimo do SALT (entre 8 e 255).</param>
             <param name="p_maxsaltlength">Tamanho máximo do SALT (entre 8 e 255).</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.#ctor(System.String,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Cryptor" />.
             </summary>
             <param name="p_password">Senha da Criptografia.</param>
             <param name="p_keysize">Tamanho da Chave (128, 192 ou 256).</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.#ctor(System.String,System.Int32,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Cryptor" />.
             </summary>
             <param name="p_password">Senha da Criptografia.</param>
             <param name="p_keysize">Tamanho da Chave (128, 192 ou 256).</param>
             <param name="p_initvector">Vetor de Inicialização (deve conter 16 caracteres).</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Cryptor" />.
             </summary>
             <param name="p_password">Senha da Criptografia.</param>
             <param name="p_keysize">Tamanho da Chave (128, 192 ou 256).</param>
             <param name="p_minsaltlength">Tamanho mínimo do SALT (entre 8 e 256).</param>
             <param name="p_maxsaltlength">Tamanho máximo do SALT (entre 8 e 256).</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.#ctor(System.String,System.Int32,System.String,System.Int32,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Utils.Cryptor" />.
             </summary>
             <param name="p_password">Senha da Criptografia.</param>
             <param name="p_keysize">Tamanho da Chave (128,192 ou 256).</param>
             <param name="p_initvector">Vetor de Inicialização (deve conter 16 caracteres).</param>
             <param name="p_minsaltlength">Tamanho mínimo do SALT (entre 8 e 256).</param>
             <param name="p_maxsaltlength">Tamanho máximo do SALT (entre 8 e 256).</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.Initialize">
             <summary>
             Initializa os objetos necessários para realizar criptografia e descriptografia.
             </summary>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.Encrypt(System.String)">
             <summary>
             Criptografa uma string em outra string.
             </summary>
             <returns>String criptografada.</returns>
             <param name="p_plaintext">String em texto puro.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.Encrypt(System.Byte[])">
             <summary>
             Criptografa um array de bytes em uma string.
             </summary>
             <returns>String criptografada.</returns>
             <param name="p_plaintextbytes">Array de bytes.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.EncryptToBytes(System.String)">
             <summary>
             Criptografa uma string em um array de bytes.
             </summary>
             <returns>Array de bytes criptografado.</returns>
             <param name="p_plaintext">String em texto puro.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.EncryptToBytes(System.Byte[])">
             <summary>
             Criptografa um array de bytes em outro array de bytes.
             </summary>
             <returns>Array de bytes criptografado.</returns>
             <param name="p_plaintextbytes">Array de bytes.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.Base64Encode(System.String)">
             <summary>
             Codifica uma string usando Base64.
             </summary>
             <returns>String codificada.</returns>
             <param name="p_plaintext">Texto puro.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.EncryptFile(System.String,System.String)">
             <summary>
             Criptografa um arquivo em outro arquivo.
             O tamanho do bloco é 1 MB.
             </summary>
             <param name="p_inputfilename">Nome do arquivo de entrada.</param>
             <param name="p_outputfilename">Nome do arquivo de saída.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.EncryptFile(System.String,System.String,System.Int32)">
             <summary>
             Criptografa um arquivo em outro arquivo.
             </summary>
             <param name="p_inputfilename">Nome do arquivo de entrada.</param>
             <param name="p_outputfilename">Nome do arquivo de saída.</param>
             <param name="p_chunksize">Tamanho do bloco em bytes.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.RandomString">
             <summary>
             Cria uma string aleatória para diversos propósitos.
             </summary>
             <returns>String aleatória.</returns>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.RandomString(System.String)">
             <summary>
             Cria uma string aleatória para diversos propósitos.
             </summary>
             <returns>String aleatória.</returns>
             <param name="p_plaintext">String em texto puro a ser usada para criar a string aleatória.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.Decrypt(System.String)">
             <summary>
             Descriptografa uma string em outra string.
             </summary>
             <returns>String descriptografada em texto puro.</returns>
             <param name="p_ciphertext">String criptografada.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.Decrypt(System.Byte[])">
             <summary>
             Descriptografa um array de bytes em uma string.
             </summary>
             <returns>String descriptografada em texto puro.</returns>
             <param name="p_ciphertextbytes">Array de bytes criptografado.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.DecryptToBytes(System.String)">
             <summary>
             Descriptografa uma string em um array de bytes.
             </summary>
             <returns>Array de bytes descriptografado.</returns>
             <param name="p_ciphertext">String criptografada.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.DecryptToBytes(System.Byte[])">
             <summary>
             Descriptografa um array de bytes em outro array de bytes.
             </summary>
             <returns>Array de bytes descriptografado.</returns>
             <param name="p_ciphertextbytes">Array de bytes criptografado.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.Base64Decode(System.String)">
             <summary>
             Decodifica uma string na Base64.
             </summary>
             <returns>Texto puro.</returns>
             <param name="p_encoded">String codificada.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.DecryptFile(System.String,System.String)">
             <summary>
             Descriptografa um arquivo em outro arquivo.
             </summary>
             <param name="p_inputfilename">Nome do arquivo de entrada.</param>
             <param name="p_outputfilename">Nome do arquivo de saída.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.AddSalt(System.Byte[])">
             <summary>
             Adiciona SALT a um array de bytes.
             SALT é uma string gerada aleatoriamente.
             </summary>
             <returns>Array de bytes com SALT.</returns>
             <param name="p_plaintextbytes">Array de bytes.</param>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.GenerateSalt">
             <summary>
             Gera um SALT.
             </summary>
             <returns>SALT.</returns>
            </member>
        <member name="M:Spartacus.Utils.Cryptor.GenerateRandomNumber(System.Int32,System.Int32)">
             <summary>
             Gera um número aleatório contido no intervalo especificado.
             </summary>
             <returns>Número aleatório.</returns>
             <param name="p_minvalue">Valor mínimo.</param>
             <param name="p_maxvalue">Valor máximo.</param>
            </member>
        <member name="T:Spartacus.Forms.Buttons">
             <summary>
             Classe Buttons.
             Herda da classe <see cref="T:Spartacus.Forms.Container" /> 
             Representa um componente com um ou mais botões.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Buttons.v_list">
             <summary>
             Lista de botões.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Buttons.v_offsetx">
             <summary>
             Deslocamento horizontal.
             Usado para saber onde posicionar o próximo botão.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Buttons.#ctor(Spartacus.Forms.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Buttons" />.
             </summary>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Forms.Buttons.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Buttons.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Buttons.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Buttons.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Buttons.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Buttons.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Container.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Container.</param>
            </member>
        <member name="M:Spartacus.Forms.Buttons.GetValue">
             <summary>
             Retorna o texto ou valor atual do Container.
             </summary>
             <returns>Texto ou valor atual do Container.</returns>
            </member>
        <member name="M:Spartacus.Forms.Buttons.AddButton(System.String,System.EventHandler)">
             <summary>
             Adiciona um botão à lista de botões.
             </summary>
             <param name="p_text">Texto do botão.</param>
             <param name="p_delegate">Método que deve ser disparado quando o usuário clicar no botão.</param>
            </member>
        <member name="M:Spartacus.Forms.Buttons.AddButton(System.String,System.EventHandler,System.Int32)">
             <summary>
             Adiciona um botão à lista de botões.
             </summary>
             <param name="p_text">Texto do botão.</param>
             <param name="p_delegate">Método que deve ser disparado quando o usuário clicar no botão.</param>
             <param name="p_width">Largura do botão.</param>
            </member>
        <member name="M:Spartacus.Forms.Buttons.AddButton(System.String,System.EventHandler,System.Boolean)">
             <summary>
             Adiciona um botão à lista de botões.
             </summary>
             <param name="p_text">Texto do botão.</param>
             <param name="p_delegate">Método que deve ser disparado quando o usuário clicar no botão.</param>
             <param name="p_enabled">Se o botão deve começar habilitado ou não.</param>
            </member>
        <member name="M:Spartacus.Forms.Buttons.AddButton(System.String,System.EventHandler,System.Int32,System.Boolean)">
             <summary>
             Adiciona um botão à lista de botões.
             </summary>
             <param name="p_text">Texto do botão.</param>
             <param name="p_delegate">Método que deve ser disparado quando o usuário clicar no botão.</param>
             <param name="p_width">Largura do botão.</param>
             <param name="p_enabled">Se o botão deve começar habilitado ou não.</param>
            </member>
        <member name="M:Spartacus.Forms.Buttons.EnableButton(System.Int32,System.Boolean)">
             <summary>
             Habilita ou desabilita um botão da lista de botões.
             </summary>
             <param name="p_index">Posição do botão dentro da lista de botões.</param>
             <param name="p_enabled">Se o botão deve estar habilitado ou não.</param>
            </member>
        <member name="T:Spartacus.Forms.Container">
             <summary>
             Classe Container.
             Representa um formulário (janela), painel, ou outro componente que contenha outros componentes.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_parent">
             <summary>
             Container pai do Container atual.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_control">
             <summary>
             Controle nativo do Container atual.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_width">
             <summary>
             Largura do Container atual.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_height">
             <summary>
             Altura do Container atual.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_posx">
             <summary>
             Posição X do Container dentro do Container pai.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_posy">
             <summary>
             Posição Y do Container dentro do Container pai.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_containers">
             <summary>
             Lista de Containers filhos do Container atual.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_offsety">
             <summary>
             Deslocamento do eixo Y.
             Armazena a primeira posição Y livre para serem inseridos novos Containers.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_frozenheight">
             <summary>
             Soma das alturas dos Containers filhos que possuem altura fixa.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Container.v_isfrozen">
             <summary>
             Se o Container atual possui dimensões fixas dentro do Container pai.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Container.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Container" />.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Container.#ctor(Spartacus.Forms.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Container" />.
             </summary>
             <param name="p_parent">Container pai do Container atual.</param>
            </member>
        <member name="M:Spartacus.Forms.Container.SetWidth(System.Int32)">
             <summary>
             Configura a largura do Container.
             </summary>
             <param name="p_width">Largura do Container.</param>
            </member>
        <member name="M:Spartacus.Forms.Container.SetHeight(System.Int32)">
             <summary>
             Configura a altura do Container.
             </summary>
             <param name="p_height">Altura do Container.</param>
            </member>
        <member name="M:Spartacus.Forms.Container.SetLocation(System.Int32,System.Int32)">
             <summary>
             Configura a localização do Container atual dentro do Container pai.
             </summary>
             <param name="p_posx">Posição X.</param>
             <param name="p_posy">Posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Container.Add(Spartacus.Forms.Container)">
             <summary>
             Adiciona um Container ao Container atual.
             </summary>
             <param name="p_container">Container a ser adicionado.</param>
            </member>
        <member name="M:Spartacus.Forms.Container.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Container.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Container.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Container.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Container.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Container.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Container.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Container.</param>
            </member>
        <member name="M:Spartacus.Forms.Container.GetValue">
             <summary>
             Retorna o texto ou valor atual do Container.
             </summary>
             <returns>Texto ou valor atual do Container.</returns>
            </member>
        <member name="T:Spartacus.Forms.Datetimepicker">
             <summary>
             Classe DateTimepicker.
             Representa um componente em que o usuário pode selecionar uma data e hora.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Datetimepicker.v_label">
             <summary>
             Rótulo do Datetimepicker.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Datetimepicker.v_datetimepicker">
             <summary>
             Controle nativo que representa o Datetimepicker.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Datetimepicker.v_proportion">
             <summary>
             Proporção entre o Label e o Datetimepicker.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Datetimepicker.#ctor(Spartacus.Forms.Container,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Datetimepicker" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_format">Formato a ser exibido no DateTimePicker.</param>
            </member>
        <member name="M:Spartacus.Forms.Datetimepicker.#ctor(Spartacus.Forms.Container,System.String,System.String,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Datetimepicker" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_format">Formato a ser exibido no DateTimePicker.</param>
             <param name="p_proportion">Proporção entre o Label e o DateTimePicker.</param>
            </member>
        <member name="M:Spartacus.Forms.Datetimepicker.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Datetimepicker.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Datetimepicker.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Datetimepicker.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Datetimepicker.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Datetimepicker.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Textbox.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Textbox.</param>
            </member>
        <member name="M:Spartacus.Forms.Datetimepicker.GetValue">
             <summary>
             Retorna o texto ou valor atual do Textbox.
             </summary>
             <returns>Texto ou valor atual do Textbox.</returns>
            </member>
        <member name="T:Spartacus.Forms.Exception">
             <summary>
             Classe Spartacus.Forms.Exception.
             Herda da classe <see cref="T:System.Exception" />.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Exception.v_message">
             <summary>
             Mensagem de Exceção.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Exception.#ctor">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Exception.#ctor(System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Forms.Exception.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Forms.Exception.#ctor(System.String,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Forms.Exception.#ctor(System.String,System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Forms.Exception.#ctor(System.String,System.Exception,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="T:Spartacus.Forms.Filepicker">
             <summary>
             Classe Filepicker.
             Representa um componente em que o usuário pode selecionar um arquivo.
             </summary>
            </member>
        <member name="T:Spartacus.Forms.Filepicker.Type">
             <summary>
             Tipo do diálogo do Filepicker.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Filepicker.v_label">
             <summary>
             Rótulo do Filepicker.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Filepicker.v_type">
             <summary>
             Tipo do diálogo do Filepicker.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Filepicker.v_textbox">
             <summary>
             Controle nativo que armazena o nome do arquivo.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Filepicker.v_button">
             <summary>
             Botão que mostra o diálogo do Filepicker.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Filepicker.v_filedialog">
             <summary>
             Controle nativo que representa o diálogo do Filepicker.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Filepicker.v_proportion">
             <summary>
             Proporção entre o Label e o Textbox.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.#ctor(Spartacus.Forms.Container,Spartacus.Forms.Filepicker.Type,System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Filepicker" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_type">Tipo do diálogo do Filepicker.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_filter">Filtro de arquivos a serem exibidos no diálogo do Filepicker.</param>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.#ctor(Spartacus.Forms.Container,Spartacus.Forms.Filepicker.Type,System.String,System.String,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Filepicker" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_type">Tipo do diálogo do Filepicker.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_filter">Filtro de arquivos a serem exibidos no diálogo do Filepicker.</param>
             <param name="p_proportion">Proporção entre o Label e o Textbox.</param>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Textbox.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Textbox.</param>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.GetValue">
             <summary>
             Retorna o texto ou valor atual do Textbox.
             </summary>
             <returns>Texto ou valor atual do Textbox.</returns>
            </member>
        <member name="M:Spartacus.Forms.Filepicker.OnClick(System.Object,System.EventArgs)">
             <summary>
             Evento executado quando o botão de selecionar arquivo é clicado.
             </summary>
            </member>
        <member name="T:Spartacus.Forms.FormType">
             <summary>
             Tipo do Formulário.
             </summary>
            </member>
        <member name="T:Spartacus.Forms.Form">
             <summary>
             Classe Form.
             Extende a classe <see cref="T:System.Windows.Forms.Form" />, tratando eventos de OnVisibleChanged e OnFormClosing.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Form.v_type">
             <summary>
             Tipo do Formulário.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Form.v_parent">
             <summary>
             Janela pai do Formulário atual.
             Tem valor null se o Formulário atual pertencer à Janela principal.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Form.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Form" />.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Form.#ctor(Spartacus.Forms.Window)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Form" />.
             </summary>
             <param name="p_parent">Janela pai.</param>
            </member>
        <member name="M:Spartacus.Forms.Form.OnVisibleChanged(System.Object,System.EventArgs)">
             <summary>
             Evento disparado ao mudar o atributo Visible.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Form.OnFormClosing(System.Windows.Forms.FormClosingEventArgs)">
             <summary>
             Evento disparado quando o usuário clicar no X de fechar a Janela.
             </summary>
            </member>
        <member name="T:Spartacus.Forms.Grid">
             <summary>
             Classe Grid.
             Representa um componente Grid.
             Herda da classe <see cref="T:Spartacus.Forms.Container" />. 
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Grid.v_grid">
             <summary>
             O controle do Grid propriamente dito.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Grid.v_database">
             <summary>
             Objeto de conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Grid.v_sql">
             <summary>
             Consulta SQL para alimentar o Grid.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Grid.#ctor(Spartacus.Forms.Container,System.Int32,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Grid" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_width">Largura.</param>
             <param name="p_height">Altura.</param>
            </member>
        <member name="M:Spartacus.Forms.Grid.#ctor(Spartacus.Forms.Container,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Grid" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_height">Altura.</param>
            </member>
        <member name="M:Spartacus.Forms.Grid.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Grid.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Grid.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Grid.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Grid.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Grid.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Container.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Container.</param>
            </member>
        <member name="M:Spartacus.Forms.Grid.GetValue">
             <summary>
             Retorna o texto ou valor atual do Container.
             </summary>
             <returns>Texto ou valor atual do Container.</returns>
            </member>
        <member name="M:Spartacus.Forms.Grid.Populate(Spartacus.Database.Generic,System.String)">
             <summary>
             Popula o Grid atual com os dados obtidos a partir da execução da consulta SQL no banco de dados.
             </summary>
             <param name="p_database">Objeto de conexão com o banco de dados.</param>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Forms.Grid.Populate(System.Data.DataTable)">
             <summary>
             Popula o Grid atual com os dados de um DataTable.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Grid.Populate">
             <summary>
             Popula o Grid atual com os dados obtidos a partir da execução da consulta SQL no banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Grid.CurrentRow">
             <summary>
             Retorna a linha selecionada.
             </summary>
             <returns>Linha selecionada.</returns>
            </member>
        <member name="T:Spartacus.Forms.ExtensionMethods">
             <summary>
             Classe ExtensionMethods.
             Usada somente para colocar o Grid em modo DoubleBuffered, que faz com que renderize o grid mais rápido em troca de mais memória.
             </summary>
            </member>
        <member name="T:Spartacus.Forms.Lookup">
             <summary>
             Classe Lookup.
             Representa um componente Lookup.
             Herda da classe <see cref="T:Spartacus.Forms.Container" />.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Lookup.v_label">
             <summary>
             Rótulo do Lookup.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Lookup.v_lookup">
             <summary>
             Componente Lookup.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Lookup.v_textbox">
             <summary>
             Textbox não editável, atualizado pelo componente Lookup.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Lookup.v_proportion1">
             <summary>
             Proporção entre o Label e o componente Lookup.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Lookup.v_proportion2">
             <summary>
             Proporção entre o componente Lookup e o Textbox.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Lookup.v_database">
             <summary>
             Objeto de conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Lookup.v_sql">
             <summary>
             Consulta SQL para alimentar o Lookup.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Lookup.#ctor(Spartacus.Forms.Container,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Lookup" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Rótulo do componente.</param>
            </member>
        <member name="M:Spartacus.Forms.Lookup.#ctor(Spartacus.Forms.Container,System.String,System.Int32,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Lookup" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Rótulo do componente.</param>
             <param name="p_proportion1">Proporção entre o Label e o componente Lookup.</param>
             <param name="p_proportion2">Proporção entre o componente Lookup e o Textbox.</param>
            </member>
        <member name="M:Spartacus.Forms.Lookup.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Lookup.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Lookup.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Lookup.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Lookup.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Lookup.SetValue(System.String)">
             <summary>
             Informa o valor do componente Lookup.
             Usado para mostrar um formulário já preenchido ao usuário.
             </summary>
             <param name="p_text">Valor do componente (não do textbox).</param>
            </member>
        <member name="M:Spartacus.Forms.Lookup.GetValue">
             <summary>
             Retorna o valor atual do componente.
             </summary>
             <returns>Valor atual do componente.</returns>
            </member>
        <member name="M:Spartacus.Forms.Lookup.Populate(Spartacus.Database.Generic,System.String,System.String,System.String,System.String)">
             <summary>
             Popula o componente Lookup com os dados obtidos a partir da execução da consulta SQL no banco de dados.
             </summary>
             <param name="p_database">Objeto de conexão com o banco de dados.</param>
             <param name="p_sql">SQl a ser executado no banco de dados.</param>
             <param name="p_columnvalue">Coluna de valor.</param>
             <param name="p_columndisplay">Coluna para mostrar no Textbox.</param>
             <param name="p_columnwidths">Larguras das colunas mostradas no Lookup, separadas por ponto-e-vírgula.</param>
            </member>
        <member name="M:Spartacus.Forms.Lookup.Populate(Spartacus.Database.Generic,System.String,System.String)">
             <summary>
             Popula o componente Lookup com os dados obtidos a partir da execução da consulta SQL no banco de dados.
             </summary>
             <param name="p_database">Objeto de conexão com o banco de dados.</param>
             <param name="p_sql">SQl a ser executado no banco de dados.</param>
             <param name="p_columnwidths">Larguras das colunas mostradas no Lookup, separadas por ponto-e-vírgula.</param>
            </member>
        <member name="M:Spartacus.Forms.Lookup.Populate(Spartacus.Database.Generic,System.String)">
             <summary>
             Popula o componente Lookup com os dados obtidos a partir da execução da consulta SQL no banco de dados.
             </summary>
             <param name="p_database">Objeto de conexão com o banco de dados.</param>
             <param name="p_sql">SQl a ser executado no banco de dados.</param>
            </member>
        <member name="M:Spartacus.Forms.Lookup.Populate">
             <summary>
             Popula o componente Lookup com os dados obtidos a partir da execução da consulta SQL no banco de dados.
             </summary>
            </member>
        <member name="T:Spartacus.Forms.Memobox">
             <summary>
             Classe Memobox.
             Representa um componente em que o usuário pode digitar texto em várias linhas.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Memobox.v_label">
             <summary>
             Rótulo do Memobox.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Memobox.v_textbox">
             <summary>
             Controle nativo que representa o Memobox.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Memobox.#ctor(Spartacus.Forms.Container,System.String,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Memobox" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_width">Largura.</param>
             <param name="p_height">Altura.</param>
            </member>
        <member name="M:Spartacus.Forms.Memobox.#ctor(Spartacus.Forms.Container,System.String,System.Int32,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Memobox" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_width">Largura.</param>
             <param name="p_height">Altura.</param>
            </member>
        <member name="M:Spartacus.Forms.Memobox.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Memobox.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Memobox.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Memobox.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Memobox.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Memobox.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Textbox.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Textbox.</param>
            </member>
        <member name="M:Spartacus.Forms.Memobox.GetValue">
             <summary>
             Retorna o texto ou valor atual do Textbox.
             </summary>
             <returns>Texto ou valor atual do Textbox.</returns>
            </member>
        <member name="T:Spartacus.Forms.Menu">
             <summary>
             Classe Menu.
             Representa um componente Menu, que normalmente fica no topo de uma Janela.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Menu.v_menustrip">
             <summary>
             Controle nativo MenuStrip.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Menu.#ctor(Spartacus.Forms.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Menu" />.
             </summary>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Forms.Menu.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Menu.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Menu.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Menu.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Menu.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Menu.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Container.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Container.</param>
            </member>
        <member name="M:Spartacus.Forms.Menu.GetValue">
             <summary>
             Retorna o texto ou valor atual do Container.
             </summary>
             <returns>Texto ou valor atual do Container.</returns>
            </member>
        <member name="M:Spartacus.Forms.Menu.AddGroup(System.String)">
             <summary>
             Adiciona um grupo ao Menu.
             </summary>
             <returns>Retorna o grupo, para poder adicionar outros grupos ou itens a ele.</returns>
             <param name="p_text">Texto exibido no menu para representar o grupo.</param>
            </member>
        <member name="M:Spartacus.Forms.Menu.AddGroup(Spartacus.Forms.Menugroup,System.String)">
             <summary>
             Adiciona um grupo a um grupo existente.
             </summary>
             <returns>Retorna o grupo, para poder adicionar outros grupos ou itens a ele.</returns>
             <param name="p_menugroup">Grupo existente.</param>
             <param name="p_text">Texto exibido no menu para representar o grupo.</param>
            </member>
        <member name="M:Spartacus.Forms.Menu.AddItem(Spartacus.Forms.Menugroup,System.String,System.EventHandler)">
             <summary>
             Adiciona um item a um grupo do Menu.
             </summary>
             <param name="p_menugroup">Grupo existente.</param>
             <param name="p_text">Texto exibido no menu para representar o item.</param>
             <param name="p_delegate">Método executado ao clicar no item do Menu.</param>
            </member>
        <member name="T:Spartacus.Forms.Passwordbox">
             <summary>
             Classe Passwordbox.
             Representa um componente em que o usuário pode digitar texto em uma única linha, porém o texto é omitido.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Passwordbox.v_label">
             <summary>
             Rótulo do Passwordbox.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Passwordbox.v_textbox">
             <summary>
             Controle nativo que representa o Passwordbox.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Passwordbox.v_proportion">
             <summary>
             Proporção entre o Label e o Textbox.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.#ctor(Spartacus.Forms.Container,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Passwordbox" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.#ctor(Spartacus.Forms.Container,System.String,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Passwordbox" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_proportion">Proporção entre o Label e o Textbox.</param>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Textbox.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Textbox.</param>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.SetEncryptedValue(System.String,System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Textbox.
             Usado para mostrar ao usuário um formulário já preenchido.
             O texto é passado criptografado, e é descriptografado para ser exibido ao usuário.
             </summary>
             <param name="p_text">Texto a ser mostrado no Textbox.</param>
             <param name="p_decryptpassword">Senha para descriptografar.</param>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.GetValue">
             <summary>
             Retorna o texto ou valor atual do Textbox.
             </summary>
             <returns>Texto ou valor atual do Textbox.</returns>
            </member>
        <member name="M:Spartacus.Forms.Passwordbox.GetEncryptedValue(System.String)">
             <summary>
             Retorna o texto ou valor atual do Textbox, porém criptografado.
             </summary>
             <returns>Texto ou valor atual do Textbox, porém criptografado.</returns>
             <param name="p_encryptpassword">Senha para criptografar.</param>
            </member>
        <member name="T:Spartacus.Forms.Progressbar">
             <summary>
             Classe Progressbar.
             Representa um componente que mostra o progresso de execução de alguma tarefa.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Progressbar.v_label">
             <summary>
             Rótulo do Progressbar.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Progressbar.v_progressbar">
             <summary>
             Controle nativo que representa o Progressbar.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Progressbar.#ctor(Spartacus.Forms.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Progressbar" />.
             </summary>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Forms.Progressbar.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Progressbar.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Progressbar.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Progressbar.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Progressbar.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Progressbar.SetValue(System.String)">
             <summary>
             Informa o texto a ser mostrado no Label.
             </summary>
             <param name="p_text">Texto a ser mostrado no Label.</param>
            </member>
        <member name="M:Spartacus.Forms.Progressbar.SetValue(System.String,System.Int32)">
             <summary>
             Informa o texto a ser mostrado no Label e valor a ser mostrado no Progressbar.
             </summary>
             <param name="p_text">Texto a ser mostrado no Label.</param>
             <param name="p_value">Valor a ser mostrado no Progressbar</param>
            </member>
        <member name="M:Spartacus.Forms.Progressbar.GetValue">
             <summary>
             Retorna o texto ou valor atual do Textbox.
             </summary>
             <returns>Texto ou valor atual do Textbox.</returns>
            </member>
        <member name="T:Spartacus.Forms.Textbox">
             <summary>
             Classe Textbox.
             Representa um componente em que o usuário pode digitar texto em uma única linha.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Textbox.v_label">
             <summary>
             Rótulo do Textbox.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Textbox.v_textbox">
             <summary>
             Controle nativo que representa o Textbox.
             </summary>
            </member>
        <member name="F:Spartacus.Forms.Textbox.v_proportion">
             <summary>
             Proporção entre o Label e o Textbox.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Textbox.#ctor(Spartacus.Forms.Container,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Textbox" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
            </member>
        <member name="M:Spartacus.Forms.Textbox.#ctor(Spartacus.Forms.Container,System.String,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Textbox" />.
             </summary>
             <param name="p_parent">Container pai.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_proportion">Proporção entre o Label e o Textbox.</param>
            </member>
        <member name="M:Spartacus.Forms.Textbox.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona o Componente atual.
             Também reposiciona dentro do Container pai, se for necessário.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Textbox.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Textbox.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Textbox.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Textbox.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Textbox.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Textbox.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Textbox.</param>
            </member>
        <member name="M:Spartacus.Forms.Textbox.GetValue">
             <summary>
             Retorna o texto ou valor atual do Textbox.
             </summary>
             <returns>Texto ou valor atual do Textbox.</returns>
            </member>
        <member name="T:Spartacus.Forms.Window">
             <summary>
             Classe Window.
             Representa uma Janela.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Window.#ctor(System.String,System.Int32,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Window" />.
             </summary>
             <param name="p_text">Título da Janela.</param>
             <param name="p_width">Largura da Janela.</param>
             <param name="p_height">Altura da Janela.</param>
            </member>
        <member name="M:Spartacus.Forms.Window.#ctor(System.String,System.Int32,System.Int32,Spartacus.Forms.Window)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Forms.Window" />.
             </summary>
             <param name="p_text">Título da Janela.</param>
             <param name="p_width">Largura da Janela.</param>
             <param name="p_height">Altura da Janela.</param>
             <param name="p_parent">Janela pai.</param>
            </member>
        <member name="M:Spartacus.Forms.Window.OnResize(System.Object,System.EventArgs)">
             <summary>
             Evento disparado ao ocorrer o evento de redimensionamento da Janela.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Window.Run">
             <summary>
             Inicializa o sistema gráfico System.Windows.Forms.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Window.Resize(System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>
             Redimensiona a Janela atual.
             Também redimensiona todos os Containers filhos.
             </summary>
             <param name="p_newwidth">Nova largura.</param>
             <param name="p_newheight">Nova altura.</param>
             <param name="p_newposx">Nova posição X.</param>
             <param name="p_newposy">Nova posição Y.</param>
            </member>
        <member name="M:Spartacus.Forms.Window.Enable">
             <summary>
             Habilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Window.Disable">
             <summary>
             Desabilita o Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Window.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Window.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Window.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Container.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Container.</param>
            </member>
        <member name="M:Spartacus.Forms.Window.GetValue">
             <summary>
             Retorna o texto ou valor atual do Container.
             </summary>
             <returns>Texto ou valor atual do Container.</returns>
            </member>
        <member name="M:Spartacus.Forms.Window.Show">
             <summary>
             Mostra a Janela atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Window.Hide">
             <summary>
             Esconde a Janela atual.
             </summary>
            </member>
        <member name="M:Spartacus.Forms.Window.Load">
             <summary>
             Carrega a Janela atual para a memória.
             Deve ser chamada após a instanciação da Janela.
             Na prática, apenas mostra e em seguida esconde a Janela.
             </summary>
            </member>
        <member name="T:Spartacus.Database.Access">
             <summary>
             Classe Spartacus.Database.Access.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o driver JDBC UCanConnect (juntamente com Jackcess, HSQLDB, todos emulados por IKVM) para acessar um arquivo MDB ou ACCBD Microsoft Access.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Access.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Access.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Access.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Access.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Access.#ctor(System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Access" />.
             </summary>
             <param name="p_file">
             Caminho para o arquivo MDB ou ACCDB.
             </param>
            </member>
        <member name="M:Spartacus.Database.Access.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Access.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Access.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Access.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Access.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Access.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Access.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Access.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Access.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Access.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Access.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Access.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Access.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Access.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Access.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Access.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Access.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Access.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Access.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Access.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Access.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Access.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Access.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Access.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Access.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Access.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Access.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Access.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Access.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Access.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Access.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Access.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Access.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Database.Sqlce">
             <summary>
             Classe Spartacus.Database.Sqlce.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o System.Data.SqlServerCe para acessar um SGBD MS SQL Compact Edition.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Sqlce.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Sqlce.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Sqlce.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Sqlce.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlce.#ctor">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Sqlce" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlce.#ctor(System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Sqlce" />.
             </summary>
             <param name="p_file">
             Caminho para o arquivo SDF.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Sqlce.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Sqlce.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Sqlce.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlce.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Sqlce.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Sqlce.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Database.FbEmbed">
             <summary>
             Classe Spartacus.Database.FbEmbed.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o Firebird .NET Provider para acessar um SGBD Firebird embarcado.
             </summary>
            </member>
        <member name="F:Spartacus.Database.FbEmbed.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.FbEmbed.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.FbEmbed.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.FbEmbed.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.#ctor">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.FbEmbed" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.#ctor(System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.FbEmbed" />.
             </summary>
             <param name="p_file">
             Caminho completo para o arquivo FDB ou GDB.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.#ctor(System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.FbEmbed" />.
             </summary>
             <param name="p_file">
             Caminho completo para o arquivo FDB ou GDB.
             </param>
             <param name="p_user">
             Usuário do Firebird.
             </param>
             <param name="p_password">
             Senha do Firebird.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.FbEmbed.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="T:Spartacus.Net.AvailableEventArgs">
             <summary>
             Classe AvailableEventArgs.
             Representa os argumentos do evento de Dados Disponíveis.
             Herda da classe <see cref="T:System.EventArgs" />.
             </summary>
            </member>
        <member name="F:Spartacus.Net.AvailableEventArgs.v_serverip">
             <summary>
             IP do Servidor.
             </summary>
            </member>
        <member name="F:Spartacus.Net.AvailableEventArgs.v_serverport">
             <summary>
             Porta do Servidor.
             </summary>
            </member>
        <member name="F:Spartacus.Net.AvailableEventArgs.v_clientip">
             <summary>
             IP do Cliente.
             </summary>
            </member>
        <member name="F:Spartacus.Net.AvailableEventArgs.v_clientport">
             <summary>
             Porta do Cliente.
             </summary>
            </member>
        <member name="F:Spartacus.Net.AvailableEventArgs.v_index">
             <summary>
             Índice do Cliente na lista de Clientes.
             </summary>
            </member>
        <member name="M:Spartacus.Net.AvailableEventArgs.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.AvailableEventArgs" />.
             </summary>
            </member>
        <member name="T:Spartacus.Net.AvailableEventClass">
             <summary>
             Classe AvailableEventClass.
             Representa um evento de Dados Disponíveis.
             </summary>
            </member>
        <member name="T:Spartacus.Net.AvailableEventClass.AvailableEventHandler">
             <summary>
             Delegate para gerenciar o evento de Dados Disponíveis.
             </summary>
            </member>
        <member name="E:Spartacus.Net.AvailableEventClass.AvailableEvent">
             <summary>
             Evento de Dados Disponíveis propriamente dito.
             </summary>
            </member>
        <member name="F:Spartacus.Net.AvailableEventClass.AvailableEventArgs">
             <summary>
             Argumentos do evento de Dados Disponíveis.
             </summary>
            </member>
        <member name="M:Spartacus.Net.AvailableEventClass.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.AvailableEventClass" />.
             </summary>
            </member>
        <member name="M:Spartacus.Net.AvailableEventClass.FireEvent(System.String,System.Int32,System.String,System.Int32)">
             <summary>
             Dispara o evento de Dados Disponíveis.
             </summary>
             <param name="p_serverip">IP do Servidor.</param>
             <param name="p_serverport">Porta do Servidor.</param>
             <param name="p_clientip">IP do Cliente.</param>
             <param name="p_clientport">Porta do Cliente.</param>
            </member>
        <member name="M:Spartacus.Net.AvailableEventClass.FireEvent(System.String,System.Int32,System.String,System.Int32,System.Int32)">
             <summary>
             Dispara o evento de Dados Disponíveis.
             </summary>
             <param name="p_serverip">IP do Servidor.</param>
             <param name="p_serverport">Porta do Servidor.</param>
             <param name="p_clientip">IP do Cliente.</param>
             <param name="p_clientport">Porta do Cliente.</param>
             <param name="p_index">Índice do Cliente.</param>
            </member>
        <member name="M:Spartacus.Net.AvailableEventClass.Thread">
             <summary>
             Executes the event in a thread.
             </summary>
            </member>
        <member name="T:Spartacus.Net.Client">
             <summary>
             Classe Client.
             Herda da classe <see cref="T:Spartacus.Net.Endpoint" />.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Client.v_serverip">
             <summary>
             IP do servidor.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Client.v_serverport">
             <summary>
             Porta do servidor.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Client.#ctor(System.String,System.Int32,System.String,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.Client" />.
             </summary>
             <param name="p_serverip">IP do servidor.</param>
             <param name="p_serverport">Porta do servidor.</param>
             <param name="p_clientip">IP do cliente.</param>
             <param name="p_clientport">Porta do cliente.</param>
            </member>
        <member name="M:Spartacus.Net.Client.Connect">
             <summary>
             Conecta-se com o servidor.
             </summary>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer se não conseguir se conectar com o servidor.</exception>
            </member>
        <member name="T:Spartacus.Net.ConnectEventArgs">
             <summary>
             Classe ConnectEventArgs.
             Representa os argumentos do evento de Conexão.
             Herda da classe <see cref="T:System.EventArgs" />.
             </summary>
            </member>
        <member name="F:Spartacus.Net.ConnectEventArgs.v_serverip">
             <summary>
             IP do Servidor.
             </summary>
            </member>
        <member name="F:Spartacus.Net.ConnectEventArgs.v_serverport">
             <summary>
             Porta do Servidor.
             </summary>
            </member>
        <member name="F:Spartacus.Net.ConnectEventArgs.v_clientip">
             <summary>
             IP do Cliente.
             </summary>
            </member>
        <member name="F:Spartacus.Net.ConnectEventArgs.v_clientport">
             <summary>
             Porta do Cliente.
             </summary>
            </member>
        <member name="F:Spartacus.Net.ConnectEventArgs.v_index">
             <summary>
             Índice do Cliente na lista de Clientes.
             </summary>
            </member>
        <member name="M:Spartacus.Net.ConnectEventArgs.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.ConnectEventArgs" />.
             </summary>
            </member>
        <member name="T:Spartacus.Net.ConnectEventClass">
             <summary>
             Classe ConnectEventClass.
             Representa um evento de Conexão.
             </summary>
            </member>
        <member name="T:Spartacus.Net.ConnectEventClass.ConnectEventHandler">
             <summary>
             Delegate para gerenciar o evento de Conexão.
             </summary>
            </member>
        <member name="E:Spartacus.Net.ConnectEventClass.ConnectEvent">
             <summary>
             Evento de Conexão propriamente dito.
             </summary>
            </member>
        <member name="F:Spartacus.Net.ConnectEventClass.ConnectEventArgs">
             <summary>
             Argumentos do evento de Conexão.
             </summary>
            </member>
        <member name="M:Spartacus.Net.ConnectEventClass.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.ConnectEventClass" />.
             </summary>
            </member>
        <member name="M:Spartacus.Net.ConnectEventClass.FireEvent(System.String,System.Int32,System.String,System.Int32)">
             <summary>
             Dispara o evento de Conexão.
             </summary>
             <param name="p_serverip">IP do Servidor.</param>
             <param name="p_serverport">Porta do Servidor.</param>
             <param name="p_clientip">IP do Cliente.</param>
             <param name="p_clientport">Porta do Cliente.</param>
            </member>
        <member name="M:Spartacus.Net.ConnectEventClass.FireEvent(System.String,System.Int32,System.String,System.Int32,System.Int32)">
             <summary>
             Dispara o evento de Conexão.
             </summary>
             <param name="p_serverip">IP do Servidor.</param>
             <param name="p_serverport">Porta do Servidor.</param>
             <param name="p_clientip">IP do Cliente.</param>
             <param name="p_clientport">Porta do Cliente.</param>
             <param name="p_index">Índice do Cliente.</param>
            </member>
        <member name="M:Spartacus.Net.ConnectEventClass.Thread">
             <summary>
             Executes the event in a thread.
             </summary>
            </member>
        <member name="T:Spartacus.Net.DisconnectEventArgs">
             <summary>
             Classe DisconnectEventArgs.
             Representa os argumentos do evento de Desconexão.
             Herda da classe <see cref="T:System.EventArgs" />.
             </summary>
            </member>
        <member name="F:Spartacus.Net.DisconnectEventArgs.v_serverip">
             <summary>
             IP do Servidor.
             </summary>
            </member>
        <member name="F:Spartacus.Net.DisconnectEventArgs.v_serverport">
             <summary>
             Porta do Servidor.
             </summary>
            </member>
        <member name="F:Spartacus.Net.DisconnectEventArgs.v_clientip">
             <summary>
             IP do Cliente.
             </summary>
            </member>
        <member name="F:Spartacus.Net.DisconnectEventArgs.v_clientport">
             <summary>
             Porta do Cliente.
             </summary>
            </member>
        <member name="F:Spartacus.Net.DisconnectEventArgs.v_index">
             <summary>
             Índice do Cliente na lista de Clientes.
             </summary>
            </member>
        <member name="M:Spartacus.Net.DisconnectEventArgs.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.DisconnectEventArgs" />.
             </summary>
            </member>
        <member name="T:Spartacus.Net.DisconnectEventClass">
             <summary>
             Classe DisconnectEventClass.
             Representa um evento de Desconexão.
             </summary>
            </member>
        <member name="T:Spartacus.Net.DisconnectEventClass.DisconnectEventHandler">
             <summary>
             Delegate para gerenciar o evento de Desconexão.
             </summary>
            </member>
        <member name="E:Spartacus.Net.DisconnectEventClass.DisconnectEvent">
             <summary>
             Evento de Desconexão propriamente dito.
             </summary>
            </member>
        <member name="F:Spartacus.Net.DisconnectEventClass.DisconnectEventArgs">
             <summary>
             Argumentos do evento de Desconexão.
             </summary>
            </member>
        <member name="M:Spartacus.Net.DisconnectEventClass.#ctor">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.DisconnectEventClass" />.
             </summary>
            </member>
        <member name="M:Spartacus.Net.DisconnectEventClass.FireEvent(System.String,System.Int32,System.String,System.Int32)">
             <summary>
             Dispara o evento de Desconexão.
             </summary>
             <param name="p_serverip">IP do Servidor.</param>
             <param name="p_serverport">Porta do Servidor.</param>
             <param name="p_clientip">IP do Cliente.</param>
             <param name="p_clientport">Porta do Cliente.</param>
            </member>
        <member name="M:Spartacus.Net.DisconnectEventClass.FireEvent(System.String,System.Int32,System.String,System.Int32,System.Int32)">
             <summary>
             Dispara o evento de Desconexão.
             </summary>
             <param name="p_serverip">IP do Servidor.</param>
             <param name="p_serverport">Porta do Servidor.</param>
             <param name="p_clientip">IP do Cliente.</param>
             <param name="p_clientport">Porta do Cliente.</param>
             <param name="p_index">Índice do Cliente.</param>
            </member>
        <member name="M:Spartacus.Net.DisconnectEventClass.Thread">
             <summary>
             Executes the event in a thread.
             </summary>
            </member>
        <member name="T:Spartacus.Net.Endpoint">
             <summary>
             Classe Endpoint.
             Representa um ponto de comunicação, que pode ser tanto um cliente ou um servidor.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Endpoint.v_ip">
             <summary>
             IP do ponto de comunicação.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Endpoint.v_port">
             <summary>
             Porta do ponto de comunicação.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Endpoint.v_sockets">
             <summary>
             Sockets usado para comunicação.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Endpoint.v_streams">
             <summary>
             Streams usadas para comunicação.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Endpoint.v_buffersize">
             <summary>
             Tamanho do buffer para envio e recebimento.
             O padrão é 1 MB.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Endpoint.v_recvbuffer">
             <summary>
             Buffer usado para envio e recebimento.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Endpoint.#ctor(System.String,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.Endpoint" />.
             </summary>
             <param name="p_ip">IP do ponto de comunicação.</param>
             <param name="p_port">Porta do ponto de comunicação.</param>
            </member>
        <member name="M:Spartacus.Net.Endpoint.Recv(System.Int32)">
             <summary>
             Recebe um pacote.
             </summary>
             <returns>Pacote.</returns>
             <param name="p_endpoint">Ponto de comunicação.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir receber o pacote.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.Recv">
             <summary>
             Recebe um pacote.
             </summary>
             <returns>Pacote.</returns>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir receber o pacote.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.RecvString(System.Int32)">
             <summary>
             Recebe uma string.
             Pode ser necessário vários pacotes para montar essa string.
             </summary>
             <returns>String.</returns>
             <param name="p_endpoint">Ponto de comunicação.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir receber a string.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.RecvString">
             <summary>
             Recebe uma string.
             Pode ser necessário vários pacotes para montar essa string.
             </summary>
             <returns>String.</returns>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir receber a string.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.RecvDataTable(System.Int32)">
             <summary>
             Recebe uma <see cref="T:System.Data.DataTable" />.
             Recebe um pacote por linha da <see cref="T:System.Data.DataTable" />.
             </summary>
             <returns><see cref="T:System.Data.DataTable" />.</returns>
             <param name="p_endpoint">Ponto de comunicação.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir receber a <see cref="T:System.Data.DataTable" />.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.RecvDataTable">
             <summary>
             Recebe uma <see cref="T:System.Data.DataTable" />.
             Recebe um pacote por linha da <see cref="T:System.Data.DataTable" />.
             </summary>
             <returns><see cref="T:System.Data.DataTable" />.</returns>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir receber a <see cref="T:System.Data.DataTable" />.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.RecvFile(System.Int32)">
             <summary>
             Recebe um arquivo.
             </summary>
             <returns>Nome do arquivo.</returns>
             <param name="p_endpoint">Ponto de comunicação.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir receber o arquivo.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.RecvFile">
             <summary>
             Recebe um arquivo.
             </summary>
             <returns>Nome do arquivo.</returns>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir receber o arquivo.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.Send(System.Int32,Spartacus.Net.Packet)">
             <summary>
             Envia um pacote.
             </summary>
             <param name="p_endpoint">Ponto de comunicação.</param>
             <param name="p_packet">Pacote.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir enviar o pacote.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.Send(Spartacus.Net.Packet)">
             <summary>
             Envia um pacote.
             </summary>
             <param name="p_packet">Pacote.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir enviar o pacote.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.SendString(System.Int32,System.String)">
             <summary>
             Envia uma string.
             Pode ser necessário quebrar essa string em vários pacotes.
             </summary>
             <param name="p_endpoint">Ponto de comunicação.</param>
             <param name="p_text">String.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir enviar a string.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.SendString(System.String)">
             <summary>
             Envia uma string.
             Pode ser necessário quebrar essa string em vários pacotes.
             </summary>
             <param name="p_text">String.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir enviar a string.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.SendDataTable(System.Int32,System.Data.DataTable)">
             <summary>
             Envia uma <see cref="T:System.Data.DataTable" />.
             Envia uma linha por pacote.
             </summary>
             <param name="p_endpoint">Ponto de comunicação.</param>
             <param name="p_table"><see cref="T:System.Data.DataTable" />.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir enviar a <see cref="T:System.Data.DataTable" />.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.SendDataTable(System.Data.DataTable)">
             <summary>
             Envia uma <see cref="T:System.Data.DataTable" />.
             Envia uma linha por pacote.
             </summary>
             <param name="p_table"><see cref="T:System.Data.DataTable" />.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir enviar a <see cref="T:System.Data.DataTable" />.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.SendFile(System.Int32,System.String)">
             <summary>
             Envia um arquivo.
             </summary>
             <param name="p_endpoint">Ponto de comunicação.</param>
             <param name="p_filename">Nome do arquivo.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir enviar o arquivo.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.SendFile(System.String)">
             <summary>
             Envia um arquivo.
             </summary>
             <param name="p_filename">Nome do arquivo.</param>
             <exception cref="T:Spartacus.Net.Exception">Exceção pode ocorrer quando não conseguir enviar o arquivo.</exception>
            </member>
        <member name="M:Spartacus.Net.Endpoint.Stop(System.Int32)">
             <summary>
             Fecha o canal de comunicação.
             </summary>
             <param name="p_endpoint">Ponto de comunicação.</param>
            </member>
        <member name="M:Spartacus.Net.Endpoint.Stop">
             <summary>
             Fecha o canal de comunicação.
             </summary>
            </member>
        <member name="T:Spartacus.Net.Exception">
             <summary>
             Classe Spartacus.Net.Exception.
             Herda da classe <see cref="T:System.Exception" />.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Exception.v_message">
             <summary>
             Mensagem de Exceção.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Exception.#ctor">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Exception.#ctor(System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Net.Exception.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Net.Exception.#ctor(System.String,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="M:Spartacus.Net.Exception.#ctor(System.String,System.Exception)">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_message">
             Mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
            </member>
        <member name="M:Spartacus.Net.Exception.#ctor(System.String,System.Exception,System.Object[])">
             <summary>
             Inicializa uma nova instância da classe.
             </summary>
             <param name="p_format">
             Formato da mensagem descritiva da exceção.
             </param>
             <param name="p_inner">
             Exceção interna, encapsulada por esta exceção.
             </param>
             <param name="p_args">
             Argumentos da mensagem descritiva da exceção.
             </param>
            </member>
        <member name="T:Spartacus.Net.PacketType">
             <summary>
             Tipo do Pacote.
             </summary>
            </member>
        <member name="T:Spartacus.Net.Packet">
             <summary>
             Classe Packet.
             Representa um pacote de dados enviado de um Endpoint a outro.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Packet.v_type">
             <summary>
             Tipo do Pacote.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Packet.v_sequence">
             <summary>
             Sequência atual do Pacote dentro da Mensagem.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Packet.v_numpackets">
             <summary>
             Número total de pacotes da Mensagem.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Packet.v_data">
             <summary>
             Dados do Pacote.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Packet.v_buffer">
             <summary>
             Buffer que contém o pacote inteiro em bytes.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Packet.v_encoding">
             <summary>
             Codificação usada para converter de string para bytes e de bytes para string.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Packet.#ctor(Spartacus.Net.PacketType)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.Packet" />.
             </summary>
             <param name="p_type">Tipo do Pacote.</param>
            </member>
        <member name="M:Spartacus.Net.Packet.#ctor(Spartacus.Net.PacketType,System.Byte[])">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.Packet" />.
             </summary>
             <param name="p_type">Tipo do Pacote.</param>
             <param name="p_data">Dados do Pacote.</param>
            </member>
        <member name="M:Spartacus.Net.Packet.#ctor(Spartacus.Net.PacketType,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.Packet" />.
             </summary>
             <param name="p_type">Tipo do Pacote.</param>
             <param name="p_data">Dados do Pacote.</param>
            </member>
        <member name="M:Spartacus.Net.Packet.#ctor(Spartacus.Net.PacketType,System.Int32,System.Int32,System.Byte[])">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.Packet" />.
             </summary>
             <param name="p_type">Tipo do Pacote.</param>
             <param name="p_sequence">Sequência atual do Pacote dentro da Mensagem.</param>
             <param name="p_numpackets">Número total de pacotes da Mensagem.</param>
             <param name="p_data">Dados do Pacote.</param>
            </member>
        <member name="M:Spartacus.Net.Packet.#ctor(Spartacus.Net.PacketType,System.Int32,System.Int32,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.Packet" />.
             </summary>
             <param name="p_type">Tipo do Pacote.</param>
             <param name="p_sequence">Sequência atual do Pacote dentro da Mensagem.</param>
             <param name="p_numpackets">Número total de pacotes da Mensagem.</param>
             <param name="p_data">Dados do Pacote.</param>
            </member>
        <member name="M:Spartacus.Net.Packet.#ctor(System.Byte[])">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.Packet" />.
             Esse construtor é usado para extrair um Pacote dos dados recebidos.
             </summary>
             <param name="p_buffer">Buffer que contém o pacote inteiro em bytes.</param>
            </member>
        <member name="M:Spartacus.Net.Packet.BuildBuffer">
             <summary>
             Constrói o buffer de envio a partir dos dados do Pacote.
             Usado para enviar um Pacote.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Packet.ParseBuffer">
             <summary>
             Constrói um Pacote a partir dos dados recebidos.
             Usado para receber um Pacote.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Packet.GetString">
             <summary>
             Retorna os dados do Pacote convertidos para string.
             </summary>
             <returns>Dados convertidos para string.</returns>
            </member>
        <member name="T:Spartacus.Net.Server">
             <summary>
             Classe Server.
             Herda da classe <see cref="T:Spartacus.Net.Endpoint" />.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_status">
             <summary>
             Situação do servidor: escutando ou não escutando.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_numclients">
             <summary>
             Número de clientes conectados.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_clienthandlers">
             <summary>
             Gerenciadores de conexão com clientes.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_connect">
             <summary>
             Objeto que gerencia o evento de Conexão.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_disconnect">
             <summary>
             Objeto que gerencia o evento de Desconexão.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_available">
             <summary>
             Objeto que gerencia o evento de Conexão.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_listener">
             <summary>
             Listener usado para recebe conexões de clientes.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_threadaccept">
             <summary>
             Thread para escuta de novos clientes.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_threadcheck">
             <summary>
             Thread para verificação de clientes conectados.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_threadclean">
             <summary>
             Thread para limpeza de clientes que já foram desconectados.
             </summary>
            </member>
        <member name="F:Spartacus.Net.Server.v_lock">
             <summary>
             Semáforo para controle de pool de clientes.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Server.#ctor(System.String,System.Int32)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Net.Server" />.
             </summary>
             <param name="p_ip">IP do Servidor.</param>
             <param name="p_port">Porta do Servidor.</param>
            </member>
        <member name="M:Spartacus.Net.Server.Accept">
             <summary>
             Escuta por conexões de clientes e as aceita.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Server.ThreadAccept">
             <summary>
             Thread para escuta de novos clientes.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Server.ThreadCheck">
             <summary>
             Thread para verificação de clientes conectados.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Server.ThreadClean">
             <summary>
             Thread para limpeza de clientes que já foram desconectados.
             </summary>
            </member>
        <member name="M:Spartacus.Net.Server.StopClient(System.Int32)">
             <summary>
             Encerra a conexão com um cliente.
             </summary>
             <param name="p_clientid">Código do cliente.</param>
            </member>
        <member name="M:Spartacus.Net.Server.StopServer">
             <summary>
             Encerra o Servidor.
             </summary>
            </member>
        <member name="T:Spartacus.Web.Buttons">
             <summary>
             Classe Buttons.
             Herda da classe <see cref="T:Spartacus.Web.Container" /> 
             Representa um componente com um ou mais botões.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Buttons.v_list">
             <summary>
             Lista de botões.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Buttons.v_arrayparams">
             <summary>
             Se os parâmetros devem estar na forma de array.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Buttons.#ctor(Spartacus.Web.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Buttons" />.
             </summary>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Web.Buttons.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Buttons.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Buttons.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Container.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Container.</param>
            </member>
        <member name="M:Spartacus.Web.Buttons.GetValue">
             <summary>
             Retorna o texto ou valor atual do Container.
             </summary>
             <returns>Texto ou valor atual do Container.</returns>
            </member>
        <member name="M:Spartacus.Web.Buttons.AddButton(System.String,System.String,System.String)">
             <summary>
             Adiciona um botão à lista de botões.
             </summary>
             <param name="p_id">Identificador do botão.</param>
             <param name="p_text">Texto do botão.</param>
             <param name="p_onclick">Função JavaScript chamada quando o usuário clicar no botão.</param>
            </member>
        <member name="M:Spartacus.Web.Buttons.AddButton(System.String,System.String,System.String,System.String)">
             <summary>
             Adiciona um botão à lista de botões.
             </summary>
             <param name="p_id">Identificador do botão.</param>
             <param name="p_text">Texto do botão.</param>
             <param name="p_icon">Ícone do botão.</param>
             <param name="p_onclick">Função JavaScript chamada quando o usuário clicar no botão.</param>
            </member>
        <member name="M:Spartacus.Web.Buttons.AddButton(System.String,System.String,System.String,System.Boolean)">
             <summary>
             Adiciona um botão à lista de botões.
             </summary>
             <param name="p_id">Identificador do botão.</param>
             <param name="p_text">Texto do botão.</param>
             <param name="p_onclick">Função JavaScript chamada quando o usuário clicar no botão.</param>
             <param name="p_arrayparams">Se os parâmetros devem estar na forma de array.</param>
            </member>
        <member name="M:Spartacus.Web.Buttons.AddButton(System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Adiciona um botão à lista de botões.
             </summary>
             <param name="p_id">Identificador do botão.</param>
             <param name="p_text">Texto do botão.</param>
             <param name="p_icon">Ícone do botão.</param>
             <param name="p_onclick">Função JavaScript chamada quando o usuário clicar no botão.</param>
             <param name="p_arrayparams">Se os parâmetros devem estar na forma de array.</param>
            </member>
        <member name="M:Spartacus.Web.Buttons.Render">
             <summary>
             Renderiza o HTML do Container.
             </summary>
            </member>
        <member name="T:Spartacus.Web.Container">
             <summary>
             Classe Container.
             Representa um formulário (janela), painel, ou outro componente que contenha outros componentes.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Container.v_id">
             <summary>
             Identificador do Container atual.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Container.v_parent">
             <summary>
             Container pai do Container atual.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Container.v_containers">
             <summary>
             Lista de Containers filhos do Container atual.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Container.v_type">
             <summary>
             Tipo do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Container.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Container" />.
             </summary>
             <param name="p_id">Identificador do Container atual.</param>
            </member>
        <member name="M:Spartacus.Web.Container.#ctor(System.String,Spartacus.Web.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Container" />.
             </summary>
             <param name="p_id">Identificador do Container atual.</param>
             <param name="p_parent">Container pai do Container atual.</param>
            </member>
        <member name="M:Spartacus.Web.Container.Add(Spartacus.Web.Container)">
             <summary>
             Adiciona um Container ao Container atual.
             </summary>
             <param name="p_container">Container a ser adicionado.</param>
            </member>
        <member name="M:Spartacus.Web.Container.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Container.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Container.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Container.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Container.</param>
            </member>
        <member name="M:Spartacus.Web.Container.GetValue">
             <summary>
             Retorna o texto ou valor atual do Container.
             </summary>
             <returns>Texto ou valor atual do Container.</returns>
            </member>
        <member name="M:Spartacus.Web.Container.Render">
             <summary>
             Renderiza o HTML do Container.
             </summary>
            </member>
        <member name="T:Spartacus.Web.Datetimepicker">
             <summary>
             Classe Datetimepicker.
             RRepresenta um componente em que o usuário pode selecionar uma data.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Datetimepicker.v_label">
             <summary>
             Rótulo do Datetimepicker.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Datetimepicker.v_datetimepicker">
             <summary>
             Controle nativo que representa o Datetimepicker.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Datetimepicker.v_format">
             <summary>
             Formato de Data.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Datetimepicker.#ctor(System.String,System.String,Spartacus.Web.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Datetimepicker" />.
             </summary>
             <param name="p_id">Identificador do Container atual.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Web.Datetimepicker.#ctor(System.String,System.String,System.String,Spartacus.Web.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Datetimepicker" />.
             </summary>
             <param name="p_id">Identificador do Container atual.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_format">Formato de data.</param>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Web.Datetimepicker.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Datetimepicker.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Datetimepicker.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Datetimepicker.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Datetimepicker.</param>
            </member>
        <member name="M:Spartacus.Web.Datetimepicker.GetValue">
             <summary>
             Retorna o texto ou valor atual do Datetimepicker.
             </summary>
             <returns>Texto ou valor atual do Datetimepicker.</returns>
            </member>
        <member name="M:Spartacus.Web.Datetimepicker.Render">
             <summary>
             Renderiza o HTML do Container.
             </summary>
            </member>
        <member name="T:Spartacus.Web.Grid">
             <summary>
             Classe Grid.
             Representa um componente Grid.
             Herda da classe <see cref="T:Spartacus.Web.Container" />. 
             </summary>
            </member>
        <member name="F:Spartacus.Web.Grid.v_gridhtml">
             <summary>
             Table HTML representando o grid.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Grid.v_selected">
             <summary>
             Controle nativo que representa o valor selecionado.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Grid.v_database">
             <summary>
             Objeto de conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Grid.v_sql">
             <summary>
             Consulta SQL para alimentar o Grid.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Grid.#ctor(System.String,Spartacus.Web.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Grid" />.
             </summary>
             <param name="p_id">Identificador do Container atual.</param>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Web.Grid.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Grid.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Grid.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Container.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Container.</param>
            </member>
        <member name="M:Spartacus.Web.Grid.GetValue">
             <summary>
             Retorna o texto ou valor atual do Container.
             </summary>
             <returns>Texto ou valor atual do Container.</returns>
            </member>
        <member name="M:Spartacus.Web.Grid.Populate(Spartacus.Database.Generic,System.String)">
             <summary>
             Popula o Grid atual com os dados obtidos a partir da execução da consulta SQL no banco de dados.
             </summary>
             <param name="p_database">Objeto de conexão com o banco de dados.</param>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Web.Grid.Populate(System.Data.DataTable)">
             <summary>
             Popula o Grid atual com os dados de um DataTable.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Grid.Populate">
             <summary>
             Popula o Grid atual com os dados obtidos a partir da execução da consulta SQL no banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Grid.Render">
             <summary>
             Renderiza o HTML do Container.
             </summary>
            </member>
        <member name="T:Spartacus.Web.Label">
             <summary>
             Classe Label.
             Representa um componente que apenas mostra texto para o usuário.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Label.v_text">
             <summary>
             Texto a ser exibido para o usuário.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Label.#ctor(System.String,Spartacus.Web.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Label" />.
             </summary>
             <param name="p_id">Identificador do Container atual.</param>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Web.Label.#ctor(System.String,System.String,Spartacus.Web.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Label" />.
             </summary>
             <param name="p_id">Identificador do Container atual.</param>
             <param name="p_label">Texto a ser exibido para o usuário.</param>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Web.Label.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Label.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Label.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Label.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Label.</param>
            </member>
        <member name="M:Spartacus.Web.Label.GetValue">
             <summary>
             Retorna o texto ou valor atual do Label.
             </summary>
             <returns>Texto ou valor atual do Label.</returns>
            </member>
        <member name="M:Spartacus.Web.Label.Render">
             <summary>
             Renderiza o HTML do Container.
             </summary>
            </member>
        <member name="T:Spartacus.Web.Progressbar">
             <summary>
             Classe Progressbar.
             Representa um componente que mostra o progresso de execução de alguma tarefa.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Progressbar.v_percent">
             <summary>
             Percentual atual do Progressbar.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Progressbar.v_text">
             <summary>
             Texto atual do Progressbar.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Progressbar.v_size">
             <summary>
             Tamanho do Progressbar.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Progressbar.v_interval">
             <summary>
             Intervalo de atualização do Progressbar.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Progressbar.v_webmethod">
             <summary>
             Webmethod utilizado em conjunto com o Progressbar.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Progressbar.v_error">
             <summary>
             Se houve erro na operação.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Progressbar.#ctor(System.String,Spartacus.Web.ProgressbarSize,System.Int32,System.String,Spartacus.Web.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Progressbar" />.
             </summary>
             <param name="p_id">Identificador do Container atual.</param>
             <param name="p_size">Tamanho do Progressbar.</param>
             <param name="p_interval">Intervalo de atualização do Progressbar.</param>
             <param name="p_webmethod">Webmethod utilizado em conjunto com o Progressbar.</param>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Web.Progressbar.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Progressbar.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Progressbar.SetValue(System.String)">
             <summary>
             Informa o texto a ser mostrado no Label.
             </summary>
             <param name="p_text">Texto a ser mostrado no Label.</param>
            </member>
        <member name="M:Spartacus.Web.Progressbar.SetValue(System.String,System.Int32)">
             <summary>
             Informa o texto a ser mostrado no Label e valor a ser mostrado no Progressbar.
             </summary>
             <param name="p_text">Texto a ser mostrado no Label.</param>
             <param name="p_value">Valor a ser mostrado no Progressbar</param>
            </member>
        <member name="M:Spartacus.Web.Progressbar.SetValue(System.String,System.Int32,System.Boolean)">
             <summary>
             Informa o texto a ser mostrado no Label e valor a ser mostrado no Progressbar.
             </summary>
             <param name="p_text">Texto a ser mostrado no Label.</param>
             <param name="p_value">Valor a ser mostrado no Progressbar</param>
             <param name="p_error">Se houve erro ou não.</param>
            </member>
        <member name="M:Spartacus.Web.Progressbar.GetValue">
             <summary>
             Retorna o texto ou valor atual do Textbox.
             </summary>
             <returns>Texto ou valor atual do Textbox.</returns>
            </member>
        <member name="M:Spartacus.Web.Progressbar.SetError(System.Boolean)">
             <summary>
             Configura estado de erro do progresso.
             </summary>
             <param name="p_error">Se houve erro ou não.</param>
            </member>
        <member name="M:Spartacus.Web.Progressbar.Render">
             <summary>
             Renderiza o HTML do Container.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Progressbar.RenderInner">
             <summary>
             Renderiza interior do Progressbar.
             </summary>
            </member>
        <member name="T:Spartacus.Web.Textbox">
             <summary>
             Classe Textbox.
             Representa um componente em que o usuário pode digitar texto em uma única linha.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Textbox.v_label">
             <summary>
             Rótulo do Textbox.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Textbox.v_textbox">
             <summary>
             Controle nativo que representa o Textbox.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Textbox.#ctor(System.String,System.String,Spartacus.Web.Container)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Textbox" />.
             </summary>
             <param name="p_id">Identificador do Container atual.</param>
             <param name="p_label">Texto exibido no rótulo.</param>
             <param name="p_parent">Container pai.</param>
            </member>
        <member name="M:Spartacus.Web.Textbox.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Textbox.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Textbox.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Textbox.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Textbox.</param>
            </member>
        <member name="M:Spartacus.Web.Textbox.GetValue">
             <summary>
             Retorna o texto ou valor atual do Textbox.
             </summary>
             <returns>Texto ou valor atual do Textbox.</returns>
            </member>
        <member name="M:Spartacus.Web.Textbox.Render">
             <summary>
             Renderiza o HTML do Container.
             </summary>
            </member>
        <member name="T:Spartacus.Web.Window">
             <summary>
             Classe Window.
             Representa uma Janela.
             </summary>
            </member>
        <member name="F:Spartacus.Web.Window.v_aspx">
             <summary>
             Nome da página ASPX.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Window.#ctor(System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Window" />.
             </summary>
             <param name="p_aspx">Nome da página ASPX.</param>
            </member>
        <member name="M:Spartacus.Web.Window.#ctor(System.String,System.String)">
             <summary>
             Inicializa uma nova instância da classe <see cref="T:Spartacus.Web.Window" />.
             </summary>
             <param name="p_title">Título da Janela</param>
             <param name="p_aspx">Nome da página ASPX.</param>
            </member>
        <member name="M:Spartacus.Web.Window.Clear">
             <summary>
             Limpa os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Window.Refresh">
             <summary>
             Atualiza os dados do Container atual.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Window.SetValue(System.String)">
             <summary>
             Informa o texto ou valor a ser mostrado no Container.
             Usado para mostrar ao usuário um formulário já preenchido.
             </summary>
             <param name="p_text">Texto a ser mostrado no Container.</param>
            </member>
        <member name="M:Spartacus.Web.Window.GetValue">
             <summary>
             Retorna o texto ou valor atual do Container.
             </summary>
             <returns>Texto ou valor atual do Container.</returns>
            </member>
        <member name="M:Spartacus.Web.Window.GetChildById(System.String)">
             <summary>
             Procura e retorna o Container filho que possua o ID solicitado.
             </summary>
             <returns>Container filho..</returns>
             <param name="p_id">Identificador.</param>
            </member>
        <member name="M:Spartacus.Web.Window.Render">
             <summary>
             Renderiza o HTML do Container.
             </summary>
            </member>
        <member name="M:Spartacus.Web.Window.RenderHead">
             <summary>
             Renderiza o HTML head.
             </summary>
             <returns>String com o HTML head.</returns>
            </member>
        <member name="M:Spartacus.Web.Window.RenderBody">
             <summary>
             Renderiza o HTML body.
             </summary>
             <returns>String com o HTML body.</returns>
            </member>
        <member name="T:Spartacus.Database.Mariadb">
             <summary>
             Classe Spartacus.Database.Mariadb.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o MySQL .NET Provider para acessar um SGBD MariaDB.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Mariadb.v_con">
             <summary>
             Conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Mariadb.v_cmd">
             <summary>
             Comando para conexão com o banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Mariadb.v_reader">
             <summary>
             Leitor de dados do banco de dados.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Mariadb.v_currentrow">
             <summary>
             Linha atual da QueryBlock.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mariadb.#ctor">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Mariadb" />.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mariadb.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Mariadb" />.
             </summary>
             <param name="p_server">
             IP do servidor MySQL.
             </param>
             <param name="p_port">
             Porta de conexão.
             </param>
             <param name="p_database">
             Nome da base de dados ou schema.
             </param>
             <param name="p_user">
             Usuário do MySQL.
             </param>
             <param name="p_password">
             Senha do MySQL.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.#ctor(System.String,System.String,System.String,System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Mariadb" />.
             </summary>
             <param name="p_server">
             IP do servidor MySQL.
             </param>
             <param name="p_database">
             Nome da base de dados ou schema.
             </param>
             <param name="p_user">
             Usuário do MySQL.
             </param>
             <param name="p_password">
             Senha do MySQL.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Mariadb.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Mariadb.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Mariadb.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mariadb.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Mariadb.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Mariadb.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Net.MailClient.Send(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String)">
             <summary>
             Envia um único e-mail para um único destinatário.
             </summary>
             <param name="p_host">Servidor.</param>
             <param name="p_port">Porta.</param>
             <param name="p_user">Usuário.</param>
             <param name="p_password">Senha.</param>
             <param name="p_from">Remetente.</param>
             <param name="p_to">Destinatário.</param>
             <param name="p_subject">Assunto.</param>
             <param name="p_body">Corpo.</param>
            </member>
        <member name="M:Spartacus.Net.MailClient.Send(System.String,System.Int32,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String)">
             <summary>
             Envia um único e-mail para uma lista de destinatários.
             </summary>
             <param name="p_host">Servidor.</param>
             <param name="p_port">Porta.</param>
             <param name="p_user">Usuário.</param>
             <param name="p_password">Senha.</param>
             <param name="p_from">Remetente.</param>
             <param name="p_to">Destinatário.</param>
             <param name="p_subject">Assunto.</param>
             <param name="p_body">Corpo.</param>
            </member>
        <member name="M:Spartacus.Net.MailClient.Send(System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
             <summary>
             Envia um único e-mail para um único destinatário.
             </summary>
             <param name="p_host">Servidor.</param>
             <param name="p_port">Porta.</param>
             <param name="p_user">Usuário.</param>
             <param name="p_password">Senha.</param>
             <param name="p_from">Remetente.</param>
             <param name="p_to">Destinatário.</param>
             <param name="p_subject">Assunto.</param>
             <param name="p_body">Corpo.</param>
             <param name="p_htmlbody">Se o corpo é HTML.</param>
            </member>
        <member name="M:Spartacus.Net.MailClient.Send(System.String,System.Int32,System.String,System.String,System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.Boolean)">
             <summary>
             Envia um único e-mail para uma lista de destinatários.
             </summary>
             <param name="p_host">Servidor.</param>
             <param name="p_port">Porta.</param>
             <param name="p_user">Usuário.</param>
             <param name="p_password">Senha.</param>
             <param name="p_from">Remetente.</param>
             <param name="p_to">Destinatário.</param>
             <param name="p_subject">Assunto.</param>
             <param name="p_body">Corpo.</param>
             <param name="p_htmlbody">Se o corpo é HTML.</param>
            </member>
        <member name="M:Spartacus.Net.MailClient.Send(System.String,System.Int32,System.Net.NetworkCredential,System.String)">
             <summary>
             Envia um único e-mail usando MimeKit e MailKit.
             </summary>
             <param name="p_host">Servidor.</param>
             <param name="p_port">Porta.</param>
             <param name="p_credential">Credenciais.</param>
             <param name="p_message">E-mail a ser enviado.</param>
            </member>
        <member name="T:Spartacus.Database.Pollydb">
             <summary>
             Classe Spartacus.Database.PollyDB.
             Herda da classe <see cref="T:Spartacus.Database.Generic" />.
             Utiliza o Mono.Data.Sqlite para acessar arquivos CSV, XLSX e DBF.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Pollydb.v_cachethreshold">
             <summary>
             Limiar para saber se a cache deve ficar em memória ou em disco.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Pollydb.v_tables">
             <summary>
             Lista de arquivos em cache.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Pollydb.v_separator">
             <summary>
             Separador de campos.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Pollydb.v_delimiter">
             <summary>
             Delimitador de campos.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Pollydb.v_header">
             <summary>
             Se a primeira linha do arquivo é cabeçalho ou não.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Pollydb.v_encoding">
             <summary>
             Codificação do arquivo.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Pollydb.v_database">
             <summary>
             Banco de dados SQLite ou Memory temporário.
             </summary>
            </member>
        <member name="F:Spartacus.Database.Pollydb.v_tempdatabase">
             <summary>
             Nome do banco de dados temporário (se for SQLite).
             </summary>
            </member>
        <member name="F:Spartacus.Database.Pollydb.v_tabletodrop">
             <summary>
             Nome da tabela que será excluída.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Pollydb.#ctor(System.String)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Pollydb" />.
             </summary>
             <param name="p_directory">
             Caminho para o diretório onde estão os arquivos CSV, DBF e XLSX.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.#ctor(System.String,System.Int64)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Pollydb" />.
             </summary>
             <param name="p_directory">
             Caminho para o diretório onde estão os arquivos CSV, DBF e XLSX.
             </param>
             <param name="p_cachethreshold">
             Limiar para saber se a cache deve ser construída em memória ou em disco.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.#ctor(System.String,System.Int64,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Inicializa uma nova instancia da classe <see cref="T:Spartacus.Database.Pollydb" />.
             </summary>
             <param name="p_directory">
             Caminho para o diretório onde estão os arquivos CSV, DBF e XLSX.
             </param>
             <param name="p_cachethreshold">
             Limiar para saber se a cache deve ser construída em memória ou em disco.
             </param>
             <param name="p_separator">
             Separador de campos.
             </param>
             <param name="p_delimiter">
             Delimitador de string.
             </param>
             <param name="p_header">
             Se a primeira linha é cabeçalho ou não.
             </param>
             <param name="p_encoding">
             Codificação do arquivo.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.CreateDatabase(System.String)">
             <summary>
             Cria um banco de dados.
             </summary>
             <param name="p_name">Nome do arquivo de banco de dados a ser criado.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.CreateDatabase">
             <summary>
             Cria um banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Open">
             <summary>
             Abre a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Query(System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Query(System.String,System.String,Spartacus.Utils.ProgressEventClass)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see cref="T:System.Data.DataTable" />.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_progress">Evento de progresso da execução da consulta.</param>
             <returns>Retorna uma <see cref="T:System.Data.DataTable" /> com os dados de retorno da consulta.</returns>
            </member>
        <member name="M:Spartacus.Database.Pollydb.QueryBlock(System.String,System.String,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos. Conexão com o banco precisa estar aberta.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_startrow">
             Número da linha inicial.
             </param>
             <param name="p_endrow">
             Número da linha final.
             </param>
             <param name="p_hasmoredata">
             Indica se ainda há mais dados a serem lidos.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.QueryHtml(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma string HTML.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_id">
             ID da tabela no HTML.
             </param>
             <param name="p_options">
             Opções da tabela no HTML.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.QueryStoredProc(System.String,System.String,System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em um <see creg="System.Data.DataTable" />.
             Utiliza um DataReader para buscar em blocos a partir do cursor de saída de uma Stored Procedure.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_tablename">
             Nome virtual da tabela onde deve ser armazenado o resultado, para fins de cache.
             </param>
             <param name="p_outparam">
             Nome do parâmetro de saída que deve ser um REF CURSOR.
             </param>
             <remarks>Não suportado em todos os SGBDs.</remarks>
            </member>
        <member name="M:Spartacus.Database.Pollydb.QueryList``1(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de objetos customizados.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <typeparam name="T">
             Tipo do objeto customizado (classe com propriedades).
             </typeparam>
            </member>
        <member name="M:Spartacus.Database.Pollydb.QuerySList(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.QuerySList(System.String,System.Collections.Generic.List{System.String}@)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando os dados de retorno em uma lista de listas de string.
             Utiliza um DataReader para buscar em blocos.
             </summary>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
             <param name="p_header">
             Lista de nomes de colunas.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Execute(System.String)">
             <summary>
             Executa um código SQL no banco de dados.
             </summary>
             <param name="p_sql">
             Código SQL a ser executado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.InsertBlock(System.String,System.Collections.Generic.List{System.String})">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.InsertBlock(System.String,System.Collections.Generic.List{System.String},System.String)">
             <summary>
             Insere um bloco de linhas em uma determinada tabela.
             </summary>
             <param name="p_table">
             Nome da tabela a serem inseridas as linhas.
             </param>
             <param name="p_rows">
             Lista de linhas a serem inseridas na tabela.
             </param>
             <param name="p_columnnames">
             Nomes de colunas da tabela, entre parênteses, separados por vírgula.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.ExecuteScalar(System.String)">
             <summary>
             Realiza uma consulta no banco de dados, armazenando um único dado de retorno em uma string.
             </summary>
             <returns>
             string com o dado de retorno.
             </returns>
             <param name="p_sql">
             Código SQL a ser consultado no banco de dados.
             </param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Close">
             <summary>
             Fecha a conexão com o banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Pollydb.DropDatabase(System.String)">
             <summary>
             Deleta um banco de dados.
             </summary>
             <param name="p_name">Nome do banco de dados a ser deletado.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.DropDatabase">
             <summary>
             Deleta o banco de dados conectado atualmente.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Pollydb.GetColumnNames(System.String)">
             <summary>
             Lista os nomes de colunas de uma determinada consulta.
             </summary>
             <returns>Vetor com os nomes de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.GetColumnNamesAndTypes(System.String)">
             <summary>
             Lista os nomes e tipos de colunas de uma determinada consulta.
             </summary>
             <returns>Matriz com os nomes e tipos de colunas.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.GetFields(System.String)">
             <summary>
             Lista os campos (ou colunas) de uma determinada consulta.
             </summary>
             <returns>Vetor de campos.</returns>
             <param name="p_sql">Consulta SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Transfer(System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Transfer(System.String,System.String,System.String,Spartacus.Database.Command,Spartacus.Database.Generic,System.String@,System.UInt32,System.UInt32,System.Boolean@)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_table">Nome da tabela de destino.</param>
             <param name="p_columns">Lista de colunas da tabela de destino.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_log">Log de inserção.</param>
             <param name="p_startrow">Número da linha inicial.</param>
             <param name="p_endrow">Número da linha final.</param>
             <param name="p_hasmoredata">Indica se ainda há mais dados a serem lidos.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.Transfer(System.String,Spartacus.Database.Command,Spartacus.Database.Generic,Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ErrorEventClass)">
             <summary>
             Transfere dados do banco de dados atual para um banco de dados de destino.
             Conexão com o banco de destino precisa estar aberta.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta SQL para buscar os dados no banco atual.</param>
             <param name="p_insert">Comando de inserção para inserir cada linha no banco de destino.</param>
             <param name="p_destdatabase">Conexão com o banco de destino.</param>
             <param name="p_progress">Evento de progresso.</param>
             <param name="p_error">Evento de erro.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.TransferToCSV(System.String,System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo CSV.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
             <param name="p_separator">Separador de campos.</param>
             <param name="p_delimiter">Delimitador de string.</param>
             <param name="p_header">Se a primeira linha é cabeçalho ou não.</param>
             <param name="p_encoding">Codificação do arquivo.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.TransferToXLSX(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo XLSX.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.TransferToDBF(System.String,System.String)">
             <summary>
             Transfere dados do banco de dados atual para um arquivo DBF.
             Não pára a execução se der um problema num comando de inserção específico.
             </summary>
             <returns>Número de linhas transferidas.</returns>
             <param name="p_query">Consulta a ser executada no banco de dados atual.</param>
             <param name="p_filename">Nome do arquivo de destino.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.BuildCache(System.String)">
             <summary>
             Constrói o banco de dados temporário.
             </summary>
             <param name="p_sql">Texto SQL.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.ExtractFromString(System.String,System.String,System.String)">
             <summary>
             Extrai uma lista de texto entre os delimitadores especificados.
             </summary>
             <returns>Lista de texto entre delimitadores especificados.</returns>
             <param name="p_text">Texto original completo.</param>
             <param name="p_start">Delimitador inicial.</param>
             <param name="p_end">Delimitador final.</param>
            </member>
        <member name="M:Spartacus.Database.Pollydb.UpdateFiles">
             <summary>
             Atualiza arquivos do banco de dados.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Pollydb.DestroyCache">
             <summary>
             Destrói o banco de dados temporário.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Pollydb.OnProgress(Spartacus.Utils.ProgressEventClass,Spartacus.Utils.ProgressEventArgs)">
             <summary>
             Evento de progresso de transferência de um arquivo para o banco de dados temporário.
             </summary>
            </member>
        <member name="M:Spartacus.Database.Pollydb.OnError(Spartacus.Utils.ErrorEventClass,Spartacus.Utils.ErrorEventArgs)">
             <summary>
             Evento de erro de transferência de um arquivo para o banco de dados temporário.
             </summary>
            </member>
        <member name="M:Spartacus.ThirdParty.WebServer.Options.ConfigurationManager.LoadConfigFile">
             <summary>
             If a configfile option was specified, tries to load
             the configuration file
             </summary>
             <returns>false on failure, true on success or
             option not present</returns>
            </member>
        <member name="M:Spartacus.ThirdParty.WebServer.BaseRequestBroker.GrowRequests(System.Int32@)">
             <summary>
             Grows the size of the request allocation tables by 33%.
            
             This *MUST* be called with the reqlock held!
             </summary>
             <returns>ID to use for a new request.</returns>
             <param name="curlen">Current length of the allocation tables.</param>
            </member>
        <member name="M:Spartacus.ThirdParty.WebServer.BaseRequestBroker.GetNextRequestId">
             <summary>
             Gets the next available request ID, expanding the array
             of possible ID's if necessary.
            
             This *MUST* be called with the reqlock held!
             </summary>
             <returns>ID of the request.</returns>
            </member>
        <member name="M:Spartacus.ThirdParty.WebServer.BaseRequestBroker.DoUnregisterRequest(System.Int32)">
             <summary>
             Invokes registered handlers of UnregisterRequestEvent. Each handler is passed an
             arguments object which contains the ID of a request that is about to be
             unregistered.
             </summary>
             <param name="id">ID of a request that is about to be unregistered.</param>
            </member>
        <member name="M:Spartacus.ThirdParty.WebServer.XSP.Server.RealMain(System.String[],System.Boolean,Spartacus.ThirdParty.WebServer.IApplicationHost,System.Boolean)">
             <param name="args">Original args passed to the program.</param>
             <param name="root">If set to <c>true</c> it means the caller is in the root domain.</param>
             <param name="ext_apphost">Used when single app mode is used, in a recursive call to RealMain from the single app domain.</param>
             <param name="quiet">If set to <c>true</c> don't show messages. Used to avoid double printing of the banner.</param>
            </member>
        <member name="M:Spartacus.ThirdParty.WebServer.XSP.Server.DebugMain(System.String[],System.Boolean,Spartacus.ThirdParty.WebServer.IApplicationHost,System.Boolean)">
             <param name="args">Original args passed to the program.</param>
             <param name="root">If set to <c>true</c> it means the caller is in the root domain.</param>
             <param name="ext_apphost">Used when single app mode is used, in a recursive call to RealMain from the single app domain.</param>
             <param name="quiet">If set to <c>true</c> don't show messages. Used to avoid double printing of the banner.</param>
            </member>
    </members>
</doc>
